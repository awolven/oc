/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCFFI
#define SWIGCFFI
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>


#include <Standard.hxx>
#include <Standard_DefineAlloc.hxx>
#include <Standard_Handle.hxx>
  

#include <gp_Pnt.hxx>
#include <gp_Pnt2d.hxx>
#include <gp_Dir2d.hxx>
#include <gp_Vec2d.hxx>
#include <gp_Ax2d.hxx>
#include <gp_Ax22d.hxx>
#include <gp_Pln.hxx>
#include <gp_Vec.hxx>
#include <gp_Dir.hxx>
#include <gp_Ax3.hxx>
#include <gp_Ax2.hxx>
#include <gp_Ax1.hxx>
#include <gp_Trsf2d.hxx>
#include <gp_Trsf.hxx>
#include <gp_Circ.hxx>
#include <gp_Cone.hxx>
#include <gp_Cylinder.hxx>
#include <gp_Parab.hxx>
#include <gp_Hypr.hxx>
#include <gp_Torus.hxx>
#include <gp_Sphere.hxx>
#include <gp_XYZ.hxx>
#include <gp_XY.hxx>
#include <gp_Lin2d.hxx>

EXPORT gp_Pnt *_wrap_new_gp_Pnt__SWIG_0 () {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  gp_Pnt *result = 0 ;
  
  try {
    result = (gp_Pnt *)new gp_Pnt();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


EXPORT gp_Pnt *_wrap_new_gp_Pnt__SWIG_1 (gp_XYZ *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  gp_XYZ *arg1 = 0 ;
  gp_Pnt *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Pnt *)new gp_Pnt((gp_XYZ const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


EXPORT gp_Pnt *_wrap_new_gp_Pnt__SWIG_2 (Standard_Real larg1, Standard_Real larg2, Standard_Real larg3) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Standard_Real arg1 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (gp_Pnt *)new gp_Pnt(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


EXPORT Standard_Real _wrap_gp_Pnt_X (gp_Pnt *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  gp_Pnt *arg1 = (gp_Pnt *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)((gp_Pnt const *)arg1)->X();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT Standard_Real _wrap_gp_Pnt_Y (gp_Pnt *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  gp_Pnt *arg1 = (gp_Pnt *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)((gp_Pnt const *)arg1)->Y();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT Standard_Real _wrap_gp_Pnt_Z (gp_Pnt *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  gp_Pnt *arg1 = (gp_Pnt *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)((gp_Pnt const *)arg1)->Z();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_gp_Pnt (gp_Pnt *larg1) {
  gp_Pnt *arg1 = (gp_Pnt *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Pnt2d *_wrap_new_gp_Pnt2d__SWIG_0 () {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  gp_Pnt2d *result = 0 ;
  
  try {
    result = (gp_Pnt2d *)new gp_Pnt2d();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


EXPORT gp_Pnt2d *_wrap_new_gp_Pnt2d__SWIG_1 (gp_XY *larg1) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  gp_XY *arg1 = 0 ;
  gp_Pnt2d *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Pnt2d *)new gp_Pnt2d((gp_XY const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


EXPORT gp_Pnt2d *_wrap_new_gp_Pnt2d__SWIG_2 (Standard_Real larg1, Standard_Real larg2) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Standard_Real arg1 ;
  Standard_Real arg2 ;
  gp_Pnt2d *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Pnt2d *)new gp_Pnt2d(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


EXPORT void _wrap_delete_gp_Pnt2d (gp_Pnt2d *larg1) {
  gp_Pnt2d *arg1 = (gp_Pnt2d *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Dir2d *_wrap_new_gp_Dir2d__SWIG_0 () {
  gp_Dir2d * lresult = (gp_Dir2d *)0 ;
  gp_Dir2d *result = 0 ;
  
  try {
    result = (gp_Dir2d *)new gp_Dir2d();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Dir2d *)0;
  }
}


EXPORT gp_Dir2d *_wrap_new_gp_Dir2d__SWIG_1 (gp_Vec2d *larg1) {
  gp_Dir2d * lresult = (gp_Dir2d *)0 ;
  gp_Vec2d *arg1 = 0 ;
  gp_Dir2d *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Dir2d *)new gp_Dir2d((gp_Vec2d const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Dir2d *)0;
  }
}


EXPORT gp_Dir2d *_wrap_new_gp_Dir2d__SWIG_2 (gp_XY *larg1) {
  gp_Dir2d * lresult = (gp_Dir2d *)0 ;
  gp_XY *arg1 = 0 ;
  gp_Dir2d *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Dir2d *)new gp_Dir2d((gp_XY const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Dir2d *)0;
  }
}


EXPORT gp_Dir2d *_wrap_new_gp_Dir2d__SWIG_3 (Standard_Real larg1, Standard_Real larg2) {
  gp_Dir2d * lresult = (gp_Dir2d *)0 ;
  Standard_Real arg1 ;
  Standard_Real arg2 ;
  gp_Dir2d *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Dir2d *)new gp_Dir2d(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Dir2d *)0;
  }
}


EXPORT void _wrap_delete_gp_Dir2d (gp_Dir2d *larg1) {
  gp_Dir2d *arg1 = (gp_Dir2d *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Vec2d *_wrap_new_gp_Vec2d__SWIG_0 () {
  gp_Vec2d * lresult = (gp_Vec2d *)0 ;
  gp_Vec2d *result = 0 ;
  
  try {
    result = (gp_Vec2d *)new gp_Vec2d();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Vec2d *)0;
  }
}


EXPORT gp_Vec2d *_wrap_new_gp_Vec2d__SWIG_1 (gp_Dir2d *larg1) {
  gp_Vec2d * lresult = (gp_Vec2d *)0 ;
  gp_Dir2d *arg1 = 0 ;
  gp_Vec2d *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Vec2d *)new gp_Vec2d((gp_Dir2d const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Vec2d *)0;
  }
}


EXPORT gp_Vec2d *_wrap_new_gp_Vec2d__SWIG_2 (gp_XY *larg1) {
  gp_Vec2d * lresult = (gp_Vec2d *)0 ;
  gp_XY *arg1 = 0 ;
  gp_Vec2d *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Vec2d *)new gp_Vec2d((gp_XY const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Vec2d *)0;
  }
}


EXPORT gp_Vec2d *_wrap_new_gp_Vec2d__SWIG_3 (Standard_Real larg1, Standard_Real larg2) {
  gp_Vec2d * lresult = (gp_Vec2d *)0 ;
  Standard_Real arg1 ;
  Standard_Real arg2 ;
  gp_Vec2d *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Vec2d *)new gp_Vec2d(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Vec2d *)0;
  }
}


EXPORT gp_Vec2d *_wrap_new_gp_Vec2d__SWIG_4 (gp_Pnt2d *larg1, gp_Pnt2d *larg2) {
  gp_Vec2d * lresult = (gp_Vec2d *)0 ;
  gp_Pnt2d *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  gp_Vec2d *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Vec2d *)new gp_Vec2d((gp_Pnt2d const &)*arg1,(gp_Pnt2d const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Vec2d *)0;
  }
}


EXPORT void _wrap_delete_gp_Vec2d (gp_Vec2d *larg1) {
  gp_Vec2d *arg1 = (gp_Vec2d *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Ax2d *_wrap_new_gp_Ax2d__SWIG_0 () {
  gp_Ax2d * lresult = (gp_Ax2d *)0 ;
  gp_Ax2d *result = 0 ;
  
  try {
    result = (gp_Ax2d *)new gp_Ax2d();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax2d *)0;
  }
}


EXPORT gp_Ax2d *_wrap_new_gp_Ax2d__SWIG_1 (gp_Pnt2d *larg1, gp_Dir2d *larg2) {
  gp_Ax2d * lresult = (gp_Ax2d *)0 ;
  gp_Pnt2d *arg1 = 0 ;
  gp_Dir2d *arg2 = 0 ;
  gp_Ax2d *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Ax2d *)new gp_Ax2d((gp_Pnt2d const &)*arg1,(gp_Dir2d const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax2d *)0;
  }
}


EXPORT void _wrap_delete_gp_Ax2d (gp_Ax2d *larg1) {
  gp_Ax2d *arg1 = (gp_Ax2d *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Ax22d *_wrap_new_gp_Ax22d__SWIG_0 () {
  gp_Ax22d * lresult = (gp_Ax22d *)0 ;
  gp_Ax22d *result = 0 ;
  
  try {
    result = (gp_Ax22d *)new gp_Ax22d();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax22d *)0;
  }
}


EXPORT gp_Ax22d *_wrap_new_gp_Ax22d__SWIG_1 (gp_Pnt2d *larg1, gp_Dir2d *larg2, gp_Dir2d *larg3) {
  gp_Ax22d * lresult = (gp_Ax22d *)0 ;
  gp_Pnt2d *arg1 = 0 ;
  gp_Dir2d *arg2 = 0 ;
  gp_Dir2d *arg3 = 0 ;
  gp_Ax22d *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (gp_Ax22d *)new gp_Ax22d((gp_Pnt2d const &)*arg1,(gp_Dir2d const &)*arg2,(gp_Dir2d const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax22d *)0;
  }
}


EXPORT gp_Ax22d *_wrap_new_gp_Ax22d__SWIG_2 (gp_Pnt2d *larg1, gp_Dir2d *larg2, bool larg3) {
  gp_Ax22d * lresult = (gp_Ax22d *)0 ;
  gp_Pnt2d *arg1 = 0 ;
  gp_Dir2d *arg2 = 0 ;
  Standard_Boolean arg3 ;
  gp_Ax22d *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (gp_Ax22d *)new gp_Ax22d((gp_Pnt2d const &)*arg1,(gp_Dir2d const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax22d *)0;
  }
}


EXPORT gp_Ax22d *_wrap_new_gp_Ax22d__SWIG_3 (gp_Pnt2d *larg1, gp_Dir2d *larg2) {
  gp_Ax22d * lresult = (gp_Ax22d *)0 ;
  gp_Pnt2d *arg1 = 0 ;
  gp_Dir2d *arg2 = 0 ;
  gp_Ax22d *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Ax22d *)new gp_Ax22d((gp_Pnt2d const &)*arg1,(gp_Dir2d const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax22d *)0;
  }
}


EXPORT gp_Ax22d *_wrap_new_gp_Ax22d__SWIG_4 (gp_Ax2d *larg1, bool larg2) {
  gp_Ax22d * lresult = (gp_Ax22d *)0 ;
  gp_Ax2d *arg1 = 0 ;
  Standard_Boolean arg2 ;
  gp_Ax22d *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (gp_Ax22d *)new gp_Ax22d((gp_Ax2d const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax22d *)0;
  }
}


EXPORT gp_Ax22d *_wrap_new_gp_Ax22d__SWIG_5 (gp_Ax2d *larg1) {
  gp_Ax22d * lresult = (gp_Ax22d *)0 ;
  gp_Ax2d *arg1 = 0 ;
  gp_Ax22d *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Ax22d *)new gp_Ax22d((gp_Ax2d const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax22d *)0;
  }
}


EXPORT void _wrap_delete_gp_Ax22d (gp_Ax22d *larg1) {
  gp_Ax22d *arg1 = (gp_Ax22d *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Pln *_wrap_new_gp_Pln__SWIG_0 (gp_Ax3 *larg1) {
  gp_Pln * lresult = (gp_Pln *)0 ;
  gp_Ax3 *arg1 = 0 ;
  gp_Pln *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Pln *)new gp_Pln((gp_Ax3 const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Pln *)0;
  }
}


EXPORT gp_Pln *_wrap_new_gp_Pln__SWIG_1 (gp_Pnt *larg1, gp_Dir *larg2) {
  gp_Pln * lresult = (gp_Pln *)0 ;
  gp_Pnt *arg1 = 0 ;
  gp_Dir *arg2 = 0 ;
  gp_Pln *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Pln *)new gp_Pln((gp_Pnt const &)*arg1,(gp_Dir const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Pln *)0;
  }
}


EXPORT gp_Pln *_wrap_new_gp_Pln__SWIG_2 (Standard_Real larg1, Standard_Real larg2, Standard_Real larg3, Standard_Real larg4) {
  gp_Pln * lresult = (gp_Pln *)0 ;
  Standard_Real arg1 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  gp_Pln *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (gp_Pln *)new gp_Pln(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Pln *)0;
  }
}


EXPORT void _wrap_delete_gp_Pln (gp_Pln *larg1) {
  gp_Pln *arg1 = (gp_Pln *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Vec *_wrap_new_gp_Vec__SWIG_0 () {
  gp_Vec * lresult = (gp_Vec *)0 ;
  gp_Vec *result = 0 ;
  
  try {
    result = (gp_Vec *)new gp_Vec();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Vec *)0;
  }
}


EXPORT gp_Vec *_wrap_new_gp_Vec__SWIG_1 (gp_Dir *larg1) {
  gp_Vec * lresult = (gp_Vec *)0 ;
  gp_Dir *arg1 = 0 ;
  gp_Vec *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Vec *)new gp_Vec((gp_Dir const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Vec *)0;
  }
}


EXPORT gp_Vec *_wrap_new_gp_Vec__SWIG_2 (gp_XYZ *larg1) {
  gp_Vec * lresult = (gp_Vec *)0 ;
  gp_XYZ *arg1 = 0 ;
  gp_Vec *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Vec *)new gp_Vec((gp_XYZ const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Vec *)0;
  }
}


EXPORT gp_Vec *_wrap_new_gp_Vec__SWIG_3 (Standard_Real larg1, Standard_Real larg2, Standard_Real larg3) {
  gp_Vec * lresult = (gp_Vec *)0 ;
  Standard_Real arg1 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Vec *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (gp_Vec *)new gp_Vec(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Vec *)0;
  }
}


EXPORT gp_Vec *_wrap_new_gp_Vec__SWIG_4 (gp_Pnt *larg1, gp_Pnt *larg2) {
  gp_Vec * lresult = (gp_Vec *)0 ;
  gp_Pnt *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Vec *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Vec *)new gp_Vec((gp_Pnt const &)*arg1,(gp_Pnt const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Vec *)0;
  }
}


EXPORT void _wrap_delete_gp_Vec (gp_Vec *larg1) {
  gp_Vec *arg1 = (gp_Vec *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Dir *_wrap_new_gp_Dir__SWIG_0 () {
  gp_Dir * lresult = (gp_Dir *)0 ;
  gp_Dir *result = 0 ;
  
  try {
    result = (gp_Dir *)new gp_Dir();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Dir *)0;
  }
}


EXPORT gp_Dir *_wrap_new_gp_Dir__SWIG_1 (gp_Vec *larg1) {
  gp_Dir * lresult = (gp_Dir *)0 ;
  gp_Vec *arg1 = 0 ;
  gp_Dir *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Dir *)new gp_Dir((gp_Vec const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Dir *)0;
  }
}


EXPORT gp_Dir *_wrap_new_gp_Dir__SWIG_2 (gp_XYZ *larg1) {
  gp_Dir * lresult = (gp_Dir *)0 ;
  gp_XYZ *arg1 = 0 ;
  gp_Dir *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Dir *)new gp_Dir((gp_XYZ const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Dir *)0;
  }
}


EXPORT gp_Dir *_wrap_new_gp_Dir__SWIG_3 (Standard_Real larg1, Standard_Real larg2, Standard_Real larg3) {
  gp_Dir * lresult = (gp_Dir *)0 ;
  Standard_Real arg1 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Dir *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (gp_Dir *)new gp_Dir(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Dir *)0;
  }
}


EXPORT void _wrap_delete_gp_Dir (gp_Dir *larg1) {
  gp_Dir *arg1 = (gp_Dir *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Ax3 *_wrap_new_gp_Ax3__SWIG_0 () {
  gp_Ax3 * lresult = (gp_Ax3 *)0 ;
  gp_Ax3 *result = 0 ;
  
  try {
    result = (gp_Ax3 *)new gp_Ax3();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax3 *)0;
  }
}


EXPORT gp_Ax3 *_wrap_new_gp_Ax3__SWIG_1 (gp_Ax2 *larg1) {
  gp_Ax3 * lresult = (gp_Ax3 *)0 ;
  gp_Ax2 *arg1 = 0 ;
  gp_Ax3 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Ax3 *)new gp_Ax3((gp_Ax2 const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax3 *)0;
  }
}


EXPORT gp_Ax3 *_wrap_new_gp_Ax3__SWIG_2 (gp_Pnt *larg1, gp_Dir *larg2, gp_Dir *larg3) {
  gp_Ax3 * lresult = (gp_Ax3 *)0 ;
  gp_Pnt *arg1 = 0 ;
  gp_Dir *arg2 = 0 ;
  gp_Dir *arg3 = 0 ;
  gp_Ax3 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (gp_Ax3 *)new gp_Ax3((gp_Pnt const &)*arg1,(gp_Dir const &)*arg2,(gp_Dir const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax3 *)0;
  }
}


EXPORT void _wrap_delete_gp_Ax3 (gp_Ax3 *larg1) {
  gp_Ax3 *arg1 = (gp_Ax3 *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Ax2 *_wrap_new_gp_Ax2__SWIG_0 () {
  gp_Ax2 * lresult = (gp_Ax2 *)0 ;
  gp_Ax2 *result = 0 ;
  
  try {
    result = (gp_Ax2 *)new gp_Ax2();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax2 *)0;
  }
}


EXPORT gp_Ax2 *_wrap_new_gp_Ax2__SWIG_1 (gp_Pnt *larg1, gp_Dir *larg2, gp_Dir *larg3) {
  gp_Ax2 * lresult = (gp_Ax2 *)0 ;
  gp_Pnt *arg1 = 0 ;
  gp_Dir *arg2 = 0 ;
  gp_Dir *arg3 = 0 ;
  gp_Ax2 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (gp_Ax2 *)new gp_Ax2((gp_Pnt const &)*arg1,(gp_Dir const &)*arg2,(gp_Dir const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax2 *)0;
  }
}


EXPORT void _wrap_delete_gp_Ax2 (gp_Ax2 *larg1) {
  gp_Ax2 *arg1 = (gp_Ax2 *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Ax1 *_wrap_new_gp_Ax1__SWIG_0 () {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  gp_Ax1 *result = 0 ;
  
  try {
    result = (gp_Ax1 *)new gp_Ax1();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


EXPORT gp_Ax1 *_wrap_new_gp_Ax1__SWIG_1 (gp_Pnt *larg1, gp_Dir *larg2) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  gp_Pnt *arg1 = 0 ;
  gp_Dir *arg2 = 0 ;
  gp_Ax1 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Ax1 *)new gp_Ax1((gp_Pnt const &)*arg1,(gp_Dir const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


EXPORT void _wrap_delete_gp_Ax1 (gp_Ax1 *larg1) {
  gp_Ax1 *arg1 = (gp_Ax1 *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Trsf2d *_wrap_new_gp_Trsf2d__SWIG_0 () {
  gp_Trsf2d * lresult = (gp_Trsf2d *)0 ;
  gp_Trsf2d *result = 0 ;
  
  try {
    result = (gp_Trsf2d *)new gp_Trsf2d();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Trsf2d *)0;
  }
}


EXPORT gp_Trsf2d *_wrap_new_gp_Trsf2d__SWIG_1 (gp_Trsf *larg1) {
  gp_Trsf2d * lresult = (gp_Trsf2d *)0 ;
  gp_Trsf *arg1 = 0 ;
  gp_Trsf2d *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Trsf2d *)new gp_Trsf2d((gp_Trsf const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Trsf2d *)0;
  }
}


EXPORT void _wrap_delete_gp_Trsf2d (gp_Trsf2d *larg1) {
  gp_Trsf2d *arg1 = (gp_Trsf2d *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Trsf *_wrap_new_gp_Trsf__SWIG_0 () {
  gp_Trsf * lresult = (gp_Trsf *)0 ;
  gp_Trsf *result = 0 ;
  
  try {
    result = (gp_Trsf *)new gp_Trsf();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Trsf *)0;
  }
}


EXPORT gp_Trsf *_wrap_new_gp_Trsf__SWIG_1 (gp_Trsf2d *larg1) {
  gp_Trsf * lresult = (gp_Trsf *)0 ;
  gp_Trsf2d *arg1 = 0 ;
  gp_Trsf *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Trsf *)new gp_Trsf((gp_Trsf2d const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Trsf *)0;
  }
}


EXPORT void _wrap_gp_Trsf_SetRotation (gp_Trsf *larg1, gp_Ax1 *larg2, Standard_Real larg3) {
  gp_Trsf *arg1 = (gp_Trsf *) 0 ;
  gp_Ax1 *arg2 = 0 ;
  Standard_Real arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->SetRotation((gp_Ax1 const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_gp_Trsf_SetTranslation (gp_Trsf *larg1, gp_Vec *larg2) {
  gp_Trsf *arg1 = (gp_Trsf *) 0 ;
  gp_Vec *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->SetTranslation((gp_Vec const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_gp_Trsf_SetValues (gp_Trsf *larg1, Standard_Real larg2, Standard_Real larg3, Standard_Real larg4, Standard_Real larg5, Standard_Real larg6, Standard_Real larg7, Standard_Real larg8, Standard_Real larg9, Standard_Real larg10, Standard_Real larg11, Standard_Real larg12, Standard_Real larg13) {
  gp_Trsf *arg1 = (gp_Trsf *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  Standard_Real arg6 ;
  Standard_Real arg7 ;
  Standard_Real arg8 ;
  Standard_Real arg9 ;
  Standard_Real arg10 ;
  Standard_Real arg11 ;
  Standard_Real arg12 ;
  Standard_Real arg13 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  try {
    (arg1)->SetValues(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_gp_Trsf (gp_Trsf *larg1) {
  gp_Trsf *arg1 = (gp_Trsf *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Circ *_wrap_new_gp_Circ (gp_Ax2 *larg1, Standard_Real larg2) {
  gp_Circ * lresult = (gp_Circ *)0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  gp_Circ *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Circ *)new gp_Circ((gp_Ax2 const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Circ *)0;
  }
}


EXPORT void _wrap_delete_gp_Circ (gp_Circ *larg1) {
  gp_Circ *arg1 = (gp_Circ *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Cone *_wrap_new_gp_Cone (gp_Ax3 *larg1, Standard_Real larg2, Standard_Real larg3) {
  gp_Cone * lresult = (gp_Cone *)0 ;
  gp_Ax3 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Cone *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (gp_Cone *)new gp_Cone((gp_Ax3 const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Cone *)0;
  }
}


EXPORT void _wrap_delete_gp_Cone (gp_Cone *larg1) {
  gp_Cone *arg1 = (gp_Cone *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Cylinder *_wrap_new_gp_Cylinder (gp_Ax3 *larg1, Standard_Real larg2) {
  gp_Cylinder * lresult = (gp_Cylinder *)0 ;
  gp_Ax3 *arg1 = 0 ;
  Standard_Real arg2 ;
  gp_Cylinder *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Cylinder *)new gp_Cylinder((gp_Ax3 const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Cylinder *)0;
  }
}


EXPORT void _wrap_delete_gp_Cylinder (gp_Cylinder *larg1) {
  gp_Cylinder *arg1 = (gp_Cylinder *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Parab *_wrap_new_gp_Parab__SWIG_0 (gp_Ax2 *larg1, Standard_Real larg2) {
  gp_Parab * lresult = (gp_Parab *)0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  gp_Parab *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Parab *)new gp_Parab((gp_Ax2 const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Parab *)0;
  }
}


EXPORT gp_Parab *_wrap_new_gp_Parab__SWIG_1 (gp_Ax1 *larg1, gp_Pnt *larg2) {
  gp_Parab * lresult = (gp_Parab *)0 ;
  gp_Ax1 *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Parab *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Parab *)new gp_Parab((gp_Ax1 const &)*arg1,(gp_Pnt const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Parab *)0;
  }
}


EXPORT void _wrap_delete_gp_Parab (gp_Parab *larg1) {
  gp_Parab *arg1 = (gp_Parab *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Hypr *_wrap_new_gp_Hypr (gp_Ax2 *larg1, Standard_Real larg2, Standard_Real larg3) {
  gp_Hypr * lresult = (gp_Hypr *)0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Hypr *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (gp_Hypr *)new gp_Hypr((gp_Ax2 const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Hypr *)0;
  }
}


EXPORT void _wrap_delete_gp_Hypr (gp_Hypr *larg1) {
  gp_Hypr *arg1 = (gp_Hypr *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Torus *_wrap_new_gp_Torus (gp_Ax3 *larg1, Standard_Real *larg2, Standard_Real *larg3) {
  gp_Torus * lresult = (gp_Torus *)0 ;
  gp_Ax3 *arg1 = 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  gp_Torus *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (gp_Torus *)new gp_Torus((gp_Ax3 const &)*arg1,*arg2,*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Torus *)0;
  }
}


EXPORT void _wrap_delete_gp_Torus (gp_Torus *larg1) {
  gp_Torus *arg1 = (gp_Torus *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Sphere *_wrap_new_gp_Sphere (gp_Ax3 *larg1, Standard_Real *larg2) {
  gp_Sphere * lresult = (gp_Sphere *)0 ;
  gp_Ax3 *arg1 = 0 ;
  Standard_Real *arg2 = 0 ;
  gp_Sphere *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Sphere *)new gp_Sphere((gp_Ax3 const &)*arg1,*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Sphere *)0;
  }
}


EXPORT void _wrap_delete_gp_Sphere (gp_Sphere *larg1) {
  gp_Sphere *arg1 = (gp_Sphere *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_XYZ *_wrap_new_gp_XYZ__SWIG_0 () {
  gp_XYZ * lresult = (gp_XYZ *)0 ;
  gp_XYZ *result = 0 ;
  
  try {
    result = (gp_XYZ *)new gp_XYZ();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_XYZ *)0;
  }
}


EXPORT gp_XYZ *_wrap_new_gp_XYZ__SWIG_1 (Standard_Real larg1, Standard_Real larg2, Standard_Real larg3) {
  gp_XYZ * lresult = (gp_XYZ *)0 ;
  Standard_Real arg1 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_XYZ *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (gp_XYZ *)new gp_XYZ(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_XYZ *)0;
  }
}


EXPORT void _wrap_delete_gp_XYZ (gp_XYZ *larg1) {
  gp_XYZ *arg1 = (gp_XYZ *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_XY *_wrap_new_gp_XY__SWIG_0 () {
  gp_XY * lresult = (gp_XY *)0 ;
  gp_XY *result = 0 ;
  
  try {
    result = (gp_XY *)new gp_XY();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_XY *)0;
  }
}


EXPORT gp_XY *_wrap_new_gp_XY__SWIG_1 (Standard_Real larg1, Standard_Real larg2) {
  gp_XY * lresult = (gp_XY *)0 ;
  Standard_Real arg1 ;
  Standard_Real arg2 ;
  gp_XY *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_XY *)new gp_XY(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_XY *)0;
  }
}


EXPORT void _wrap_delete_gp_XY (gp_XY *larg1) {
  gp_XY *arg1 = (gp_XY *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT gp_Lin2d *_wrap_new_gp_Lin2d__SWIG_0 () {
  gp_Lin2d * lresult = (gp_Lin2d *)0 ;
  gp_Lin2d *result = 0 ;
  
  try {
    result = (gp_Lin2d *)new gp_Lin2d();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Lin2d *)0;
  }
}


EXPORT gp_Lin2d *_wrap_new_gp_Lin2d__SWIG_1 (gp_Ax2d *larg1) {
  gp_Lin2d * lresult = (gp_Lin2d *)0 ;
  gp_Ax2d *arg1 = 0 ;
  gp_Lin2d *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Lin2d *)new gp_Lin2d((gp_Ax2d const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Lin2d *)0;
  }
}


EXPORT gp_Lin2d *_wrap_new_gp_Lin2d__SWIG_2 (gp_Pnt2d *larg1, gp_Dir2d *larg2) {
  gp_Lin2d * lresult = (gp_Lin2d *)0 ;
  gp_Pnt2d *arg1 = 0 ;
  gp_Dir2d *arg2 = 0 ;
  gp_Lin2d *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (gp_Lin2d *)new gp_Lin2d((gp_Pnt2d const &)*arg1,(gp_Dir2d const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Lin2d *)0;
  }
}


EXPORT gp_Lin2d *_wrap_new_gp_Lin2d__SWIG_3 (Standard_Real larg1, Standard_Real larg2, Standard_Real larg3) {
  gp_Lin2d * lresult = (gp_Lin2d *)0 ;
  Standard_Real arg1 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Lin2d *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (gp_Lin2d *)new gp_Lin2d(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Lin2d *)0;
  }
}


EXPORT void _wrap_delete_gp_Lin2d (gp_Lin2d *larg1) {
  gp_Lin2d *arg1 = (gp_Lin2d *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <TColStd_HArray1OfBoolean.hxx>


#include <TColgp_HArray1OfPnt.hxx>

EXPORT TColgp_HArray1OfPnt *_wrap_new_TColgp_HArray1OfPnt (Standard_Integer larg1, Standard_Integer larg2) {
  TColgp_HArray1OfPnt * lresult = (TColgp_HArray1OfPnt *)0 ;
  Standard_Integer arg1 ;
  Standard_Integer arg2 ;
  TColgp_HArray1OfPnt *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TColgp_HArray1OfPnt *)new TColgp_HArray1OfPnt(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TColgp_HArray1OfPnt *)0;
  }
}


EXPORT void _wrap_TColgp_HArray1OfPnt_SetValue (TColgp_HArray1OfPnt *larg1, Standard_Integer larg2, gp_Pnt *larg3) {
  TColgp_HArray1OfPnt *arg1 = (TColgp_HArray1OfPnt *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->SetValue(arg2,(gp_Pnt const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TColgp_HArray1OfPnt (TColgp_HArray1OfPnt *larg1) {
  TColgp_HArray1OfPnt *arg1 = (TColgp_HArray1OfPnt *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Handle_TColgp_HArray1OfPnt (Handle_TColgp_HArray1OfPnt *larg1) {
  Handle_TColgp_HArray1OfPnt *arg1 = (Handle_TColgp_HArray1OfPnt *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Handle_TColStd_HArray1OfBoolean (Handle_TColStd_HArray1OfBoolean *larg1) {
  Handle_TColStd_HArray1OfBoolean *arg1 = (Handle_TColStd_HArray1OfBoolean *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <TColgp_Array1OfVec.hxx>
  
EXPORT TColgp_Array1OfVec *_wrap_new_TColgp_Array1OfVec (Standard_Integer larg1, Standard_Integer larg2) {
  TColgp_Array1OfVec * lresult = (TColgp_Array1OfVec *)0 ;
  Standard_Integer arg1 ;
  Standard_Integer arg2 ;
  TColgp_Array1OfVec *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TColgp_Array1OfVec *)new TColgp_Array1OfVec(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TColgp_Array1OfVec *)0;
  }
}


EXPORT void _wrap_TColgp_Array1OfVec_SetValue (TColgp_Array1OfVec *larg1, Standard_Integer larg2, gp_Vec *larg3) {
  TColgp_Array1OfVec *arg1 = (TColgp_Array1OfVec *) 0 ;
  Standard_Integer arg2 ;
  gp_Vec *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->SetValue(arg2,(gp_Vec const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TColgp_Array1OfVec (TColgp_Array1OfVec *larg1) {
  TColgp_Array1OfVec *arg1 = (TColgp_Array1OfVec *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <TColgp_Array1OfPnt2d.hxx>
  
EXPORT TColgp_Array1OfPnt2d *_wrap_new_TColgp_Array1OfPnt2d (Standard_Integer larg1, Standard_Integer larg2) {
  TColgp_Array1OfPnt2d * lresult = (TColgp_Array1OfPnt2d *)0 ;
  Standard_Integer arg1 ;
  Standard_Integer arg2 ;
  TColgp_Array1OfPnt2d *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TColgp_Array1OfPnt2d *)new TColgp_Array1OfPnt2d(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TColgp_Array1OfPnt2d *)0;
  }
}


EXPORT void _wrap_TColgp_Array1OfPnt2d_SetValue (TColgp_Array1OfPnt2d *larg1, Standard_Integer larg2, gp_Pnt2d *larg3) {
  TColgp_Array1OfPnt2d *arg1 = (TColgp_Array1OfPnt2d *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->SetValue(arg2,(gp_Pnt2d const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TColgp_Array1OfPnt2d (TColgp_Array1OfPnt2d *larg1) {
  TColgp_Array1OfPnt2d *arg1 = (TColgp_Array1OfPnt2d *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <TColStd_Array1OfReal.hxx>
  
EXPORT TColStd_Array1OfReal *_wrap_new_TColStd_Array1OfReal (Standard_Integer larg1, Standard_Integer larg2) {
  TColStd_Array1OfReal * lresult = (TColStd_Array1OfReal *)0 ;
  Standard_Integer arg1 ;
  Standard_Integer arg2 ;
  TColStd_Array1OfReal *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TColStd_Array1OfReal *)new TColStd_Array1OfReal(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TColStd_Array1OfReal *)0;
  }
}


EXPORT void _wrap_TColStd_Array1OfReal_SetValue (TColStd_Array1OfReal *larg1, Standard_Integer larg2, Standard_Real *larg3) {
  TColStd_Array1OfReal *arg1 = (TColStd_Array1OfReal *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->SetValue(arg2,(Standard_Real const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TColStd_Array1OfReal (TColStd_Array1OfReal *larg1) {
  TColStd_Array1OfReal *arg1 = (TColStd_Array1OfReal *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <TColStd_Array1OfInteger.hxx>
  
EXPORT TColStd_Array1OfInteger *_wrap_new_TColStd_Array1OfInteger (Standard_Integer larg1, Standard_Integer larg2) {
  TColStd_Array1OfInteger * lresult = (TColStd_Array1OfInteger *)0 ;
  Standard_Integer arg1 ;
  Standard_Integer arg2 ;
  TColStd_Array1OfInteger *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TColStd_Array1OfInteger *)new TColStd_Array1OfInteger(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TColStd_Array1OfInteger *)0;
  }
}


EXPORT void _wrap_TColStd_Array1OfInteger_SetValue (TColStd_Array1OfInteger *larg1, Standard_Integer larg2, Standard_Integer *larg3) {
  TColStd_Array1OfInteger *arg1 = (TColStd_Array1OfInteger *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->SetValue(arg2,(Standard_Integer const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TColStd_Array1OfInteger (TColStd_Array1OfInteger *larg1) {
  TColStd_Array1OfInteger *arg1 = (TColStd_Array1OfInteger *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <TColgp_Array1OfPnt.hxx>
  
EXPORT TColgp_Array1OfPnt *_wrap_new_TColgp_Array1OfPnt (Standard_Integer larg1, Standard_Integer larg2) {
  TColgp_Array1OfPnt * lresult = (TColgp_Array1OfPnt *)0 ;
  Standard_Integer arg1 ;
  Standard_Integer arg2 ;
  TColgp_Array1OfPnt *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TColgp_Array1OfPnt *)new TColgp_Array1OfPnt(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TColgp_Array1OfPnt *)0;
  }
}


EXPORT gp_Pnt const *_wrap_TColgp_Array1OfPnt_Value (TColgp_Array1OfPnt *larg1, Standard_Integer larg2) {
  gp_Pnt const * lresult = (gp_Pnt const *)0 ;
  TColgp_Array1OfPnt *arg1 = (TColgp_Array1OfPnt *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->Value(arg2);
    lresult = new gp_Pnt const(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt const *)0;
  }
}


EXPORT void _wrap_TColgp_Array1OfPnt_SetValue (TColgp_Array1OfPnt *larg1, Standard_Integer larg2, gp_Pnt *larg3) {
  TColgp_Array1OfPnt *arg1 = (TColgp_Array1OfPnt *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->SetValue(arg2,(gp_Pnt const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT Standard_Integer _wrap_TColgp_Array1OfPnt_Lower (TColgp_Array1OfPnt *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  TColgp_Array1OfPnt *arg1 = (TColgp_Array1OfPnt *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)((TColgp_Array1OfPnt const *)arg1)->Lower();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT Standard_Integer _wrap_TColgp_Array1OfPnt_Upper (TColgp_Array1OfPnt *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  TColgp_Array1OfPnt *arg1 = (TColgp_Array1OfPnt *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)((TColgp_Array1OfPnt const *)arg1)->Upper();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT void _wrap_delete_TColgp_Array1OfPnt (TColgp_Array1OfPnt *larg1) {
  TColgp_Array1OfPnt *arg1 = (TColgp_Array1OfPnt *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <TColgp_Array2OfPnt.hxx>
  
EXPORT TColgp_Array2OfPnt *_wrap_new_TColgp_Array2OfPnt (Standard_Integer larg1, Standard_Integer larg2, Standard_Integer larg3, Standard_Integer larg4) {
  TColgp_Array2OfPnt * lresult = (TColgp_Array2OfPnt *)0 ;
  Standard_Integer arg1 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  Standard_Integer arg4 ;
  TColgp_Array2OfPnt *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (TColgp_Array2OfPnt *)new TColgp_Array2OfPnt(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TColgp_Array2OfPnt *)0;
  }
}


EXPORT void _wrap_TColgp_Array2OfPnt_SetValue (TColgp_Array2OfPnt *larg1, Standard_Integer larg2, Standard_Integer larg3, gp_Pnt *larg4) {
  TColgp_Array2OfPnt *arg1 = (TColgp_Array2OfPnt *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  gp_Pnt *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->SetValue(arg2,arg3,(gp_Pnt const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TColgp_Array2OfPnt (TColgp_Array2OfPnt *larg1) {
  TColgp_Array2OfPnt *arg1 = (TColgp_Array2OfPnt *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <TColStd_Array2OfReal.hxx>
  
EXPORT TColStd_Array2OfReal *_wrap_new_TColStd_Array2OfReal (Standard_Integer larg1, Standard_Integer larg2, Standard_Integer larg3, Standard_Integer larg4) {
  TColStd_Array2OfReal * lresult = (TColStd_Array2OfReal *)0 ;
  Standard_Integer arg1 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  Standard_Integer arg4 ;
  TColStd_Array2OfReal *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (TColStd_Array2OfReal *)new TColStd_Array2OfReal(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TColStd_Array2OfReal *)0;
  }
}


EXPORT void _wrap_TColStd_Array2OfReal_SetValue (TColStd_Array2OfReal *larg1, Standard_Integer larg2, Standard_Integer larg3, Standard_Real *larg4) {
  TColStd_Array2OfReal *arg1 = (TColStd_Array2OfReal *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  Standard_Real *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->SetValue(arg2,arg3,(Standard_Real const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TColStd_Array2OfReal (TColStd_Array2OfReal *larg1) {
  TColStd_Array2OfReal *arg1 = (TColStd_Array2OfReal *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <TopAbs_ShapeEnum.hxx>
#include <TopAbs_Orientation.hxx>
  

#include <TopoDS_Shape.hxx>
#include <TopoDS_Compound.hxx>
#include <TopoDS_CompSolid.hxx>
#include <TopoDS_Solid.hxx>
#include <TopoDS_Shell.hxx>
#include <TopoDS_Face.hxx>
#include <TopoDS_Wire.hxx>
#include <TopoDS_Edge.hxx>
#include <TopoDS_Vertex.hxx>
#include <TopoDS_Iterator.hxx>
#include <TopoDS_Builder.hxx>
  
EXPORT TopAbs_ShapeEnum _wrap_TopoDS_Shape_shapeType (TopoDS_Shape *larg1) {
  TopAbs_ShapeEnum lresult = (TopAbs_ShapeEnum)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopAbs_ShapeEnum result;
  
  arg1 = larg1;
  try {
    result = (TopAbs_ShapeEnum)(arg1)->ShapeType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopAbs_ShapeEnum)0;
  }
}


EXPORT bool _wrap_TopoDS_Shape_nativeIsSame (TopoDS_Shape *larg1, TopoDS_Shape *larg2) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)((TopoDS_Shape const *)arg1)->IsSame((TopoDS_Shape const &)*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_TopoDS_Shape_IsPartner (TopoDS_Shape *larg1, TopoDS_Shape *larg2) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)((TopoDS_Shape const *)arg1)->IsPartner((TopoDS_Shape const &)*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_TopoDS_Shape_nativeIsEqual (TopoDS_Shape *larg1, TopoDS_Shape *larg2) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)((TopoDS_Shape const *)arg1)->IsEqual((TopoDS_Shape const &)*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT TopLoc_Location *_wrap_TopoDS_Shape_Location__SWIG_0 (TopoDS_Shape *larg1) {
  TopLoc_Location * lresult = (TopLoc_Location *)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopLoc_Location *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopLoc_Location *) &((TopoDS_Shape const *)arg1)->Location();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopLoc_Location *)0;
  }
}


EXPORT void _wrap_TopoDS_Shape_Location__SWIG_1 (TopoDS_Shape *larg1, TopLoc_Location *larg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopLoc_Location *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Location((TopLoc_Location const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT TopAbs_Orientation _wrap_TopoDS_Shape_orientation__SWIG_0 (TopoDS_Shape *larg1) {
  TopAbs_Orientation lresult = (TopAbs_Orientation)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopAbs_Orientation result;
  
  arg1 = larg1;
  try {
    result = (TopAbs_Orientation)((TopoDS_Shape const *)arg1)->Orientation();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopAbs_Orientation)0;
  }
}


EXPORT void _wrap_TopoDS_Shape_orientation__SWIG_1 (TopoDS_Shape *larg1, TopAbs_Orientation larg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopAbs_Orientation arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Orientation(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopoDS_Shape_reverse (TopoDS_Shape *larg1) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Reverse();
    
  } catch (...) {
    
  }
}


EXPORT TopoDS_Shape *_wrap_TopoDS_Shape_reversed (TopoDS_Shape *larg1) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape result;
  
  arg1 = larg1;
  try {
    result = ((TopoDS_Shape const *)arg1)->Reversed();
    lresult = new TopoDS_Shape(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT Standard_Integer _wrap_TopoDS_Shape_hashCode (TopoDS_Shape *larg1, Standard_Integer larg2) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Integer)((TopoDS_Shape const *)arg1)->HashCode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT bool _wrap_TopoDS_Shape_free__SWIG_0 (TopoDS_Shape *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((TopoDS_Shape const *)arg1)->Free();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_TopoDS_Shape_free__SWIG_1 (TopoDS_Shape *larg1, bool larg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->Free(arg2);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_TopoDS_Shape_Locked__SWIG_0 (TopoDS_Shape *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((TopoDS_Shape const *)arg1)->Locked();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_TopoDS_Shape_Locked__SWIG_1 (TopoDS_Shape *larg1, bool larg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->Locked(arg2);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_TopoDS_Shape_Modified__SWIG_0 (TopoDS_Shape *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((TopoDS_Shape const *)arg1)->Modified();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_TopoDS_Shape_Modified__SWIG_1 (TopoDS_Shape *larg1, bool larg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->Modified(arg2);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_TopoDS_Shape_Checked__SWIG_0 (TopoDS_Shape *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((TopoDS_Shape const *)arg1)->Checked();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_TopoDS_Shape_Checked__SWIG_1 (TopoDS_Shape *larg1, bool larg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->Checked(arg2);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_TopoDS_Shape_Orientable__SWIG_0 (TopoDS_Shape *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((TopoDS_Shape const *)arg1)->Orientable();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_TopoDS_Shape_Orientable__SWIG_1 (TopoDS_Shape *larg1, bool larg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->Orientable(arg2);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_TopoDS_Shape_Closed__SWIG_0 (TopoDS_Shape *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((TopoDS_Shape const *)arg1)->Closed();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_TopoDS_Shape_Closed__SWIG_1 (TopoDS_Shape *larg1, bool larg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->Closed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_TopoDS_Shape_Infinite__SWIG_0 (TopoDS_Shape *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((TopoDS_Shape const *)arg1)->Infinite();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_TopoDS_Shape_Infinite__SWIG_1 (TopoDS_Shape *larg1, bool larg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->Infinite(arg2);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_TopoDS_Shape_Convex__SWIG_0 (TopoDS_Shape *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((TopoDS_Shape const *)arg1)->Convex();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_TopoDS_Shape_Convex__SWIG_1 (TopoDS_Shape *larg1, bool larg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->Convex(arg2);
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_TopoDS_TShape TopoDS_Shape_getTShape(TopoDS_Shape *self){
		return (Handle_TopoDS_TShape)&*self->TShape();
	}
EXPORT Handle_TopoDS_TShape *_wrap_TopoDS_Shape_getTShape (TopoDS_Shape *larg1) {
  Handle_TopoDS_TShape * lresult = (Handle_TopoDS_TShape *)0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Handle_TopoDS_TShape result;
  
  arg1 = larg1;
  try {
    result = TopoDS_Shape_getTShape(arg1);
    lresult = new Handle_TopoDS_TShape(result);
    return lresult;
  } catch (...) {
    return (Handle_TopoDS_TShape *)0;
  }
}


EXPORT void _wrap_delete_TopoDS_Shape (TopoDS_Shape *larg1) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TopoDS_Compound (TopoDS_Compound *larg1) {
  TopoDS_Compound *arg1 = (TopoDS_Compound *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TopoDS_CompSolid (TopoDS_CompSolid *larg1) {
  TopoDS_CompSolid *arg1 = (TopoDS_CompSolid *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TopoDS_Solid (TopoDS_Solid *larg1) {
  TopoDS_Solid *arg1 = (TopoDS_Solid *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TopoDS_Shell (TopoDS_Shell *larg1) {
  TopoDS_Shell *arg1 = (TopoDS_Shell *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TopoDS_Face (TopoDS_Face *larg1) {
  TopoDS_Face *arg1 = (TopoDS_Face *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TopoDS_Wire (TopoDS_Wire *larg1) {
  TopoDS_Wire *arg1 = (TopoDS_Wire *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TopoDS_Edge (TopoDS_Edge *larg1) {
  TopoDS_Edge *arg1 = (TopoDS_Edge *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TopoDS_Vertex (TopoDS_Vertex *larg1) {
  TopoDS_Vertex *arg1 = (TopoDS_Vertex *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT TopoDS_Iterator *_wrap_new_TopoDS_Iterator__SWIG_0 () {
  TopoDS_Iterator * lresult = (TopoDS_Iterator *)0 ;
  TopoDS_Iterator *result = 0 ;
  
  try {
    result = (TopoDS_Iterator *)new TopoDS_Iterator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Iterator *)0;
  }
}


EXPORT TopoDS_Iterator *_wrap_new_TopoDS_Iterator__SWIG_1 (TopoDS_Shape *larg1, bool larg2, bool larg3) {
  TopoDS_Iterator * lresult = (TopoDS_Iterator *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 ;
  Standard_Boolean arg3 ;
  TopoDS_Iterator *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    result = (TopoDS_Iterator *)new TopoDS_Iterator((TopoDS_Shape const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Iterator *)0;
  }
}


EXPORT TopoDS_Iterator *_wrap_new_TopoDS_Iterator__SWIG_2 (TopoDS_Shape *larg1, bool larg2) {
  TopoDS_Iterator * lresult = (TopoDS_Iterator *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 ;
  TopoDS_Iterator *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (TopoDS_Iterator *)new TopoDS_Iterator((TopoDS_Shape const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Iterator *)0;
  }
}


EXPORT TopoDS_Iterator *_wrap_new_TopoDS_Iterator__SWIG_3 (TopoDS_Shape *larg1) {
  TopoDS_Iterator * lresult = (TopoDS_Iterator *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Iterator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopoDS_Iterator *)new TopoDS_Iterator((TopoDS_Shape const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Iterator *)0;
  }
}


EXPORT void _wrap_TopoDS_Iterator_initialize__SWIG_0 (TopoDS_Iterator *larg1, TopoDS_Shape *larg2, bool larg3, bool larg4) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 ;
  Standard_Boolean arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    (arg1)->Initialize((TopoDS_Shape const &)*arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopoDS_Iterator_initialize__SWIG_1 (TopoDS_Iterator *larg1, TopoDS_Shape *larg2, bool larg3) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->Initialize((TopoDS_Shape const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopoDS_Iterator_initialize__SWIG_2 (TopoDS_Iterator *larg1, TopoDS_Shape *larg2) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Initialize((TopoDS_Shape const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_TopoDS_Iterator_more (TopoDS_Iterator *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((TopoDS_Iterator const *)arg1)->More();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_TopoDS_Iterator_next (TopoDS_Iterator *larg1) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Next();
    
  } catch (...) {
    
  }
}


EXPORT TopoDS_Shape *_wrap_TopoDS_Iterator_value (TopoDS_Iterator *larg1) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopoDS_Shape *) &((TopoDS_Iterator const *)arg1)->Value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT void _wrap_delete_TopoDS_Iterator (TopoDS_Iterator *larg1) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopoDS_Builder_makeWire (TopoDS_Builder *larg1, TopoDS_Wire *larg2) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((TopoDS_Builder const *)arg1)->MakeWire(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopoDS_Builder_MakeShell (TopoDS_Builder *larg1, TopoDS_Shell *larg2) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Shell *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((TopoDS_Builder const *)arg1)->MakeShell(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopoDS_Builder_MakeSolid (TopoDS_Builder *larg1, TopoDS_Solid *larg2) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Solid *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((TopoDS_Builder const *)arg1)->MakeSolid(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopoDS_Builder_MakeCompSolid (TopoDS_Builder *larg1, TopoDS_CompSolid *larg2) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_CompSolid *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((TopoDS_Builder const *)arg1)->MakeCompSolid(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopoDS_Builder_makeCompound (TopoDS_Builder *larg1, TopoDS_Compound *larg2) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Compound *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((TopoDS_Builder const *)arg1)->MakeCompound(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopoDS_Builder_add (TopoDS_Builder *larg1, TopoDS_Shape *larg2, TopoDS_Shape *larg3) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((TopoDS_Builder const *)arg1)->Add(*arg2,(TopoDS_Shape const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopoDS_Builder_remove (TopoDS_Builder *larg1, TopoDS_Shape *larg2, TopoDS_Shape *larg3) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((TopoDS_Builder const *)arg1)->Remove(*arg2,(TopoDS_Shape const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_TopoDS_Builder (TopoDS_Builder *larg1) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <TopTools_HSequenceOfShape.hxx>

EXPORT TopTools_HSequenceOfShape *_wrap_new_TopTools_HSequenceOfShape () {
  TopTools_HSequenceOfShape * lresult = (TopTools_HSequenceOfShape *)0 ;
  TopTools_HSequenceOfShape *result = 0 ;
  
  try {
    result = (TopTools_HSequenceOfShape *)new TopTools_HSequenceOfShape();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopTools_HSequenceOfShape *)0;
  }
}


EXPORT bool _wrap_TopTools_HSequenceOfShape_IsEmpty (TopTools_HSequenceOfShape *larg1) {
  bool lresult = (bool)0 ;
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((TopTools_HSequenceOfShape const *)arg1)->IsEmpty();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT Standard_Integer _wrap_TopTools_HSequenceOfShape_Length (TopTools_HSequenceOfShape *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)((TopTools_HSequenceOfShape const *)arg1)->Length();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT void _wrap_TopTools_HSequenceOfShape_Clear (TopTools_HSequenceOfShape *larg1) {
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Clear();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopTools_HSequenceOfShape_Append (TopTools_HSequenceOfShape *larg1, TopoDS_Shape *larg2) {
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Append((TopoDS_Shape const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopTools_HSequenceOfShape_Prepend (TopTools_HSequenceOfShape *larg1, TopoDS_Shape *larg2) {
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Prepend((TopoDS_Shape const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopTools_HSequenceOfShape_Reverse (TopTools_HSequenceOfShape *larg1) {
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Reverse();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopTools_HSequenceOfShape_InsertBefore (TopTools_HSequenceOfShape *larg1, Standard_Integer larg2, TopoDS_Shape *larg3) {
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Shape *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->InsertBefore(arg2,(TopoDS_Shape const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopTools_HSequenceOfShape_InsertAfter (TopTools_HSequenceOfShape *larg1, Standard_Integer larg2, TopoDS_Shape *larg3) {
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Shape *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->InsertAfter(arg2,(TopoDS_Shape const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopTools_HSequenceOfShape_Exchange (TopTools_HSequenceOfShape *larg1, Standard_Integer larg2, Standard_Integer larg3) {
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->Exchange(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopTools_HSequenceOfShape_SetValue (TopTools_HSequenceOfShape *larg1, Standard_Integer larg2, TopoDS_Shape *larg3) {
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Shape *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->SetValue(arg2,(TopoDS_Shape const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT TopoDS_Shape *_wrap_TopTools_HSequenceOfShape_Value (TopTools_HSequenceOfShape *larg1, Standard_Integer larg2) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopoDS_Shape *) &((TopTools_HSequenceOfShape const *)arg1)->Value(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT TopoDS_Shape *_wrap_TopTools_HSequenceOfShape_ChangeValue (TopTools_HSequenceOfShape *larg1, Standard_Integer larg2) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopoDS_Shape *) &(arg1)->ChangeValue(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT void _wrap_TopTools_HSequenceOfShape_Remove__SWIG_0 (TopTools_HSequenceOfShape *larg1, Standard_Integer larg2) {
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  Standard_Integer arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Remove(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopTools_HSequenceOfShape_Remove__SWIG_1 (TopTools_HSequenceOfShape *larg1, Standard_Integer larg2, Standard_Integer larg3) {
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->Remove(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT TopTools_SequenceOfShape *_wrap_TopTools_HSequenceOfShape_Sequence (TopTools_HSequenceOfShape *larg1) {
  TopTools_SequenceOfShape * lresult = (TopTools_SequenceOfShape *)0 ;
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  TopTools_SequenceOfShape *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopTools_SequenceOfShape *) &((TopTools_HSequenceOfShape const *)arg1)->Sequence();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopTools_SequenceOfShape *)0;
  }
}


EXPORT void _wrap_delete_TopTools_HSequenceOfShape (TopTools_HSequenceOfShape *larg1) {
  TopTools_HSequenceOfShape *arg1 = (TopTools_HSequenceOfShape *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <TopTools_ListOfShape.hxx>

EXPORT TopoDS_Shape *_wrap_TopTools_ListOfShape_Append (TopTools_ListOfShape *larg1, TopoDS_Shape *larg2) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  TopTools_ListOfShape *arg1 = (TopTools_ListOfShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopoDS_Shape *) &(arg1)->Append((TopoDS_Shape const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT void _wrap_delete_TopTools_ListOfShape (TopTools_ListOfShape *larg1) {
  TopTools_ListOfShape *arg1 = (TopTools_ListOfShape *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <BRep_Tool.hxx>
#include <Geom_Curve.hxx>
#include <BRep_Builder.hxx>
#include <TopoDS_Builder.hxx>
#include <TopLoc_Location.hxx>
#include <Poly_Triangulation.hxx>

EXPORT gp_Pnt const *_wrap_BRep_Tool_pnt (TopoDS_Vertex *larg1) {
  gp_Pnt const * lresult = (gp_Pnt const *)0 ;
  TopoDS_Vertex *arg1 = 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = BRep_Tool::Pnt((TopoDS_Vertex const &)*arg1);
    lresult = new gp_Pnt const(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt const *)0;
  }
}


EXPORT gp_Pnt2d *_wrap_BRep_Tool_parameters (TopoDS_Vertex *larg1, TopoDS_Face *larg2) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  TopoDS_Vertex *arg1 = 0 ;
  TopoDS_Face *arg2 = 0 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = BRep_Tool::Parameters((TopoDS_Vertex const &)*arg1,(TopoDS_Face const &)*arg2);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


EXPORT Standard_Real _wrap_BRep_Tool_parameter (TopoDS_Vertex *larg1, TopoDS_Edge *larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  TopoDS_Vertex *arg1 = 0 ;
  TopoDS_Edge *arg2 = 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)BRep_Tool::Parameter((TopoDS_Vertex const &)*arg1,(TopoDS_Edge const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT bool _wrap_BRep_Tool_degenerated (TopoDS_Edge *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Edge *arg1 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)BRep_Tool::Degenerated((TopoDS_Edge const &)*arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_BRep_Tool_SameParameter (TopoDS_Edge *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Edge *arg1 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)BRep_Tool::SameParameter((TopoDS_Edge const &)*arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_BRep_Tool_SameRange (TopoDS_Edge *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Edge *arg1 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)BRep_Tool::SameRange((TopoDS_Edge const &)*arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_BRep_Tool_hasContinuity (TopoDS_Edge *larg1, TopoDS_Face *larg2, TopoDS_Face *larg3) {
  bool lresult = (bool)0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Face *arg2 = 0 ;
  TopoDS_Face *arg3 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Standard_Boolean)BRep_Tool::HasContinuity((TopoDS_Edge const &)*arg1,(TopoDS_Face const &)*arg2,(TopoDS_Face const &)*arg3);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT GeomAbs_Shape _wrap_BRep_Tool_continuity (TopoDS_Edge *larg1, TopoDS_Face *larg2, TopoDS_Face *larg3) {
  GeomAbs_Shape lresult = (GeomAbs_Shape)0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Face *arg2 = 0 ;
  TopoDS_Face *arg3 = 0 ;
  GeomAbs_Shape result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (GeomAbs_Shape)BRep_Tool::Continuity((TopoDS_Edge const &)*arg1,(TopoDS_Face const &)*arg2,(TopoDS_Face const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAbs_Shape)0;
  }
}


EXPORT Standard_Real _wrap_BRep_Tool_tolerance__SWIG_0 (TopoDS_Face *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  TopoDS_Face *arg1 = 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)BRep_Tool::Tolerance((TopoDS_Face const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT Standard_Real _wrap_BRep_Tool_tolerance__SWIG_1 (TopoDS_Edge *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  TopoDS_Edge *arg1 = 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)BRep_Tool::Tolerance((TopoDS_Edge const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT Standard_Real _wrap_BRep_Tool_tolerance__SWIG_2 (TopoDS_Vertex *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  TopoDS_Vertex *arg1 = 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)BRep_Tool::Tolerance((TopoDS_Vertex const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT bool _wrap_BRep_Tool_IsClosed (TopoDS_Shape *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)BRep_Tool::IsClosed((TopoDS_Shape const &)*arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Poly_Triangulation *BRep_Tool_triangulation(TopoDS_Face const &F,TopLoc_Location &L){
		Handle_Poly_Triangulation hgc=BRep_Tool::Triangulation(F,L);
		if(hgc.IsNull())
		  return NULL;
		else
		  return (Poly_Triangulation *)hgc.get();
	}
EXPORT Poly_Triangulation *_wrap_BRep_Tool_triangulation (TopoDS_Face *larg1, TopLoc_Location *larg2) {
  Poly_Triangulation * lresult = (Poly_Triangulation *)0 ;
  TopoDS_Face *arg1 = 0 ;
  TopLoc_Location *arg2 = 0 ;
  Poly_Triangulation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Poly_Triangulation *)BRep_Tool_triangulation((TopoDS_Face const &)*arg1,*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Poly_Triangulation *)0;
  }
}


SWIGINTERN void BRep_Tool_range(TopoDS_Edge const &E,double range[2]){
		BRep_Tool::Range(E, range[0], range[1]);
	}
EXPORT void _wrap_BRep_Tool_range (TopoDS_Edge *larg1, double *larg2) {
  TopoDS_Edge *arg1 = 0 ;
  double *arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    BRep_Tool_range((TopoDS_Edge const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_Curve *BRep_Tool_curve(TopoDS_Edge const &E,Standard_Real &First,Standard_Real &Last){
		Handle_Geom_Curve * hgc=new Handle_Geom_Curve(BRep_Tool::Curve(E, First, Last));
		if(hgc->IsNull())
			return NULL;
		else
			return hgc;
	}
EXPORT Handle_Geom_Curve *_wrap_BRep_Tool_curve (TopoDS_Edge *larg1, Standard_Real *larg2, Standard_Real *larg3) {
  Handle_Geom_Curve * lresult = (Handle_Geom_Curve *)0 ;
  TopoDS_Edge *arg1 = 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Handle_Geom_Curve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Handle_Geom_Curve *)BRep_Tool_curve((TopoDS_Edge const &)*arg1,*arg2,*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_Curve *)0;
  }
}


SWIGINTERN Handle_Geom_Surface *BRep_Tool_surface(TopoDS_Face const &F){
		Handle_Geom_Surface * hgc=new Handle_Geom_Surface(BRep_Tool::Surface(F));
		if(hgc->IsNull())
			return NULL;
		else
			return hgc;
	}
EXPORT Handle_Geom_Surface *_wrap_BRep_Tool_surface (TopoDS_Face *larg1) {
  Handle_Geom_Surface * lresult = (Handle_Geom_Surface *)0 ;
  TopoDS_Face *arg1 = 0 ;
  Handle_Geom_Surface *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Handle_Geom_Surface *)BRep_Tool_surface((TopoDS_Face const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_Surface *)0;
  }
}


SWIGINTERN Handle_Geom2d_Curve *BRep_Tool_curveOnSurface(TopoDS_Edge const &E,TopoDS_Face const &F,Standard_Real &First,Standard_Real &Last){
		Handle_Geom2d_Curve * hgc=new Handle_Geom2d_Curve(BRep_Tool::CurveOnSurface(E, F, First, Last));
		if(hgc->IsNull())
			return NULL;
		else
			return hgc;
	}
EXPORT Handle_Geom2d_Curve *_wrap_BRep_Tool_curveOnSurface (TopoDS_Edge *larg1, TopoDS_Face *larg2, Standard_Real *larg3, Standard_Real *larg4) {
  Handle_Geom2d_Curve * lresult = (Handle_Geom2d_Curve *)0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Face *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Handle_Geom2d_Curve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (Handle_Geom2d_Curve *)BRep_Tool_curveOnSurface((TopoDS_Edge const &)*arg1,(TopoDS_Face const &)*arg2,*arg3,*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_Curve *)0;
  }
}


EXPORT void _wrap_delete_BRep_Tool (BRep_Tool *larg1) {
  BRep_Tool *arg1 = (BRep_Tool *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRep_Builder *_wrap_new_BRep_Builder () {
  BRep_Builder * lresult = (BRep_Builder *)0 ;
  BRep_Builder *result = 0 ;
  
  try {
    result = (BRep_Builder *)new BRep_Builder();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRep_Builder *)0;
  }
}


EXPORT void _wrap_BRep_Builder_MakeFace__SWIG_0 (BRep_Builder *larg1, TopoDS_Face *larg2) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Face *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((BRep_Builder const *)arg1)->MakeFace(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_MakeFace__SWIG_1 (BRep_Builder *larg1, TopoDS_Face *larg2, Handle_Geom_Surface *larg3, Standard_Real larg4) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Face *arg2 = 0 ;
  Handle_Geom_Surface *arg3 = 0 ;
  Standard_Real arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ((BRep_Builder const *)arg1)->MakeFace(*arg2,(Handle_Geom_Surface const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_MakeFace__SWIG_2 (BRep_Builder *larg1, TopoDS_Face *larg2, Handle_Geom_Surface *larg3, TopLoc_Location *larg4, Standard_Real larg5) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Face *arg2 = 0 ;
  Handle_Geom_Surface *arg3 = 0 ;
  TopLoc_Location *arg4 = 0 ;
  Standard_Real arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ((BRep_Builder const *)arg1)->MakeFace(*arg2,(Handle_Geom_Surface const &)*arg3,(TopLoc_Location const &)*arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_MakeEdge__SWIG_0 (BRep_Builder *larg1, TopoDS_Edge *larg2) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((BRep_Builder const *)arg1)->MakeEdge(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_MakeEdge__SWIG_1 (BRep_Builder *larg1, TopoDS_Edge *larg2, Handle_Geom_Curve *larg3, Standard_Real larg4) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  Handle_Geom_Curve *arg3 = 0 ;
  Standard_Real arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ((BRep_Builder const *)arg1)->MakeEdge(*arg2,(Handle_Geom_Curve const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_MakeEdge__SWIG_2 (BRep_Builder *larg1, TopoDS_Edge *larg2, Handle_Geom_Curve *larg3, TopLoc_Location *larg4, Standard_Real larg5) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  Handle_Geom_Curve *arg3 = 0 ;
  TopLoc_Location *arg4 = 0 ;
  Standard_Real arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ((BRep_Builder const *)arg1)->MakeEdge(*arg2,(Handle_Geom_Curve const &)*arg3,(TopLoc_Location const &)*arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_UpdateEdge__SWIG_0 (BRep_Builder *larg1, TopoDS_Edge *larg2, Handle_Geom_Curve *larg3, Standard_Real larg4) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  Handle_Geom_Curve *arg3 = 0 ;
  Standard_Real arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ((BRep_Builder const *)arg1)->UpdateEdge((TopoDS_Edge const &)*arg2,(Handle_Geom_Curve const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_UpdateEdge__SWIG_1 (BRep_Builder *larg1, TopoDS_Edge *larg2, Handle_Geom2d_Curve *larg3, TopoDS_Face *larg4, Standard_Real larg5) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  Handle_Geom2d_Curve *arg3 = 0 ;
  TopoDS_Face *arg4 = 0 ;
  Standard_Real arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ((BRep_Builder const *)arg1)->UpdateEdge((TopoDS_Edge const &)*arg2,(Handle_Geom2d_Curve const &)*arg3,(TopoDS_Face const &)*arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_UpdateEdge__SWIG_2 (BRep_Builder *larg1, TopoDS_Edge *larg2, Handle_Geom2d_Curve *larg3, Handle_Geom2d_Curve *larg4, TopoDS_Face *larg5, Standard_Real larg6) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  Handle_Geom2d_Curve *arg3 = 0 ;
  Handle_Geom2d_Curve *arg4 = 0 ;
  TopoDS_Face *arg5 = 0 ;
  Standard_Real arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ((BRep_Builder const *)arg1)->UpdateEdge((TopoDS_Edge const &)*arg2,(Handle_Geom2d_Curve const &)*arg3,(Handle_Geom2d_Curve const &)*arg4,(TopoDS_Face const &)*arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_MakeVertex__SWIG_0 (BRep_Builder *larg1, TopoDS_Vertex *larg2) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((BRep_Builder const *)arg1)->MakeVertex(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_MakeVertex__SWIG_1 (BRep_Builder *larg1, TopoDS_Vertex *larg2, gp_Pnt *larg3, Standard_Real larg4) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  gp_Pnt *arg3 = 0 ;
  Standard_Real arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ((BRep_Builder const *)arg1)->MakeVertex(*arg2,(gp_Pnt const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_updateVertex__SWIG_0 (BRep_Builder *larg1, TopoDS_Vertex *larg2, Standard_Real larg3, Standard_Real larg4, TopoDS_Face *larg5, Standard_Real larg6) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  TopoDS_Face *arg5 = 0 ;
  Standard_Real arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ((BRep_Builder const *)arg1)->UpdateVertex((TopoDS_Vertex const &)*arg2,arg3,arg4,(TopoDS_Face const &)*arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_updateVertex__SWIG_1 (BRep_Builder *larg1, TopoDS_Vertex *larg2, Standard_Real larg3) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  Standard_Real arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((BRep_Builder const *)arg1)->UpdateVertex((TopoDS_Vertex const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRep_Builder_Degenerated (BRep_Builder *larg1, TopoDS_Edge *larg2, bool larg3) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    ((BRep_Builder const *)arg1)->Degenerated((TopoDS_Edge const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_BRep_Builder (BRep_Builder *larg1) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include "GeomLProp_SLProps.hxx"
SWIGINTERN void GeomLProp_SLProps_normal(GeomLProp_SLProps *self,double normal[3]){
		if(!self->IsNormalDefined())
		{
			normal[0]=0;
			normal[1]=0;
			normal[2]=0;
		}
		else
		{
			const gp_Dir & d=self->Normal();
			normal[0]=d.X();
			normal[1]=d.Y();
			normal[2]=d.Z();
		}
	}
EXPORT void _wrap_GeomLProp_SLProps_normal (GeomLProp_SLProps *larg1, double *larg2) {
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  double *arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    GeomLProp_SLProps_normal(arg1,arg2);
    
  } catch (...) {
    
  }
}


SWIGINTERN void GeomLProp_SLProps_normalArray(GeomLProp_SLProps *self,double *uvNodes,double *normalArray,int numNodes){
		for(int i=0;i<numNodes;i++)
		{
			self->SetParameters(uvNodes[2*i],uvNodes[2*i+1]);
			
			if(!self->IsNormalDefined())
			{
				normalArray[3*i]=0;
				normalArray[3*i+1]=0;
				normalArray[3*i+2]=0;
			}
			else
			{
				const gp_Dir & d=self->Normal();
				
				normalArray[3*i]=d.X();
				normalArray[3*i+1]=d.Y();
				normalArray[3*i+2]=d.Z();
			}
		}
	}
EXPORT void _wrap_GeomLProp_SLProps_normalArray (GeomLProp_SLProps *larg1, double *larg2, double *larg3, int larg4) {
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    GeomLProp_SLProps_normalArray(arg1,arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Real GeomLProp_SLProps_minCurvature(GeomLProp_SLProps *self){
		if (!self->IsCurvatureDefined())
			return sqrt(-1.0);
		else
			return self->MinCurvature ();
	}
EXPORT Standard_Real _wrap_GeomLProp_SLProps_minCurvature (GeomLProp_SLProps *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)GeomLProp_SLProps_minCurvature(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real GeomLProp_SLProps_maxCurvature(GeomLProp_SLProps *self){
		if (!self->IsCurvatureDefined())
			return sqrt(-1.0);
		else
			return self->MaxCurvature ();
	}
EXPORT Standard_Real _wrap_GeomLProp_SLProps_maxCurvature (GeomLProp_SLProps *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)GeomLProp_SLProps_maxCurvature(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN void GeomLProp_SLProps_curvatureDirection(GeomLProp_SLProps *self,double jmax[3],double jmin[3]){
		gp_Dir max, min;
		self->CurvatureDirections(max, min);
		jmax[0]=max.X();
		jmax[1]=max.Y();
		jmax[2]=max.Z();
		jmin[0]=min.X();
		jmin[1]=min.Y();
		jmin[2]=min.Z();
	}
EXPORT void _wrap_GeomLProp_SLProps_curvatureDirection (GeomLProp_SLProps *larg1, double *larg2, double *larg3) {
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  double *arg2 ;
  double *arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    GeomLProp_SLProps_curvatureDirection(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_GeomLProp_SLProps (GeomLProp_SLProps *larg1) {
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <BRepTools.hxx>
#include <BRepTools_ShapeSet.hxx>    

EXPORT bool _wrap_BRepTools_read__SWIG_0 (TopoDS_Shape *larg1, Standard_CString larg2, BRep_Builder *larg3) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_CString arg2 = (Standard_CString) (Standard_CString)0 ;
  BRep_Builder *arg3 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Standard_Boolean)BRepTools::Read(*arg1,(char const *)arg2,(BRep_Builder const &)*arg3);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_BRepTools_write__SWIG_0 (TopoDS_Shape *larg1, Standard_CString larg2) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_CString arg2 = (Standard_CString) (Standard_CString)0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)BRepTools::Write((TopoDS_Shape const &)*arg1,(char const *)arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_BRepTools_write__SWIG_1 (TopoDS_Shape *larg1, Standard_OStream *larg2) {
  TopoDS_Shape *arg1 = 0 ;
  Standard_OStream *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    BRepTools::Write((TopoDS_Shape const &)*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepTools_clean (TopoDS_Shape *larg1) {
  TopoDS_Shape *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    BRepTools::Clean((TopoDS_Shape const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT TopoDS_Wire *_wrap_BRepTools_getOuterWire (TopoDS_Face *larg1) {
  TopoDS_Wire * lresult = (TopoDS_Wire *)0 ;
  TopoDS_Face *arg1 = 0 ;
  TopoDS_Wire result;
  
  arg1 = larg1;
  try {
    result = BRepTools::OuterWire((TopoDS_Face const &)*arg1);
    lresult = new TopoDS_Wire(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Wire *)0;
  }
}


SWIGINTERN Standard_Boolean BRepTools_read__SWIG_1(TopoDS_Shape &shape,Standard_IStream &input,BRep_Builder const &builder){
		BRepTools_ShapeSet SS(builder);
		SS.Read(input);
		if(!SS.NbShapes()) return Standard_False;
		SS.Read(shape,input);
		return Standard_True;
	}
EXPORT bool _wrap_BRepTools_read__SWIG_1 (TopoDS_Shape *larg1, Standard_IStream *larg2, BRep_Builder *larg3) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_IStream *arg2 = 0 ;
  BRep_Builder *arg3 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Standard_Boolean)BRepTools_read__SWIG_1(*arg1,*arg2,(BRep_Builder const &)*arg3);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_BRepTools (BRepTools *larg1) {
  BRepTools *arg1 = (BRepTools *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <BRepTools_WireExplorer.hxx>
  
EXPORT BRepTools_WireExplorer *_wrap_new_BRepTools_WireExplorer__SWIG_0 () {
  BRepTools_WireExplorer * lresult = (BRepTools_WireExplorer *)0 ;
  BRepTools_WireExplorer *result = 0 ;
  
  try {
    result = (BRepTools_WireExplorer *)new BRepTools_WireExplorer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepTools_WireExplorer *)0;
  }
}


EXPORT BRepTools_WireExplorer *_wrap_new_BRepTools_WireExplorer__SWIG_1 (TopoDS_Wire *larg1) {
  BRepTools_WireExplorer * lresult = (BRepTools_WireExplorer *)0 ;
  TopoDS_Wire *arg1 = 0 ;
  BRepTools_WireExplorer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepTools_WireExplorer *)new BRepTools_WireExplorer((TopoDS_Wire const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepTools_WireExplorer *)0;
  }
}


EXPORT BRepTools_WireExplorer *_wrap_new_BRepTools_WireExplorer__SWIG_2 (TopoDS_Wire *larg1, TopoDS_Face *larg2) {
  BRepTools_WireExplorer * lresult = (BRepTools_WireExplorer *)0 ;
  TopoDS_Wire *arg1 = 0 ;
  TopoDS_Face *arg2 = 0 ;
  BRepTools_WireExplorer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepTools_WireExplorer *)new BRepTools_WireExplorer((TopoDS_Wire const &)*arg1,(TopoDS_Face const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepTools_WireExplorer *)0;
  }
}


EXPORT void _wrap_BRepTools_WireExplorer_init__SWIG_0 (BRepTools_WireExplorer *larg1, TopoDS_Wire *larg2) {
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Init((TopoDS_Wire const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepTools_WireExplorer_init__SWIG_1 (BRepTools_WireExplorer *larg1, TopoDS_Wire *larg2, TopoDS_Face *larg3) {
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  TopoDS_Face *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->Init((TopoDS_Wire const &)*arg2,(TopoDS_Face const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_BRepTools_WireExplorer_more (BRepTools_WireExplorer *larg1) {
  bool lresult = (bool)0 ;
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepTools_WireExplorer const *)arg1)->More();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_BRepTools_WireExplorer_next (BRepTools_WireExplorer *larg1) {
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Next();
    
  } catch (...) {
    
  }
}


EXPORT TopoDS_Edge *_wrap_BRepTools_WireExplorer_current (BRepTools_WireExplorer *larg1) {
  TopoDS_Edge * lresult = (TopoDS_Edge *)0 ;
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  TopoDS_Edge *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopoDS_Edge *) &((BRepTools_WireExplorer const *)arg1)->Current();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Edge *)0;
  }
}


EXPORT TopAbs_Orientation _wrap_BRepTools_WireExplorer_orientation (BRepTools_WireExplorer *larg1) {
  TopAbs_Orientation lresult = (TopAbs_Orientation)0 ;
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  TopAbs_Orientation result;
  
  arg1 = larg1;
  try {
    result = (TopAbs_Orientation)((BRepTools_WireExplorer const *)arg1)->Orientation();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopAbs_Orientation)0;
  }
}


EXPORT TopoDS_Vertex *_wrap_BRepTools_WireExplorer_currentVertex (BRepTools_WireExplorer *larg1) {
  TopoDS_Vertex * lresult = (TopoDS_Vertex *)0 ;
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  TopoDS_Vertex *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopoDS_Vertex *) &((BRepTools_WireExplorer const *)arg1)->CurrentVertex();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Vertex *)0;
  }
}


EXPORT void _wrap_BRepTools_WireExplorer_clear (BRepTools_WireExplorer *larg1) {
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Clear();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_BRepTools_WireExplorer (BRepTools_WireExplorer *larg1) {
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <BRepTools_Quilt.hxx>
  
EXPORT BRepTools_Quilt *_wrap_new_BRepTools_Quilt () {
  BRepTools_Quilt * lresult = (BRepTools_Quilt *)0 ;
  BRepTools_Quilt *result = 0 ;
  
  try {
    result = (BRepTools_Quilt *)new BRepTools_Quilt();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepTools_Quilt *)0;
  }
}


EXPORT void _wrap_BRepTools_Quilt_bind__SWIG_0 (BRepTools_Quilt *larg1, TopoDS_Edge *larg2, TopoDS_Edge *larg3) {
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Edge *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->Bind((TopoDS_Edge const &)*arg2,(TopoDS_Edge const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepTools_Quilt_bind__SWIG_1 (BRepTools_Quilt *larg1, TopoDS_Vertex *larg2, TopoDS_Vertex *larg3) {
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->Bind((TopoDS_Vertex const &)*arg2,(TopoDS_Vertex const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepTools_Quilt_add (BRepTools_Quilt *larg1, TopoDS_Shape *larg2) {
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Add((TopoDS_Shape const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_BRepTools_Quilt_isCopied (BRepTools_Quilt *larg1, TopoDS_Shape *larg2) {
  bool lresult = (bool)0 ;
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)((BRepTools_Quilt const *)arg1)->IsCopied((TopoDS_Shape const &)*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT TopoDS_Shape *_wrap_BRepTools_Quilt_copy (BRepTools_Quilt *larg1, TopoDS_Shape *larg2) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopoDS_Shape *) &((BRepTools_Quilt const *)arg1)->Copy((TopoDS_Shape const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT TopoDS_Shape *_wrap_BRepTools_Quilt_shells (BRepTools_Quilt *larg1) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  TopoDS_Shape result;
  
  arg1 = larg1;
  try {
    result = ((BRepTools_Quilt const *)arg1)->Shells();
    lresult = new TopoDS_Shape(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT void _wrap_delete_BRepTools_Quilt (BRepTools_Quilt *larg1) {
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <BRepBuilderAPI_Transform.hxx>
#include <BRepBuilderAPI_ModifyShape.hxx>
#include <BRepBuilderAPI_MakeShape.hxx>
#include <BRepBuilderAPI_MakeShell.hxx>
#include <BRepBuilderAPI_MakeWire.hxx>
#include <BRepBuilderAPI_MakeVertex.hxx>
#include <BRepBuilderAPI_MakeEdge.hxx>
#include <BRepBuilderAPI_MakeFace.hxx>
#include <BRepBuilderAPI_MakeSolid.hxx>
#include <BRepBuilderAPI_NurbsConvert.hxx>
#include <Standard_Version.hxx>
#if OCC_VERSION_MAJOR >= 6
#include <BRepBuilderAPI_Sewing.hxx>
#else
#include <BRepAlgo_Sewing.hxx>
#define BRepBuilderAPI_Sewing BRepAlgo_Sewing
#endif

EXPORT bool _wrap_BRepBuilderAPI_Command_isDone (BRepBuilderAPI_Command *larg1) {
  bool lresult = (bool)0 ;
  BRepBuilderAPI_Command *arg1 = (BRepBuilderAPI_Command *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepBuilderAPI_Command const *)arg1)->IsDone();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_BRepBuilderAPI_Command (BRepBuilderAPI_Command *larg1) {
  BRepBuilderAPI_Command *arg1 = (BRepBuilderAPI_Command *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepBuilderAPI_MakeShape_build (BRepBuilderAPI_MakeShape *larg1) {
  BRepBuilderAPI_MakeShape *arg1 = (BRepBuilderAPI_MakeShape *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Build();
    
  } catch (...) {
    
  }
}


EXPORT TopoDS_Shape *_wrap_BRepBuilderAPI_MakeShape_shape (BRepBuilderAPI_MakeShape *larg1) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  BRepBuilderAPI_MakeShape *arg1 = (BRepBuilderAPI_MakeShape *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopoDS_Shape *) &(arg1)->Shape();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT void _wrap_delete_BRepBuilderAPI_MakeShape (BRepBuilderAPI_MakeShape *larg1) {
  BRepBuilderAPI_MakeShape *arg1 = (BRepBuilderAPI_MakeShape *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT TopoDS_Shape *_wrap_BRepBuilderAPI_ModifyShape_modifiedShape (BRepBuilderAPI_ModifyShape *larg1, TopoDS_Shape *larg2) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  BRepBuilderAPI_ModifyShape *arg1 = (BRepBuilderAPI_ModifyShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((BRepBuilderAPI_ModifyShape const *)arg1)->ModifiedShape((TopoDS_Shape const &)*arg2);
    lresult = new TopoDS_Shape(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT void _wrap_delete_BRepBuilderAPI_ModifyShape (BRepBuilderAPI_ModifyShape *larg1) {
  BRepBuilderAPI_ModifyShape *arg1 = (BRepBuilderAPI_ModifyShape *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepBuilderAPI_Transform *_wrap_new_BRepBuilderAPI_Transform__SWIG_0 (gp_Trsf *larg1) {
  BRepBuilderAPI_Transform * lresult = (BRepBuilderAPI_Transform *)0 ;
  gp_Trsf *arg1 = 0 ;
  BRepBuilderAPI_Transform *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_Transform *)new BRepBuilderAPI_Transform((gp_Trsf const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_Transform *)0;
  }
}


EXPORT BRepBuilderAPI_Transform *_wrap_new_BRepBuilderAPI_Transform__SWIG_1 (TopoDS_Shape *larg1, gp_Trsf *larg2, bool larg3) {
  BRepBuilderAPI_Transform * lresult = (BRepBuilderAPI_Transform *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Trsf *arg2 = 0 ;
  Standard_Boolean arg3 ;
  BRepBuilderAPI_Transform *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (BRepBuilderAPI_Transform *)new BRepBuilderAPI_Transform((TopoDS_Shape const &)*arg1,(gp_Trsf const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_Transform *)0;
  }
}


EXPORT BRepBuilderAPI_Transform *_wrap_new_BRepBuilderAPI_Transform__SWIG_2 (TopoDS_Shape *larg1, gp_Trsf *larg2) {
  BRepBuilderAPI_Transform * lresult = (BRepBuilderAPI_Transform *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Trsf *arg2 = 0 ;
  BRepBuilderAPI_Transform *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepBuilderAPI_Transform *)new BRepBuilderAPI_Transform((TopoDS_Shape const &)*arg1,(gp_Trsf const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_Transform *)0;
  }
}


EXPORT void _wrap_BRepBuilderAPI_Transform_perform__SWIG_0 (BRepBuilderAPI_Transform *larg1, TopoDS_Shape *larg2, bool larg3) {
  BRepBuilderAPI_Transform *arg1 = (BRepBuilderAPI_Transform *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->Perform((TopoDS_Shape const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepBuilderAPI_Transform_perform__SWIG_1 (BRepBuilderAPI_Transform *larg1, TopoDS_Shape *larg2) {
  BRepBuilderAPI_Transform *arg1 = (BRepBuilderAPI_Transform *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Perform((TopoDS_Shape const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_BRepBuilderAPI_Transform (BRepBuilderAPI_Transform *larg1) {
  BRepBuilderAPI_Transform *arg1 = (BRepBuilderAPI_Transform *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepBuilderAPI_MakeVertex *_wrap_new_BRepBuilderAPI_MakeVertex (gp_Pnt *larg1) {
  BRepBuilderAPI_MakeVertex * lresult = (BRepBuilderAPI_MakeVertex *)0 ;
  gp_Pnt *arg1 = 0 ;
  BRepBuilderAPI_MakeVertex *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_MakeVertex *)new BRepBuilderAPI_MakeVertex((gp_Pnt const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeVertex *)0;
  }
}


EXPORT void _wrap_delete_BRepBuilderAPI_MakeVertex (BRepBuilderAPI_MakeVertex *larg1) {
  BRepBuilderAPI_MakeVertex *arg1 = (BRepBuilderAPI_MakeVertex *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepBuilderAPI_MakeWire *_wrap_new_BRepBuilderAPI_MakeWire__SWIG_0 () {
  BRepBuilderAPI_MakeWire * lresult = (BRepBuilderAPI_MakeWire *)0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  try {
    result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeWire *)0;
  }
}


EXPORT BRepBuilderAPI_MakeWire *_wrap_new_BRepBuilderAPI_MakeWire__SWIG_1 (TopoDS_Edge *larg1) {
  BRepBuilderAPI_MakeWire * lresult = (BRepBuilderAPI_MakeWire *)0 ;
  TopoDS_Edge *arg1 = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire((TopoDS_Edge const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeWire *)0;
  }
}


EXPORT BRepBuilderAPI_MakeWire *_wrap_new_BRepBuilderAPI_MakeWire__SWIG_2 (TopoDS_Edge *larg1, TopoDS_Edge *larg2) {
  BRepBuilderAPI_MakeWire * lresult = (BRepBuilderAPI_MakeWire *)0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Edge *arg2 = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire((TopoDS_Edge const &)*arg1,(TopoDS_Edge const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeWire *)0;
  }
}


EXPORT BRepBuilderAPI_MakeWire *_wrap_new_BRepBuilderAPI_MakeWire__SWIG_3 (TopoDS_Edge *larg1, TopoDS_Edge *larg2, TopoDS_Edge *larg3) {
  BRepBuilderAPI_MakeWire * lresult = (BRepBuilderAPI_MakeWire *)0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Edge *arg3 = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire((TopoDS_Edge const &)*arg1,(TopoDS_Edge const &)*arg2,(TopoDS_Edge const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeWire *)0;
  }
}


EXPORT BRepBuilderAPI_MakeWire *_wrap_new_BRepBuilderAPI_MakeWire__SWIG_4 (TopoDS_Edge *larg1, TopoDS_Edge *larg2, TopoDS_Edge *larg3, TopoDS_Edge *larg4) {
  BRepBuilderAPI_MakeWire * lresult = (BRepBuilderAPI_MakeWire *)0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Edge *arg3 = 0 ;
  TopoDS_Edge *arg4 = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire((TopoDS_Edge const &)*arg1,(TopoDS_Edge const &)*arg2,(TopoDS_Edge const &)*arg3,(TopoDS_Edge const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeWire *)0;
  }
}


EXPORT BRepBuilderAPI_MakeWire *_wrap_new_BRepBuilderAPI_MakeWire__SWIG_5 (TopoDS_Wire *larg1) {
  BRepBuilderAPI_MakeWire * lresult = (BRepBuilderAPI_MakeWire *)0 ;
  TopoDS_Wire *arg1 = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire((TopoDS_Wire const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeWire *)0;
  }
}


EXPORT BRepBuilderAPI_MakeWire *_wrap_new_BRepBuilderAPI_MakeWire__SWIG_6 (TopoDS_Wire *larg1, TopoDS_Edge *larg2) {
  BRepBuilderAPI_MakeWire * lresult = (BRepBuilderAPI_MakeWire *)0 ;
  TopoDS_Wire *arg1 = 0 ;
  TopoDS_Edge *arg2 = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire((TopoDS_Wire const &)*arg1,(TopoDS_Edge const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeWire *)0;
  }
}


EXPORT void _wrap_BRepBuilderAPI_MakeWire_add__SWIG_0 (BRepBuilderAPI_MakeWire *larg1, TopoDS_Edge *larg2) {
  BRepBuilderAPI_MakeWire *arg1 = (BRepBuilderAPI_MakeWire *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Add((TopoDS_Edge const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepBuilderAPI_MakeWire_add__SWIG_1 (BRepBuilderAPI_MakeWire *larg1, TopoDS_Wire *larg2) {
  BRepBuilderAPI_MakeWire *arg1 = (BRepBuilderAPI_MakeWire *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Add((TopoDS_Wire const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepBuilderAPI_MakeWire_add__SWIG_2 (BRepBuilderAPI_MakeWire *larg1, TopTools_ListOfShape *larg2) {
  BRepBuilderAPI_MakeWire *arg1 = (BRepBuilderAPI_MakeWire *) 0 ;
  TopTools_ListOfShape *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Add((TopTools_ListOfShape const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_BRepBuilderAPI_MakeWire_isDone (BRepBuilderAPI_MakeWire *larg1) {
  bool lresult = (bool)0 ;
  BRepBuilderAPI_MakeWire *arg1 = (BRepBuilderAPI_MakeWire *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepBuilderAPI_MakeWire const *)arg1)->IsDone();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT BRepBuilderAPI_WireError _wrap_BRepBuilderAPI_MakeWire_Error (BRepBuilderAPI_MakeWire *larg1) {
  BRepBuilderAPI_WireError lresult = (BRepBuilderAPI_WireError)0 ;
  BRepBuilderAPI_MakeWire *arg1 = (BRepBuilderAPI_MakeWire *) 0 ;
  BRepBuilderAPI_WireError result;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_WireError)((BRepBuilderAPI_MakeWire const *)arg1)->Error();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_WireError)0;
  }
}


EXPORT void _wrap_delete_BRepBuilderAPI_MakeWire (BRepBuilderAPI_MakeWire *larg1) {
  BRepBuilderAPI_MakeWire *arg1 = (BRepBuilderAPI_MakeWire *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepBuilderAPI_MakeShell *_wrap_new_BRepBuilderAPI_MakeShell () {
  BRepBuilderAPI_MakeShell * lresult = (BRepBuilderAPI_MakeShell *)0 ;
  BRepBuilderAPI_MakeShell *result = 0 ;
  
  try {
    result = (BRepBuilderAPI_MakeShell *)new BRepBuilderAPI_MakeShell();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeShell *)0;
  }
}


EXPORT bool _wrap_BRepBuilderAPI_MakeShell_isDone (BRepBuilderAPI_MakeShell *larg1) {
  bool lresult = (bool)0 ;
  BRepBuilderAPI_MakeShell *arg1 = (BRepBuilderAPI_MakeShell *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepBuilderAPI_MakeShell const *)arg1)->IsDone();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT BRepBuilderAPI_ShellError _wrap_BRepBuilderAPI_MakeShell_Error (BRepBuilderAPI_MakeShell *larg1) {
  BRepBuilderAPI_ShellError lresult = (BRepBuilderAPI_ShellError)0 ;
  BRepBuilderAPI_MakeShell *arg1 = (BRepBuilderAPI_MakeShell *) 0 ;
  BRepBuilderAPI_ShellError result;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_ShellError)((BRepBuilderAPI_MakeShell const *)arg1)->Error();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_ShellError)0;
  }
}


EXPORT void _wrap_delete_BRepBuilderAPI_MakeShell (BRepBuilderAPI_MakeShell *larg1) {
  BRepBuilderAPI_MakeShell *arg1 = (BRepBuilderAPI_MakeShell *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_0 () {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_1 (Handle_Geom_Curve *larg1) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((Handle_Geom_Curve const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_2 (TopoDS_Vertex *larg1, TopoDS_Vertex *larg2) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  TopoDS_Vertex *arg1 = 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((TopoDS_Vertex const &)*arg1,(TopoDS_Vertex const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_3 (gp_Pnt *larg1, gp_Pnt *larg2) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  gp_Pnt *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Pnt const &)*arg1,(gp_Pnt const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_4 (gp_Circ *larg1) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  gp_Circ *arg1 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Circ const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_5 (gp_Circ *larg1, Standard_Real larg2, Standard_Real larg3) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  gp_Circ *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Circ const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_6 (gp_Circ *larg1, gp_Pnt *larg2, gp_Pnt *larg3) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  gp_Circ *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Pnt *arg3 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Circ const &)*arg1,(gp_Pnt const &)*arg2,(gp_Pnt const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_7 (gp_Circ *larg1, TopoDS_Vertex *larg2, TopoDS_Vertex *larg3) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  gp_Circ *arg1 = 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Circ const &)*arg1,(TopoDS_Vertex const &)*arg2,(TopoDS_Vertex const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_8 (gp_Parab *larg1) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  gp_Parab *arg1 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Parab const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_9 (gp_Parab *larg1, Standard_Real larg2, Standard_Real larg3) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  gp_Parab *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Parab const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_10 (gp_Parab *larg1, gp_Pnt *larg2, gp_Pnt *larg3) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  gp_Parab *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Pnt *arg3 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Parab const &)*arg1,(gp_Pnt const &)*arg2,(gp_Pnt const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_11 (gp_Parab *larg1, TopoDS_Vertex *larg2, TopoDS_Vertex *larg3) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  gp_Parab *arg1 = 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Parab const &)*arg1,(TopoDS_Vertex const &)*arg2,(TopoDS_Vertex const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_12 (Handle_Geom_Curve *larg1, TopoDS_Vertex *larg2, TopoDS_Vertex *larg3) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((Handle_Geom_Curve const &)*arg1,(TopoDS_Vertex const &)*arg2,(TopoDS_Vertex const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_13 (Handle_Geom_Curve *larg1, TopoDS_Vertex *larg2, TopoDS_Vertex *larg3, Standard_Real larg4, Standard_Real larg5) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((Handle_Geom_Curve const &)*arg1,(TopoDS_Vertex const &)*arg2,(TopoDS_Vertex const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_14 (Handle_Geom_Curve *larg1, Standard_Real larg2, Standard_Real larg3) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((Handle_Geom_Curve const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT BRepBuilderAPI_MakeEdge *_wrap_new_BRepBuilderAPI_MakeEdge__SWIG_15 (Handle_Geom2d_Curve *larg1, Handle_Geom_Surface *larg2, Standard_Real larg3, Standard_Real larg4) {
  BRepBuilderAPI_MakeEdge * lresult = (BRepBuilderAPI_MakeEdge *)0 ;
  Handle_Geom2d_Curve *arg1 = 0 ;
  Handle_Geom_Surface *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((Handle_Geom2d_Curve const &)*arg1,(Handle_Geom_Surface const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeEdge *)0;
  }
}


EXPORT bool _wrap_BRepBuilderAPI_MakeEdge_isDone (BRepBuilderAPI_MakeEdge *larg1) {
  bool lresult = (bool)0 ;
  BRepBuilderAPI_MakeEdge *arg1 = (BRepBuilderAPI_MakeEdge *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepBuilderAPI_MakeEdge const *)arg1)->IsDone();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT BRepBuilderAPI_EdgeError _wrap_BRepBuilderAPI_MakeEdge_Error (BRepBuilderAPI_MakeEdge *larg1) {
  BRepBuilderAPI_EdgeError lresult = (BRepBuilderAPI_EdgeError)0 ;
  BRepBuilderAPI_MakeEdge *arg1 = (BRepBuilderAPI_MakeEdge *) 0 ;
  BRepBuilderAPI_EdgeError result;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_EdgeError)((BRepBuilderAPI_MakeEdge const *)arg1)->Error();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_EdgeError)0;
  }
}


EXPORT void _wrap_delete_BRepBuilderAPI_MakeEdge (BRepBuilderAPI_MakeEdge *larg1) {
  BRepBuilderAPI_MakeEdge *arg1 = (BRepBuilderAPI_MakeEdge *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepBuilderAPI_MakeFace *_wrap_new_BRepBuilderAPI_MakeFace__SWIG_0 (TopoDS_Wire *larg1, bool larg2) {
  BRepBuilderAPI_MakeFace * lresult = (BRepBuilderAPI_MakeFace *)0 ;
  TopoDS_Wire *arg1 = 0 ;
  Standard_Boolean arg2 ;
  BRepBuilderAPI_MakeFace *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (BRepBuilderAPI_MakeFace *)new BRepBuilderAPI_MakeFace((TopoDS_Wire const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeFace *)0;
  }
}


EXPORT BRepBuilderAPI_MakeFace *_wrap_new_BRepBuilderAPI_MakeFace__SWIG_1 (TopoDS_Wire *larg1) {
  BRepBuilderAPI_MakeFace * lresult = (BRepBuilderAPI_MakeFace *)0 ;
  TopoDS_Wire *arg1 = 0 ;
  BRepBuilderAPI_MakeFace *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_MakeFace *)new BRepBuilderAPI_MakeFace((TopoDS_Wire const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeFace *)0;
  }
}


EXPORT BRepBuilderAPI_MakeFace *_wrap_new_BRepBuilderAPI_MakeFace__SWIG_2 (TopoDS_Face *larg1, TopoDS_Wire *larg2) {
  BRepBuilderAPI_MakeFace * lresult = (BRepBuilderAPI_MakeFace *)0 ;
  TopoDS_Face *arg1 = 0 ;
  TopoDS_Wire *arg2 = 0 ;
  BRepBuilderAPI_MakeFace *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepBuilderAPI_MakeFace *)new BRepBuilderAPI_MakeFace((TopoDS_Face const &)*arg1,(TopoDS_Wire const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeFace *)0;
  }
}


EXPORT BRepBuilderAPI_MakeFace *_wrap_new_BRepBuilderAPI_MakeFace__SWIG_3 (Handle_Geom_Surface *larg1, TopoDS_Wire *larg2, bool larg3) {
  BRepBuilderAPI_MakeFace * lresult = (BRepBuilderAPI_MakeFace *)0 ;
  Handle_Geom_Surface *arg1 = 0 ;
  TopoDS_Wire *arg2 = 0 ;
  Standard_Boolean arg3 ;
  BRepBuilderAPI_MakeFace *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (BRepBuilderAPI_MakeFace *)new BRepBuilderAPI_MakeFace((Handle_Geom_Surface const &)*arg1,(TopoDS_Wire const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeFace *)0;
  }
}


EXPORT BRepBuilderAPI_MakeFace *_wrap_new_BRepBuilderAPI_MakeFace__SWIG_4 (Handle_Geom_Surface *larg1, TopoDS_Wire *larg2) {
  BRepBuilderAPI_MakeFace * lresult = (BRepBuilderAPI_MakeFace *)0 ;
  Handle_Geom_Surface *arg1 = 0 ;
  TopoDS_Wire *arg2 = 0 ;
  BRepBuilderAPI_MakeFace *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepBuilderAPI_MakeFace *)new BRepBuilderAPI_MakeFace((Handle_Geom_Surface const &)*arg1,(TopoDS_Wire const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeFace *)0;
  }
}


EXPORT BRepBuilderAPI_MakeFace *_wrap_new_BRepBuilderAPI_MakeFace__SWIG_5 (Handle_Geom_Surface *larg1, Standard_Real larg2, Standard_Real larg3, Standard_Real larg4, Standard_Real larg5, Standard_Real larg6) {
  BRepBuilderAPI_MakeFace * lresult = (BRepBuilderAPI_MakeFace *)0 ;
  Handle_Geom_Surface *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  Standard_Real arg6 ;
  BRepBuilderAPI_MakeFace *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (BRepBuilderAPI_MakeFace *)new BRepBuilderAPI_MakeFace((Handle_Geom_Surface const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeFace *)0;
  }
}


EXPORT bool _wrap_BRepBuilderAPI_MakeFace_isDone (BRepBuilderAPI_MakeFace *larg1) {
  bool lresult = (bool)0 ;
  BRepBuilderAPI_MakeFace *arg1 = (BRepBuilderAPI_MakeFace *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepBuilderAPI_MakeFace const *)arg1)->IsDone();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT BRepBuilderAPI_FaceError _wrap_BRepBuilderAPI_MakeFace_Error (BRepBuilderAPI_MakeFace *larg1) {
  BRepBuilderAPI_FaceError lresult = (BRepBuilderAPI_FaceError)0 ;
  BRepBuilderAPI_MakeFace *arg1 = (BRepBuilderAPI_MakeFace *) 0 ;
  BRepBuilderAPI_FaceError result;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_FaceError)((BRepBuilderAPI_MakeFace const *)arg1)->Error();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_FaceError)0;
  }
}


EXPORT void _wrap_delete_BRepBuilderAPI_MakeFace (BRepBuilderAPI_MakeFace *larg1) {
  BRepBuilderAPI_MakeFace *arg1 = (BRepBuilderAPI_MakeFace *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepBuilderAPI_MakeSolid *_wrap_new_BRepBuilderAPI_MakeSolid__SWIG_0 () {
  BRepBuilderAPI_MakeSolid * lresult = (BRepBuilderAPI_MakeSolid *)0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  try {
    result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeSolid *)0;
  }
}


EXPORT BRepBuilderAPI_MakeSolid *_wrap_new_BRepBuilderAPI_MakeSolid__SWIG_1 (TopoDS_CompSolid *larg1) {
  BRepBuilderAPI_MakeSolid * lresult = (BRepBuilderAPI_MakeSolid *)0 ;
  TopoDS_CompSolid *arg1 = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid((TopoDS_CompSolid const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeSolid *)0;
  }
}


EXPORT BRepBuilderAPI_MakeSolid *_wrap_new_BRepBuilderAPI_MakeSolid__SWIG_2 (TopoDS_Shell *larg1) {
  BRepBuilderAPI_MakeSolid * lresult = (BRepBuilderAPI_MakeSolid *)0 ;
  TopoDS_Shell *arg1 = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid((TopoDS_Shell const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeSolid *)0;
  }
}


EXPORT BRepBuilderAPI_MakeSolid *_wrap_new_BRepBuilderAPI_MakeSolid__SWIG_3 (TopoDS_Shell *larg1, TopoDS_Shell *larg2) {
  BRepBuilderAPI_MakeSolid * lresult = (BRepBuilderAPI_MakeSolid *)0 ;
  TopoDS_Shell *arg1 = 0 ;
  TopoDS_Shell *arg2 = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid((TopoDS_Shell const &)*arg1,(TopoDS_Shell const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeSolid *)0;
  }
}


EXPORT BRepBuilderAPI_MakeSolid *_wrap_new_BRepBuilderAPI_MakeSolid__SWIG_4 (TopoDS_Shell *larg1, TopoDS_Shell *larg2, TopoDS_Shell *larg3) {
  BRepBuilderAPI_MakeSolid * lresult = (BRepBuilderAPI_MakeSolid *)0 ;
  TopoDS_Shell *arg1 = 0 ;
  TopoDS_Shell *arg2 = 0 ;
  TopoDS_Shell *arg3 = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid((TopoDS_Shell const &)*arg1,(TopoDS_Shell const &)*arg2,(TopoDS_Shell const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeSolid *)0;
  }
}


EXPORT BRepBuilderAPI_MakeSolid *_wrap_new_BRepBuilderAPI_MakeSolid__SWIG_5 (TopoDS_Solid *larg1) {
  BRepBuilderAPI_MakeSolid * lresult = (BRepBuilderAPI_MakeSolid *)0 ;
  TopoDS_Solid *arg1 = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid((TopoDS_Solid const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeSolid *)0;
  }
}


EXPORT BRepBuilderAPI_MakeSolid *_wrap_new_BRepBuilderAPI_MakeSolid__SWIG_6 (TopoDS_Solid *larg1, TopoDS_Shell *larg2) {
  BRepBuilderAPI_MakeSolid * lresult = (BRepBuilderAPI_MakeSolid *)0 ;
  TopoDS_Solid *arg1 = 0 ;
  TopoDS_Shell *arg2 = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid((TopoDS_Solid const &)*arg1,(TopoDS_Shell const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_MakeSolid *)0;
  }
}


EXPORT void _wrap_BRepBuilderAPI_MakeSolid_add (BRepBuilderAPI_MakeSolid *larg1, TopoDS_Shell *larg2) {
  BRepBuilderAPI_MakeSolid *arg1 = (BRepBuilderAPI_MakeSolid *) 0 ;
  TopoDS_Shell *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Add((TopoDS_Shell const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_BRepBuilderAPI_MakeSolid_isDone (BRepBuilderAPI_MakeSolid *larg1) {
  bool lresult = (bool)0 ;
  BRepBuilderAPI_MakeSolid *arg1 = (BRepBuilderAPI_MakeSolid *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepBuilderAPI_MakeSolid const *)arg1)->IsDone();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_BRepBuilderAPI_MakeSolid_isDeleted (BRepBuilderAPI_MakeSolid *larg1, TopoDS_Shape *larg2) {
  bool lresult = (bool)0 ;
  BRepBuilderAPI_MakeSolid *arg1 = (BRepBuilderAPI_MakeSolid *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)(arg1)->IsDeleted((TopoDS_Shape const &)*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_BRepBuilderAPI_MakeSolid (BRepBuilderAPI_MakeSolid *larg1) {
  BRepBuilderAPI_MakeSolid *arg1 = (BRepBuilderAPI_MakeSolid *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepBuilderAPI_Sewing *_wrap_new_BRepBuilderAPI_Sewing__SWIG_0 (Standard_Real larg1, bool larg2, bool larg3, bool larg4) {
  BRepBuilderAPI_Sewing * lresult = (BRepBuilderAPI_Sewing *)0 ;
  Standard_Real arg1 ;
  Standard_Boolean arg2 ;
  Standard_Boolean arg3 ;
  Standard_Boolean arg4 ;
  BRepBuilderAPI_Sewing *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (BRepBuilderAPI_Sewing *)new BRepBuilderAPI_Sewing(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_Sewing *)0;
  }
}


EXPORT BRepBuilderAPI_Sewing *_wrap_new_BRepBuilderAPI_Sewing__SWIG_1 (Standard_Real larg1, bool larg2, bool larg3) {
  BRepBuilderAPI_Sewing * lresult = (BRepBuilderAPI_Sewing *)0 ;
  Standard_Real arg1 ;
  Standard_Boolean arg2 ;
  Standard_Boolean arg3 ;
  BRepBuilderAPI_Sewing *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    result = (BRepBuilderAPI_Sewing *)new BRepBuilderAPI_Sewing(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_Sewing *)0;
  }
}


EXPORT BRepBuilderAPI_Sewing *_wrap_new_BRepBuilderAPI_Sewing__SWIG_2 (Standard_Real larg1, bool larg2) {
  BRepBuilderAPI_Sewing * lresult = (BRepBuilderAPI_Sewing *)0 ;
  Standard_Real arg1 ;
  Standard_Boolean arg2 ;
  BRepBuilderAPI_Sewing *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (BRepBuilderAPI_Sewing *)new BRepBuilderAPI_Sewing(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_Sewing *)0;
  }
}


EXPORT BRepBuilderAPI_Sewing *_wrap_new_BRepBuilderAPI_Sewing__SWIG_3 (Standard_Real larg1) {
  BRepBuilderAPI_Sewing * lresult = (BRepBuilderAPI_Sewing *)0 ;
  Standard_Real arg1 ;
  BRepBuilderAPI_Sewing *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_Sewing *)new BRepBuilderAPI_Sewing(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_Sewing *)0;
  }
}


EXPORT BRepBuilderAPI_Sewing *_wrap_new_BRepBuilderAPI_Sewing__SWIG_4 () {
  BRepBuilderAPI_Sewing * lresult = (BRepBuilderAPI_Sewing *)0 ;
  BRepBuilderAPI_Sewing *result = 0 ;
  
  try {
    result = (BRepBuilderAPI_Sewing *)new BRepBuilderAPI_Sewing();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_Sewing *)0;
  }
}


EXPORT void _wrap_BRepBuilderAPI_Sewing_init__SWIG_0 (BRepBuilderAPI_Sewing *larg1, Standard_Real larg2, bool larg3, bool larg4, bool larg5) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  Standard_Boolean arg4 ;
  Standard_Boolean arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  try {
    (arg1)->Init(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepBuilderAPI_Sewing_init__SWIG_1 (BRepBuilderAPI_Sewing *larg1, Standard_Real larg2, bool larg3, bool larg4) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  Standard_Boolean arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    (arg1)->Init(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepBuilderAPI_Sewing_init__SWIG_2 (BRepBuilderAPI_Sewing *larg1, Standard_Real larg2, bool larg3) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->Init(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepBuilderAPI_Sewing_init__SWIG_3 (BRepBuilderAPI_Sewing *larg1, Standard_Real larg2) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Real arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Init(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepBuilderAPI_Sewing_load (BRepBuilderAPI_Sewing *larg1, TopoDS_Shape *larg2) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Load((TopoDS_Shape const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepBuilderAPI_Sewing_add (BRepBuilderAPI_Sewing *larg1, TopoDS_Shape *larg2) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Add((TopoDS_Shape const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepBuilderAPI_Sewing_perform (BRepBuilderAPI_Sewing *larg1) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Perform();
    
  } catch (...) {
    
  }
}


EXPORT TopoDS_Shape *_wrap_BRepBuilderAPI_Sewing_sewedShape (BRepBuilderAPI_Sewing *larg1) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopoDS_Shape *) &((BRepBuilderAPI_Sewing const *)arg1)->SewedShape();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT Standard_Integer _wrap_BRepBuilderAPI_Sewing_nbFreeEdges (BRepBuilderAPI_Sewing *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)((BRepBuilderAPI_Sewing const *)arg1)->NbFreeEdges();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT TopoDS_Edge *_wrap_BRepBuilderAPI_Sewing_freeEdge (BRepBuilderAPI_Sewing *larg1, Standard_Integer larg2) {
  TopoDS_Edge * lresult = (TopoDS_Edge *)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Edge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopoDS_Edge *) &((BRepBuilderAPI_Sewing const *)arg1)->FreeEdge(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Edge *)0;
  }
}


EXPORT Standard_Integer _wrap_BRepBuilderAPI_Sewing_nbMultipleEdges (BRepBuilderAPI_Sewing *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)((BRepBuilderAPI_Sewing const *)arg1)->NbMultipleEdges();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT TopoDS_Edge *_wrap_BRepBuilderAPI_Sewing_multipleEdge (BRepBuilderAPI_Sewing *larg1, Standard_Integer larg2) {
  TopoDS_Edge * lresult = (TopoDS_Edge *)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Edge *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopoDS_Edge *) &((BRepBuilderAPI_Sewing const *)arg1)->MultipleEdge(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Edge *)0;
  }
}


EXPORT Standard_Integer _wrap_BRepBuilderAPI_Sewing_nbDegeneratedShapes (BRepBuilderAPI_Sewing *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)((BRepBuilderAPI_Sewing const *)arg1)->NbDegeneratedShapes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT TopoDS_Shape *_wrap_BRepBuilderAPI_Sewing_degeneratedShape (BRepBuilderAPI_Sewing *larg1, Standard_Integer larg2) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopoDS_Shape *) &((BRepBuilderAPI_Sewing const *)arg1)->DegeneratedShape(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT Standard_Integer _wrap_BRepBuilderAPI_Sewing_nbDeletedFaces (BRepBuilderAPI_Sewing *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)((BRepBuilderAPI_Sewing const *)arg1)->NbDeletedFaces();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT TopoDS_Face *_wrap_BRepBuilderAPI_Sewing_deletedFace (BRepBuilderAPI_Sewing *larg1, Standard_Integer larg2) {
  TopoDS_Face * lresult = (TopoDS_Face *)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Face *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopoDS_Face *) &((BRepBuilderAPI_Sewing const *)arg1)->DeletedFace(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Face *)0;
  }
}


EXPORT bool _wrap_BRepBuilderAPI_Sewing_isDegenerated (BRepBuilderAPI_Sewing *larg1, TopoDS_Shape *larg2) {
  bool lresult = (bool)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)((BRepBuilderAPI_Sewing const *)arg1)->IsDegenerated((TopoDS_Shape const &)*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_BRepBuilderAPI_Sewing_isModified (BRepBuilderAPI_Sewing *larg1, TopoDS_Shape *larg2) {
  bool lresult = (bool)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)((BRepBuilderAPI_Sewing const *)arg1)->IsModified((TopoDS_Shape const &)*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT TopoDS_Shape *_wrap_BRepBuilderAPI_Sewing_modified (BRepBuilderAPI_Sewing *larg1, TopoDS_Shape *larg2) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopoDS_Shape *) &((BRepBuilderAPI_Sewing const *)arg1)->Modified((TopoDS_Shape const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT void _wrap_BRepBuilderAPI_Sewing_dump (BRepBuilderAPI_Sewing *larg1) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  
  arg1 = larg1;
  try {
    ((BRepBuilderAPI_Sewing const *)arg1)->Dump();
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_BRepBuilderAPI_Sewing_isModifiedSubShape (BRepBuilderAPI_Sewing *larg1, TopoDS_Shape *larg2) {
  bool lresult = (bool)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)((BRepBuilderAPI_Sewing const *)arg1)->IsModifiedSubShape((TopoDS_Shape const &)*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT TopoDS_Shape *_wrap_BRepBuilderAPI_Sewing_modifiedSubShape (BRepBuilderAPI_Sewing *larg1, TopoDS_Shape *larg2) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((BRepBuilderAPI_Sewing const *)arg1)->ModifiedSubShape((TopoDS_Shape const &)*arg2);
    lresult = new TopoDS_Shape(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT void _wrap_delete_BRepBuilderAPI_Sewing (BRepBuilderAPI_Sewing *larg1) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepBuilderAPI_NurbsConvert *_wrap_new_BRepBuilderAPI_NurbsConvert__SWIG_0 () {
  BRepBuilderAPI_NurbsConvert * lresult = (BRepBuilderAPI_NurbsConvert *)0 ;
  BRepBuilderAPI_NurbsConvert *result = 0 ;
  
  try {
    result = (BRepBuilderAPI_NurbsConvert *)new BRepBuilderAPI_NurbsConvert();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_NurbsConvert *)0;
  }
}


EXPORT BRepBuilderAPI_NurbsConvert *_wrap_new_BRepBuilderAPI_NurbsConvert__SWIG_1 (TopoDS_Shape *larg1, bool larg2) {
  BRepBuilderAPI_NurbsConvert * lresult = (BRepBuilderAPI_NurbsConvert *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 ;
  BRepBuilderAPI_NurbsConvert *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (BRepBuilderAPI_NurbsConvert *)new BRepBuilderAPI_NurbsConvert((TopoDS_Shape const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_NurbsConvert *)0;
  }
}


EXPORT BRepBuilderAPI_NurbsConvert *_wrap_new_BRepBuilderAPI_NurbsConvert__SWIG_2 (TopoDS_Shape *larg1) {
  BRepBuilderAPI_NurbsConvert * lresult = (BRepBuilderAPI_NurbsConvert *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  BRepBuilderAPI_NurbsConvert *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepBuilderAPI_NurbsConvert *)new BRepBuilderAPI_NurbsConvert((TopoDS_Shape const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepBuilderAPI_NurbsConvert *)0;
  }
}


EXPORT void _wrap_BRepBuilderAPI_NurbsConvert_perform__SWIG_0 (BRepBuilderAPI_NurbsConvert *larg1, TopoDS_Shape *larg2, bool larg3) {
  BRepBuilderAPI_NurbsConvert *arg1 = (BRepBuilderAPI_NurbsConvert *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->Perform((TopoDS_Shape const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepBuilderAPI_NurbsConvert_perform__SWIG_1 (BRepBuilderAPI_NurbsConvert *larg1, TopoDS_Shape *larg2) {
  BRepBuilderAPI_NurbsConvert *arg1 = (BRepBuilderAPI_NurbsConvert *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Perform((TopoDS_Shape const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_BRepBuilderAPI_NurbsConvert (BRepBuilderAPI_NurbsConvert *larg1) {
  BRepBuilderAPI_NurbsConvert *arg1 = (BRepBuilderAPI_NurbsConvert *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <BRepOffsetAPI_NormalProjection.hxx>

EXPORT BRepOffsetAPI_NormalProjection *_wrap_new_BRepOffsetAPI_NormalProjection__SWIG_0 () {
  BRepOffsetAPI_NormalProjection * lresult = (BRepOffsetAPI_NormalProjection *)0 ;
  BRepOffsetAPI_NormalProjection *result = 0 ;
  
  try {
    result = (BRepOffsetAPI_NormalProjection *)new BRepOffsetAPI_NormalProjection();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepOffsetAPI_NormalProjection *)0;
  }
}


EXPORT BRepOffsetAPI_NormalProjection *_wrap_new_BRepOffsetAPI_NormalProjection__SWIG_1 (TopoDS_Shape *larg1) {
  BRepOffsetAPI_NormalProjection * lresult = (BRepOffsetAPI_NormalProjection *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  BRepOffsetAPI_NormalProjection *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepOffsetAPI_NormalProjection *)new BRepOffsetAPI_NormalProjection((TopoDS_Shape const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepOffsetAPI_NormalProjection *)0;
  }
}


EXPORT void _wrap_BRepOffsetAPI_NormalProjection_init (BRepOffsetAPI_NormalProjection *larg1, TopoDS_Shape *larg2) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Init((TopoDS_Shape const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepOffsetAPI_NormalProjection_add (BRepOffsetAPI_NormalProjection *larg1, TopoDS_Shape *larg2) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Add((TopoDS_Shape const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepOffsetAPI_NormalProjection_setParams (BRepOffsetAPI_NormalProjection *larg1, Standard_Real larg2, Standard_Real larg3, GeomAbs_Shape larg4, Standard_Integer larg5, Standard_Integer larg6) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  GeomAbs_Shape arg4 ;
  Standard_Integer arg5 ;
  Standard_Integer arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->SetParams(arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepOffsetAPI_NormalProjection_setMaxDistance (BRepOffsetAPI_NormalProjection *larg1, Standard_Real larg2) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  Standard_Real arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->SetMaxDistance(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepOffsetAPI_NormalProjection_setLimit__SWIG_0 (BRepOffsetAPI_NormalProjection *larg1, bool larg2) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  Standard_Boolean arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->SetLimit(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepOffsetAPI_NormalProjection_setLimit__SWIG_1 (BRepOffsetAPI_NormalProjection *larg1) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->SetLimit();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepOffsetAPI_NormalProjection_compute3d__SWIG_0 (BRepOffsetAPI_NormalProjection *larg1, bool larg2) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  Standard_Boolean arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->Compute3d(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepOffsetAPI_NormalProjection_compute3d__SWIG_1 (BRepOffsetAPI_NormalProjection *larg1) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Compute3d();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepOffsetAPI_NormalProjection_build (BRepOffsetAPI_NormalProjection *larg1) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Build();
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_BRepOffsetAPI_NormalProjection_isDone (BRepOffsetAPI_NormalProjection *larg1) {
  bool lresult = (bool)0 ;
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepOffsetAPI_NormalProjection const *)arg1)->IsDone();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT TopoDS_Shape *_wrap_BRepOffsetAPI_NormalProjection_projection (BRepOffsetAPI_NormalProjection *larg1) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopoDS_Shape *) &((BRepOffsetAPI_NormalProjection const *)arg1)->Projection();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT TopoDS_Shape *_wrap_BRepOffsetAPI_NormalProjection_couple (BRepOffsetAPI_NormalProjection *larg1, TopoDS_Edge *larg2) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopoDS_Shape *) &((BRepOffsetAPI_NormalProjection const *)arg1)->Couple((TopoDS_Edge const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT TopTools_ListOfShape *_wrap_BRepOffsetAPI_NormalProjection_generated (BRepOffsetAPI_NormalProjection *larg1, TopoDS_Shape *larg2) {
  TopTools_ListOfShape * lresult = (TopTools_ListOfShape *)0 ;
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopTools_ListOfShape *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopTools_ListOfShape *) &(arg1)->Generated((TopoDS_Shape const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopTools_ListOfShape *)0;
  }
}


EXPORT TopoDS_Shape *_wrap_BRepOffsetAPI_NormalProjection_ancestor (BRepOffsetAPI_NormalProjection *larg1, TopoDS_Edge *larg2) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopoDS_Shape *) &((BRepOffsetAPI_NormalProjection const *)arg1)->Ancestor((TopoDS_Edge const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT bool _wrap_BRepOffsetAPI_NormalProjection_buildWire (BRepOffsetAPI_NormalProjection *larg1, TopTools_ListOfShape *larg2) {
  bool lresult = (bool)0 ;
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopTools_ListOfShape *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)((BRepOffsetAPI_NormalProjection const *)arg1)->BuildWire(*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_BRepOffsetAPI_NormalProjection (BRepOffsetAPI_NormalProjection *larg1) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <BRepPrimAPI_MakeBox.hxx>
#include <BRepPrimAPI_MakeCone.hxx>
#include <BRepPrimAPI_MakeBox.hxx>
#include <BRepPrimAPI_MakeTorus.hxx>
#include <BRepPrimAPI_MakeCylinder.hxx>
#include <BRepPrimAPI_MakeSphere.hxx>
#include <BRepPrimAPI_MakePrism.hxx>
#include <BRepPrimAPI_MakeRevol.hxx>
#include <BRepOffsetAPI_MakePipe.hxx>

EXPORT BRepPrimAPI_MakeBox *_wrap_new_BRepPrimAPI_MakeBox (gp_Pnt *larg1, gp_Pnt *larg2) {
  BRepPrimAPI_MakeBox * lresult = (BRepPrimAPI_MakeBox *)0 ;
  gp_Pnt *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  BRepPrimAPI_MakeBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepPrimAPI_MakeBox *)new BRepPrimAPI_MakeBox((gp_Pnt const &)*arg1,(gp_Pnt const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakeBox *)0;
  }
}


EXPORT void _wrap_delete_BRepPrimAPI_MakeBox (BRepPrimAPI_MakeBox *larg1) {
  BRepPrimAPI_MakeBox *arg1 = (BRepPrimAPI_MakeBox *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepPrimAPI_MakeCone *_wrap_new_BRepPrimAPI_MakeCone (gp_Ax2 *larg1, Standard_Real larg2, Standard_Real larg3, Standard_Real larg4, Standard_Real larg5) {
  BRepPrimAPI_MakeCone * lresult = (BRepPrimAPI_MakeCone *)0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  BRepPrimAPI_MakeCone *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (BRepPrimAPI_MakeCone *)new BRepPrimAPI_MakeCone((gp_Ax2 const &)*arg1,arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakeCone *)0;
  }
}


EXPORT void _wrap_delete_BRepPrimAPI_MakeCone (BRepPrimAPI_MakeCone *larg1) {
  BRepPrimAPI_MakeCone *arg1 = (BRepPrimAPI_MakeCone *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepPrimAPI_MakeCylinder *_wrap_new_BRepPrimAPI_MakeCylinder (gp_Ax2 *larg1, Standard_Real larg2, Standard_Real larg3, Standard_Real larg4) {
  BRepPrimAPI_MakeCylinder * lresult = (BRepPrimAPI_MakeCylinder *)0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  BRepPrimAPI_MakeCylinder *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (BRepPrimAPI_MakeCylinder *)new BRepPrimAPI_MakeCylinder((gp_Ax2 const &)*arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakeCylinder *)0;
  }
}


EXPORT void _wrap_delete_BRepPrimAPI_MakeCylinder (BRepPrimAPI_MakeCylinder *larg1) {
  BRepPrimAPI_MakeCylinder *arg1 = (BRepPrimAPI_MakeCylinder *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepPrimAPI_MakeTorus *_wrap_new_BRepPrimAPI_MakeTorus__SWIG_0 (gp_Ax2 *larg1, Standard_Real larg2, Standard_Real larg3) {
  BRepPrimAPI_MakeTorus * lresult = (BRepPrimAPI_MakeTorus *)0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  BRepPrimAPI_MakeTorus *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (BRepPrimAPI_MakeTorus *)new BRepPrimAPI_MakeTorus((gp_Ax2 const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakeTorus *)0;
  }
}


EXPORT BRepPrimAPI_MakeTorus *_wrap_new_BRepPrimAPI_MakeTorus__SWIG_1 (gp_Ax2 *larg1, Standard_Real larg2, Standard_Real larg3, Standard_Real larg4, Standard_Real larg5, Standard_Real larg6) {
  BRepPrimAPI_MakeTorus * lresult = (BRepPrimAPI_MakeTorus *)0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  Standard_Real arg6 ;
  BRepPrimAPI_MakeTorus *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (BRepPrimAPI_MakeTorus *)new BRepPrimAPI_MakeTorus((gp_Ax2 const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakeTorus *)0;
  }
}


EXPORT void _wrap_delete_BRepPrimAPI_MakeTorus (BRepPrimAPI_MakeTorus *larg1) {
  BRepPrimAPI_MakeTorus *arg1 = (BRepPrimAPI_MakeTorus *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepPrimAPI_MakeSphere *_wrap_new_BRepPrimAPI_MakeSphere__SWIG_0 (gp_Pnt *larg1, Standard_Real larg2) {
  BRepPrimAPI_MakeSphere * lresult = (BRepPrimAPI_MakeSphere *)0 ;
  gp_Pnt *arg1 = 0 ;
  Standard_Real arg2 ;
  BRepPrimAPI_MakeSphere *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepPrimAPI_MakeSphere *)new BRepPrimAPI_MakeSphere((gp_Pnt const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakeSphere *)0;
  }
}


EXPORT BRepPrimAPI_MakeSphere *_wrap_new_BRepPrimAPI_MakeSphere__SWIG_1 (gp_Ax2 *larg1, Standard_Real larg2, Standard_Real larg3, Standard_Real larg4, Standard_Real larg5) {
  BRepPrimAPI_MakeSphere * lresult = (BRepPrimAPI_MakeSphere *)0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  BRepPrimAPI_MakeSphere *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (BRepPrimAPI_MakeSphere *)new BRepPrimAPI_MakeSphere((gp_Ax2 const &)*arg1,arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakeSphere *)0;
  }
}


EXPORT void _wrap_delete_BRepPrimAPI_MakeSphere (BRepPrimAPI_MakeSphere *larg1) {
  BRepPrimAPI_MakeSphere *arg1 = (BRepPrimAPI_MakeSphere *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_BRepPrimAPI_MakeSweep (BRepPrimAPI_MakeSweep *larg1) {
  BRepPrimAPI_MakeSweep *arg1 = (BRepPrimAPI_MakeSweep *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepPrimAPI_MakePrism *_wrap_new_BRepPrimAPI_MakePrism__SWIG_0 (TopoDS_Shape *larg1, gp_Vec *larg2, bool larg3, bool larg4) {
  BRepPrimAPI_MakePrism * lresult = (BRepPrimAPI_MakePrism *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Vec *arg2 = 0 ;
  Standard_Boolean arg3 ;
  Standard_Boolean arg4 ;
  BRepPrimAPI_MakePrism *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (BRepPrimAPI_MakePrism *)new BRepPrimAPI_MakePrism((TopoDS_Shape const &)*arg1,(gp_Vec const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakePrism *)0;
  }
}


EXPORT BRepPrimAPI_MakePrism *_wrap_new_BRepPrimAPI_MakePrism__SWIG_1 (TopoDS_Shape *larg1, gp_Vec *larg2, bool larg3) {
  BRepPrimAPI_MakePrism * lresult = (BRepPrimAPI_MakePrism *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Vec *arg2 = 0 ;
  Standard_Boolean arg3 ;
  BRepPrimAPI_MakePrism *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (BRepPrimAPI_MakePrism *)new BRepPrimAPI_MakePrism((TopoDS_Shape const &)*arg1,(gp_Vec const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakePrism *)0;
  }
}


EXPORT BRepPrimAPI_MakePrism *_wrap_new_BRepPrimAPI_MakePrism__SWIG_2 (TopoDS_Shape *larg1, gp_Vec *larg2) {
  BRepPrimAPI_MakePrism * lresult = (BRepPrimAPI_MakePrism *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Vec *arg2 = 0 ;
  BRepPrimAPI_MakePrism *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepPrimAPI_MakePrism *)new BRepPrimAPI_MakePrism((TopoDS_Shape const &)*arg1,(gp_Vec const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakePrism *)0;
  }
}


EXPORT void _wrap_delete_BRepPrimAPI_MakePrism (BRepPrimAPI_MakePrism *larg1) {
  BRepPrimAPI_MakePrism *arg1 = (BRepPrimAPI_MakePrism *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepPrimAPI_MakeRevol *_wrap_new_BRepPrimAPI_MakeRevol__SWIG_0 (TopoDS_Shape *larg1, gp_Ax1 *larg2, Standard_Real larg3, bool larg4) {
  BRepPrimAPI_MakeRevol * lresult = (BRepPrimAPI_MakeRevol *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Ax1 *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 ;
  BRepPrimAPI_MakeRevol *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (BRepPrimAPI_MakeRevol *)new BRepPrimAPI_MakeRevol((TopoDS_Shape const &)*arg1,(gp_Ax1 const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakeRevol *)0;
  }
}


EXPORT BRepPrimAPI_MakeRevol *_wrap_new_BRepPrimAPI_MakeRevol__SWIG_1 (TopoDS_Shape *larg1, gp_Ax1 *larg2, Standard_Real larg3) {
  BRepPrimAPI_MakeRevol * lresult = (BRepPrimAPI_MakeRevol *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Ax1 *arg2 = 0 ;
  Standard_Real arg3 ;
  BRepPrimAPI_MakeRevol *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (BRepPrimAPI_MakeRevol *)new BRepPrimAPI_MakeRevol((TopoDS_Shape const &)*arg1,(gp_Ax1 const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakeRevol *)0;
  }
}


EXPORT BRepPrimAPI_MakeRevol *_wrap_new_BRepPrimAPI_MakeRevol__SWIG_2 (TopoDS_Shape *larg1, gp_Ax1 *larg2, bool larg3) {
  BRepPrimAPI_MakeRevol * lresult = (BRepPrimAPI_MakeRevol *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Ax1 *arg2 = 0 ;
  Standard_Boolean arg3 ;
  BRepPrimAPI_MakeRevol *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (BRepPrimAPI_MakeRevol *)new BRepPrimAPI_MakeRevol((TopoDS_Shape const &)*arg1,(gp_Ax1 const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakeRevol *)0;
  }
}


EXPORT BRepPrimAPI_MakeRevol *_wrap_new_BRepPrimAPI_MakeRevol__SWIG_3 (TopoDS_Shape *larg1, gp_Ax1 *larg2) {
  BRepPrimAPI_MakeRevol * lresult = (BRepPrimAPI_MakeRevol *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Ax1 *arg2 = 0 ;
  BRepPrimAPI_MakeRevol *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepPrimAPI_MakeRevol *)new BRepPrimAPI_MakeRevol((TopoDS_Shape const &)*arg1,(gp_Ax1 const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepPrimAPI_MakeRevol *)0;
  }
}


EXPORT void _wrap_delete_BRepPrimAPI_MakeRevol (BRepPrimAPI_MakeRevol *larg1) {
  BRepPrimAPI_MakeRevol *arg1 = (BRepPrimAPI_MakeRevol *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepOffsetAPI_MakePipe *_wrap_new_BRepOffsetAPI_MakePipe (TopoDS_Wire *larg1, TopoDS_Shape *larg2) {
  BRepOffsetAPI_MakePipe * lresult = (BRepOffsetAPI_MakePipe *)0 ;
  TopoDS_Wire *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  BRepOffsetAPI_MakePipe *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepOffsetAPI_MakePipe *)new BRepOffsetAPI_MakePipe((TopoDS_Wire const &)*arg1,(TopoDS_Shape const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepOffsetAPI_MakePipe *)0;
  }
}


EXPORT void _wrap_delete_BRepOffsetAPI_MakePipe (BRepOffsetAPI_MakePipe *larg1) {
  BRepOffsetAPI_MakePipe *arg1 = (BRepOffsetAPI_MakePipe *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <BRepAlgoAPI_BooleanOperation.hxx>
#include <BRepAlgoAPI_Fuse.hxx>
#include <BRepAlgoAPI_Common.hxx>
#include <BRepAlgoAPI_Cut.hxx>
#include <BRepAlgoAPI_Section.hxx>
     
EXPORT TopTools_ListOfShape *_wrap_BRepAlgoAPI_BooleanOperation_modified (BRepAlgoAPI_BooleanOperation *larg1, TopoDS_Shape *larg2) {
  TopTools_ListOfShape * lresult = (TopTools_ListOfShape *)0 ;
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopTools_ListOfShape *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopTools_ListOfShape *) &(arg1)->Modified((TopoDS_Shape const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopTools_ListOfShape *)0;
  }
}


EXPORT bool _wrap_BRepAlgoAPI_BooleanOperation_isDeleted (BRepAlgoAPI_BooleanOperation *larg1, TopoDS_Shape *larg2) {
  bool lresult = (bool)0 ;
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)(arg1)->IsDeleted((TopoDS_Shape const &)*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT TopTools_ListOfShape *_wrap_BRepAlgoAPI_BooleanOperation_generated (BRepAlgoAPI_BooleanOperation *larg1, TopoDS_Shape *larg2) {
  TopTools_ListOfShape * lresult = (TopTools_ListOfShape *)0 ;
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopTools_ListOfShape *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopTools_ListOfShape *) &(arg1)->Generated((TopoDS_Shape const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopTools_ListOfShape *)0;
  }
}


EXPORT bool _wrap_BRepAlgoAPI_BooleanOperation_hasModified (BRepAlgoAPI_BooleanOperation *larg1) {
  bool lresult = (bool)0 ;
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepAlgoAPI_BooleanOperation const *)arg1)->HasModified();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_BRepAlgoAPI_BooleanOperation_hasGenerated (BRepAlgoAPI_BooleanOperation *larg1) {
  bool lresult = (bool)0 ;
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepAlgoAPI_BooleanOperation const *)arg1)->HasGenerated();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_BRepAlgoAPI_BooleanOperation_hasDeleted (BRepAlgoAPI_BooleanOperation *larg1) {
  bool lresult = (bool)0 ;
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepAlgoAPI_BooleanOperation const *)arg1)->HasDeleted();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_BRepAlgoAPI_BooleanOperation (BRepAlgoAPI_BooleanOperation *larg1) {
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepAlgoAPI_Fuse *_wrap_new_BRepAlgoAPI_Fuse (TopoDS_Shape *larg1, TopoDS_Shape *larg2) {
  BRepAlgoAPI_Fuse * lresult = (BRepAlgoAPI_Fuse *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  BRepAlgoAPI_Fuse *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepAlgoAPI_Fuse *)new BRepAlgoAPI_Fuse((TopoDS_Shape const &)*arg1,(TopoDS_Shape const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepAlgoAPI_Fuse *)0;
  }
}


EXPORT void _wrap_delete_BRepAlgoAPI_Fuse (BRepAlgoAPI_Fuse *larg1) {
  BRepAlgoAPI_Fuse *arg1 = (BRepAlgoAPI_Fuse *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepAlgoAPI_Common *_wrap_new_BRepAlgoAPI_Common (TopoDS_Shape *larg1, TopoDS_Shape *larg2) {
  BRepAlgoAPI_Common * lresult = (BRepAlgoAPI_Common *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  BRepAlgoAPI_Common *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepAlgoAPI_Common *)new BRepAlgoAPI_Common((TopoDS_Shape const &)*arg1,(TopoDS_Shape const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepAlgoAPI_Common *)0;
  }
}


EXPORT void _wrap_delete_BRepAlgoAPI_Common (BRepAlgoAPI_Common *larg1) {
  BRepAlgoAPI_Common *arg1 = (BRepAlgoAPI_Common *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepAlgoAPI_Cut *_wrap_new_BRepAlgoAPI_Cut (TopoDS_Shape *larg1, TopoDS_Shape *larg2) {
  BRepAlgoAPI_Cut * lresult = (BRepAlgoAPI_Cut *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  BRepAlgoAPI_Cut *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepAlgoAPI_Cut *)new BRepAlgoAPI_Cut((TopoDS_Shape const &)*arg1,(TopoDS_Shape const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepAlgoAPI_Cut *)0;
  }
}


EXPORT void _wrap_delete_BRepAlgoAPI_Cut (BRepAlgoAPI_Cut *larg1) {
  BRepAlgoAPI_Cut *arg1 = (BRepAlgoAPI_Cut *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepAlgoAPI_Section *_wrap_new_BRepAlgoAPI_Section (TopoDS_Shape *larg1, TopoDS_Shape *larg2) {
  BRepAlgoAPI_Section * lresult = (BRepAlgoAPI_Section *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  BRepAlgoAPI_Section *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepAlgoAPI_Section *)new BRepAlgoAPI_Section((TopoDS_Shape const &)*arg1,(TopoDS_Shape const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepAlgoAPI_Section *)0;
  }
}


EXPORT void _wrap_delete_BRepAlgoAPI_Section (BRepAlgoAPI_Section *larg1) {
  BRepAlgoAPI_Section *arg1 = (BRepAlgoAPI_Section *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <Poly_Triangulation.hxx>
  
EXPORT Poly_Triangulation *_wrap_new_Poly_Triangulation (Standard_Integer larg1, Standard_Integer larg2, bool larg3) {
  Poly_Triangulation * lresult = (Poly_Triangulation *)0 ;
  Standard_Integer arg1 ;
  Standard_Integer arg2 ;
  Standard_Boolean arg3 ;
  Poly_Triangulation *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (Poly_Triangulation *)new Poly_Triangulation(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Poly_Triangulation *)0;
  }
}


EXPORT Standard_Real _wrap_Poly_Triangulation_deflection__SWIG_0 (Poly_Triangulation *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)((Poly_Triangulation const *)arg1)->Deflection();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_Poly_Triangulation_deflection__SWIG_1 (Poly_Triangulation *larg1, Standard_Real larg2) {
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  Standard_Real arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Deflection(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Poly_Triangulation_removeUVNodes (Poly_Triangulation *larg1) {
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->RemoveUVNodes();
    
  } catch (...) {
    
  }
}


EXPORT Standard_Integer _wrap_Poly_Triangulation_nbNodes (Poly_Triangulation *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)((Poly_Triangulation const *)arg1)->NbNodes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT Standard_Integer _wrap_Poly_Triangulation_nbTriangles (Poly_Triangulation *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)((Poly_Triangulation const *)arg1)->NbTriangles();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT bool _wrap_Poly_Triangulation_hasUVNodes (Poly_Triangulation *larg1) {
  bool lresult = (bool)0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((Poly_Triangulation const *)arg1)->HasUVNodes();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT Poly_Array1OfTriangle *_wrap_Poly_Triangulation_triangles (Poly_Triangulation *larg1) {
  Poly_Array1OfTriangle * lresult = (Poly_Array1OfTriangle *)0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  Poly_Array1OfTriangle *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Poly_Array1OfTriangle *) &((Poly_Triangulation const *)arg1)->Triangles();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Poly_Array1OfTriangle *)0;
  }
}


EXPORT TColgp_Array1OfPnt *_wrap_Poly_Triangulation_nodes (Poly_Triangulation *larg1) {
  TColgp_Array1OfPnt * lresult = (TColgp_Array1OfPnt *)0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  TColgp_Array1OfPnt *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TColgp_Array1OfPnt *) &((Poly_Triangulation const *)arg1)->Nodes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TColgp_Array1OfPnt *)0;
  }
}


EXPORT TColgp_Array1OfPnt2d *_wrap_Poly_Triangulation_uvNodes (Poly_Triangulation *larg1) {
  TColgp_Array1OfPnt2d * lresult = (TColgp_Array1OfPnt2d *)0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  TColgp_Array1OfPnt2d *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TColgp_Array1OfPnt2d *) &((Poly_Triangulation const *)arg1)->UVNodes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TColgp_Array1OfPnt2d *)0;
  }
}


EXPORT void _wrap_delete_Poly_Triangulation (Poly_Triangulation *larg1) {
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT Poly_Triangle *_wrap_new_Poly_Triangle__SWIG_0 () {
  Poly_Triangle * lresult = (Poly_Triangle *)0 ;
  Poly_Triangle *result = 0 ;
  
  try {
    result = (Poly_Triangle *)new Poly_Triangle();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Poly_Triangle *)0;
  }
}


EXPORT Poly_Triangle *_wrap_new_Poly_Triangle__SWIG_1 (Standard_Integer larg1, Standard_Integer larg2, Standard_Integer larg3) {
  Poly_Triangle * lresult = (Poly_Triangle *)0 ;
  Standard_Integer arg1 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  Poly_Triangle *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Poly_Triangle *)new Poly_Triangle(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Poly_Triangle *)0;
  }
}


EXPORT Standard_Integer _wrap_Poly_Triangle_Value (Poly_Triangle *larg1, Standard_Integer larg2) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Poly_Triangle *arg1 = (Poly_Triangle *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Integer)((Poly_Triangle const *)arg1)->Value(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT void _wrap_delete_Poly_Triangle (Poly_Triangle *larg1) {
  Poly_Triangle *arg1 = (Poly_Triangle *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT Poly_Array1OfTriangle *_wrap_new_Poly_Array1OfTriangle__SWIG_0 (Standard_Integer larg1, Standard_Integer larg2) {
  Poly_Array1OfTriangle * lresult = (Poly_Array1OfTriangle *)0 ;
  Standard_Integer arg1 ;
  Standard_Integer arg2 ;
  Poly_Array1OfTriangle *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Poly_Array1OfTriangle *)new Poly_Array1OfTriangle(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Poly_Array1OfTriangle *)0;
  }
}


EXPORT Poly_Array1OfTriangle *_wrap_new_Poly_Array1OfTriangle__SWIG_1 (Poly_Triangle *larg1, Standard_Integer larg2, Standard_Integer larg3) {
  Poly_Array1OfTriangle * lresult = (Poly_Array1OfTriangle *)0 ;
  Poly_Triangle *arg1 = 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  Poly_Array1OfTriangle *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Poly_Array1OfTriangle *)new Poly_Array1OfTriangle((Poly_Triangle const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Poly_Array1OfTriangle *)0;
  }
}


EXPORT Standard_Integer _wrap_Poly_Array1OfTriangle_Length (Poly_Array1OfTriangle *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Poly_Array1OfTriangle *arg1 = (Poly_Array1OfTriangle *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)(arg1)->Length();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT Standard_Integer _wrap_Poly_Array1OfTriangle_Lower (Poly_Array1OfTriangle *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Poly_Array1OfTriangle *arg1 = (Poly_Array1OfTriangle *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)(arg1)->Lower();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT Standard_Integer _wrap_Poly_Array1OfTriangle_Upper (Poly_Array1OfTriangle *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Poly_Array1OfTriangle *arg1 = (Poly_Array1OfTriangle *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)(arg1)->Upper();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT Poly_Triangle *_wrap_Poly_Array1OfTriangle_Value (Poly_Array1OfTriangle *larg1, Standard_Integer larg2) {
  Poly_Triangle * lresult = (Poly_Triangle *)0 ;
  Poly_Array1OfTriangle *arg1 = (Poly_Array1OfTriangle *) 0 ;
  Standard_Integer arg2 ;
  Poly_Triangle *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Poly_Triangle *) &((Poly_Array1OfTriangle const *)arg1)->Value(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Poly_Triangle *)0;
  }
}


EXPORT void _wrap_delete_Poly_Array1OfTriangle (Poly_Array1OfTriangle *larg1) {
  Poly_Array1OfTriangle *arg1 = (Poly_Array1OfTriangle *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <Geom_Curve.hxx>
#include <Geom_Surface.hxx>
#include <Geom_Geometry.hxx>
#include <Geom_BoundedCurve.hxx>
#include <Geom_BoundedSurface.hxx>
#include <Geom_BezierCurve.hxx>
#include <Geom_BezierSurface.hxx>
#include <Geom_BSplineCurve.hxx>
#include <Geom_BSplineSurface.hxx>
#include <Geom_Circle.hxx>
#include <Geom_Conic.hxx>
#include <Geom_ConicalSurface.hxx>
#include <Geom_CylindricalSurface.hxx>
#include <Geom_Ellipse.hxx>
#include <Geom_ElementarySurface.hxx>
#include <Geom_Hyperbola.hxx>
#include <Geom_Line.hxx>
#include <Geom_OffsetCurve.hxx>
#include <Geom_OffsetSurface.hxx>
#include <Geom_Parabola.hxx>
#include <Geom_Plane.hxx>
#include <Geom_RectangularTrimmedSurface.hxx>
#include <Geom_SphericalSurface.hxx>
#include <Geom_SurfaceOfLinearExtrusion.hxx>
#include <Geom_SurfaceOfRevolution.hxx>
#include <Geom_SweptSurface.hxx>
#include <Geom_ToroidalSurface.hxx>
#include <Geom_TrimmedCurve.hxx>
#include <Geom2d_Geometry.hxx>
#include <Geom2d_Curve.hxx>
#include <Geom2d_Line.hxx>
#include <Geom2d_OffsetCurve.hxx>
#include <Geom2d_Conic.hxx>
#include <Geom2d_Circle.hxx>
#include <Geom2d_Ellipse.hxx>
#include <Geom2d_Hyperbola.hxx>
#include <Geom2d_Parabola.hxx>
#include <Geom2d_BoundedCurve.hxx>
#include <Geom2d_BezierCurve.hxx>
#include <Geom2d_BSplineCurve.hxx>
#include <Geom2d_TrimmedCurve.hxx>
#include <Bisector_Curve.hxx>
#include <Bisector_BisecAna.hxx>
#include <Bisector_BisecCC.hxx>
#include <Bisector_BisecPC.hxx>

EXPORT void _wrap_delete_Geom_Geometry (Handle_Geom_Geometry *larg1) {
  Handle_Geom_Geometry *arg1 = (Handle_Geom_Geometry *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Real Handle_Geom_Curve_firstParameter(Handle_Geom_Curve *self){
    return (*self)->FirstParameter();
  }
EXPORT Standard_Real _wrap_Geom_Curve_firstParameter (Handle_Geom_Curve *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Curve_firstParameter(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Curve_lastParameter(Handle_Geom_Curve *self){
    return (*self)->LastParameter();
  }
EXPORT Standard_Real _wrap_Geom_Curve_lastParameter (Handle_Geom_Curve *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Curve_lastParameter(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_Curve_isClosed(Handle_Geom_Curve *self){
    return (*self)->IsClosed();
  }
EXPORT bool _wrap_Geom_Curve_isClosed (Handle_Geom_Curve *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_Curve_isClosed(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_Curve_isPeriodic(Handle_Geom_Curve *self){
    return (*self)->IsPeriodic();
  }
EXPORT bool _wrap_Geom_Curve_isPeriodic (Handle_Geom_Curve *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_Curve_isPeriodic(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Curve_period(Handle_Geom_Curve *self){
    return (*self)->Period();
  }
EXPORT Standard_Real _wrap_Geom_Curve_period (Handle_Geom_Curve *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Curve_period(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN void Handle_Geom_Curve_reverse(Handle_Geom_Curve *self){
    return (*self)->Reverse();
  }
EXPORT void _wrap_Geom_Curve_reverse (Handle_Geom_Curve *larg1) {
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  
  arg1 = larg1;
  try {
    Handle_Geom_Curve_reverse(arg1);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Real Handle_Geom_Curve_getReversedParameter(Handle_Geom_Curve *self,Standard_Real const U){
    return (*self)->ReversedParameter(U);
  }
EXPORT Standard_Real _wrap_Geom_Curve_getReversedParameter (Handle_Geom_Curve *larg1, Standard_Real larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Real arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Geom_Curve_getReversedParameter(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_Curve_getValueAt(Handle_Geom_Curve *self,Standard_Real const U){
    return (*self)->Value(U);
  }
EXPORT gp_Pnt *_wrap_Geom_Curve_getValueAt (Handle_Geom_Curve *larg1, Standard_Real larg2) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = Handle_Geom_Curve_getValueAt(arg1,arg2);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_Curve_getGeometryType(Handle_Geom_Curve *self){
    if (STANDARD_TYPE(Geom_BezierCurve) == (*self)->DynamicType())
      {
	return 100;
      }
    else if (STANDARD_TYPE(Geom_BSplineCurve) == (*self)->DynamicType())
      {
	return 101;
      }
    else if (STANDARD_TYPE(Geom_Circle) == (*self)->DynamicType())
      {
	return 102;
      }
    else if (STANDARD_TYPE(Geom_Ellipse) == (*self)->DynamicType())
      {
	return 103;
      }
    else if (STANDARD_TYPE(Geom_TrimmedCurve) == (*self)->DynamicType())
      {
	return 104;
      }
    else if (STANDARD_TYPE(Geom_OffsetCurve) == (*self)->DynamicType())
      {
	return 105;
      }
    else if (STANDARD_TYPE(Geom_Hyperbola) == (*self)->DynamicType())
      {
	return 106;
      }
    else if (STANDARD_TYPE(Geom_Line) == (*self)->DynamicType())
      {
	return 107;
      }
    else if (STANDARD_TYPE(Geom_Parabola) == (*self)->DynamicType())
      {
	return 108;
      }
    
    return -1;
  }
EXPORT Standard_Integer _wrap_Geom_Curve_getGeometryType (Handle_Geom_Curve *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_Curve_getGeometryType(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT void _wrap_delete_Geom_Curve (Handle_Geom_Curve *larg1) {
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN gp_Pnt Handle_Geom_Surface_value(Handle_Geom_Surface const *self,Standard_Real const U,Standard_Real const V){
    return (*self)->Value(U, V);
  }
EXPORT gp_Pnt *_wrap_Geom_Surface_value (Handle_Geom_Surface *larg1, Standard_Real larg2, Standard_Real larg3) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = Handle_Geom_Surface_value((Handle_Geom_Surface const *)arg1,arg2,arg3);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN void Handle_Geom_Surface_bounds(Handle_Geom_Surface const *self,Standard_Real &U1,Standard_Real &U2,Standard_Real &V1,Standard_Real &V2){
    (*self)->Bounds(U1,U2,V1,V2);
  }
EXPORT void _wrap_Geom_Surface_bounds (Handle_Geom_Surface *larg1, Standard_Real *larg2, Standard_Real *larg3, Standard_Real *larg4, Standard_Real *larg5) {
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Standard_Real *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    Handle_Geom_Surface_bounds((Handle_Geom_Surface const *)arg1,*arg2,*arg3,*arg4,*arg5);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_Surface_isUClosed(Handle_Geom_Surface const *self){
    return (*self)->IsUClosed();
  }
EXPORT bool _wrap_Geom_Surface_isUClosed (Handle_Geom_Surface *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_Surface_isUClosed((Handle_Geom_Surface const *)arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_Surface_isVClosed(Handle_Geom_Surface const *self){
    return (*self)->IsVClosed();
  }
EXPORT bool _wrap_Geom_Surface_isVClosed (Handle_Geom_Surface *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_Surface_isVClosed((Handle_Geom_Surface const *)arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Handle_Geom_Curve Handle_Geom_Surface_uIso(Handle_Geom_Surface const *self,Standard_Real const U){
    return (*self)->UIso(U);
  }
EXPORT Handle_Geom_Curve *_wrap_Geom_Surface_uIso (Handle_Geom_Surface *larg1, Standard_Real larg2) {
  Handle_Geom_Curve * lresult = (Handle_Geom_Curve *)0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  SwigValueWrapper< Handle_Geom_Curve > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = Handle_Geom_Surface_uIso((Handle_Geom_Surface const *)arg1,arg2);
    lresult = new Handle_Geom_Curve(result);
    return lresult;
  } catch (...) {
    return (Handle_Geom_Curve *)0;
  }
}


SWIGINTERN Handle_Geom_Curve Handle_Geom_Surface_vIso(Handle_Geom_Surface const *self,Standard_Real const V){
    return (*self)->VIso(V);
  }
EXPORT Handle_Geom_Curve *_wrap_Geom_Surface_vIso (Handle_Geom_Surface *larg1, Standard_Real larg2) {
  Handle_Geom_Curve * lresult = (Handle_Geom_Curve *)0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  SwigValueWrapper< Handle_Geom_Curve > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = Handle_Geom_Surface_vIso((Handle_Geom_Surface const *)arg1,arg2);
    lresult = new Handle_Geom_Curve(result);
    return lresult;
  } catch (...) {
    return (Handle_Geom_Curve *)0;
  }
}


SWIGINTERN void Handle_Geom_Surface_reverseU(Handle_Geom_Surface *self){
    return (*self)->UReverse();
  }
EXPORT void _wrap_Geom_Surface_reverseU (Handle_Geom_Surface *larg1) {
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  
  arg1 = larg1;
  try {
    Handle_Geom_Surface_reverseU(arg1);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Real Handle_Geom_Surface_getReversedUParameter(Handle_Geom_Surface *self,Standard_Real const U){
    return (*self)->UReversedParameter(U);
  }
EXPORT Standard_Real _wrap_Geom_Surface_getReversedUParameter (Handle_Geom_Surface *larg1, Standard_Real larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Geom_Surface_getReversedUParameter(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN void Handle_Geom_Surface_reverseV(Handle_Geom_Surface *self){
    return (*self)->VReverse();
  }
EXPORT void _wrap_Geom_Surface_reverseV (Handle_Geom_Surface *larg1) {
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  
  arg1 = larg1;
  try {
    Handle_Geom_Surface_reverseV(arg1);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Real Handle_Geom_Surface_getReversedVParameter(Handle_Geom_Surface *self,Standard_Real const V){
    return (*self)->VReversedParameter(V);
  }
EXPORT Standard_Real _wrap_Geom_Surface_getReversedVParameter (Handle_Geom_Surface *larg1, Standard_Real larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Geom_Surface_getReversedVParameter(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_Surface_isPeriodicU(Handle_Geom_Surface *self){
    return (*self)->IsUPeriodic();
  }
EXPORT bool _wrap_Geom_Surface_isPeriodicU (Handle_Geom_Surface *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_Surface_isPeriodicU(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Surface_getPeriodU(Handle_Geom_Surface *self){
    return (*self)->UPeriod();
  }
EXPORT Standard_Real _wrap_Geom_Surface_getPeriodU (Handle_Geom_Surface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Surface_getPeriodU(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_Surface_isPeriodicV(Handle_Geom_Surface *self){
    return (*self)->IsVPeriodic();
  }
EXPORT bool _wrap_Geom_Surface_isPeriodicV (Handle_Geom_Surface *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_Surface_isPeriodicV(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Surface_getPeriodV(Handle_Geom_Surface *self){
    return (*self)->VPeriod();
  }
EXPORT Standard_Real _wrap_Geom_Surface_getPeriodV (Handle_Geom_Surface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Surface_getPeriodV(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_Surface_getGeometryType(Handle_Geom_Surface *self){
    if (STANDARD_TYPE(Geom_BezierSurface) == (*self)->DynamicType())
      {
	return 200;
      }
    else if (STANDARD_TYPE(Geom_BSplineSurface) == (*self)->DynamicType())
      {
	return 201;
      }
    else if (STANDARD_TYPE(Geom_RectangularTrimmedSurface) == (*self)->DynamicType())
      {
	return 202;
      }
    else if (STANDARD_TYPE(Geom_SphericalSurface) == (*self)->DynamicType())
      {
	return 203;
      }
    else if (STANDARD_TYPE(Geom_ToroidalSurface) == (*self)->DynamicType())
      {
	return 204;
      }
    else if (STANDARD_TYPE(Geom_OffsetSurface) == (*self)->DynamicType())
      {
	return 205;
      }
    else if (STANDARD_TYPE(Geom_SurfaceOfRevolution) == (*self)->DynamicType())
      {
	return 206;
      }
    else if (STANDARD_TYPE(Geom_ConicalSurface) == (*self)->DynamicType())
      {
	return 207;
      }
    else if (STANDARD_TYPE(Geom_CylindricalSurface) == (*self)->DynamicType())
      {
	return 208;
      }
    else if (STANDARD_TYPE(Geom_SurfaceOfLinearExtrusion) == (*self)->DynamicType())
      {
	return 209;
      }
    else if (STANDARD_TYPE(Geom_Plane) == (*self)->DynamicType())
      {
	return 210;
      }
    
    return -1;
  }
EXPORT Standard_Integer _wrap_Geom_Surface_getGeometryType (Handle_Geom_Surface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_Surface_getGeometryType(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT void _wrap_delete_Geom_Surface (Handle_Geom_Surface *larg1) {
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN gp_Pnt Handle_Geom_BoundedCurve_getEndPoint(Handle_Geom_BoundedCurve *self){
		return (*self)->EndPoint();
	}
EXPORT gp_Pnt *_wrap_Geom_BoundedCurve_getEndPoint (Handle_Geom_BoundedCurve *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_BoundedCurve *arg1 = (Handle_Geom_BoundedCurve *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_BoundedCurve_getEndPoint(arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_BoundedCurve_getStartPoint(Handle_Geom_BoundedCurve *self){
		return (*self)->StartPoint();
	}
EXPORT gp_Pnt *_wrap_Geom_BoundedCurve_getStartPoint (Handle_Geom_BoundedCurve *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_BoundedCurve *arg1 = (Handle_Geom_BoundedCurve *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_BoundedCurve_getStartPoint(arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


EXPORT void _wrap_delete_Geom_BoundedCurve (Handle_Geom_BoundedCurve *larg1) {
  Handle_Geom_BoundedCurve *arg1 = (Handle_Geom_BoundedCurve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_Conic_getAxis(Handle_Geom_Conic *self){
		return (*self)->Axis();
	}
EXPORT gp_Ax1 *_wrap_Geom_Conic_getAxis (Handle_Geom_Conic *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_Conic *arg1 = (Handle_Geom_Conic *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Conic_getAxis(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Conic_getEccentricity(Handle_Geom_Conic *self){
		return (*self)->Eccentricity();
	}
EXPORT Standard_Real _wrap_Geom_Conic_getEccentricity (Handle_Geom_Conic *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Conic *arg1 = (Handle_Geom_Conic *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Conic_getEccentricity(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_Conic_getLocation(Handle_Geom_Conic *self){
		return (*self)->Location();
	}
EXPORT gp_Pnt *_wrap_Geom_Conic_getLocation (Handle_Geom_Conic *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_Conic *arg1 = (Handle_Geom_Conic *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Conic_getLocation(arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN gp_Ax2 Handle_Geom_Conic_getPosition(Handle_Geom_Conic *self){
		return (*self)->Position();
	}
EXPORT gp_Ax2 *_wrap_Geom_Conic_getPosition (Handle_Geom_Conic *larg1) {
  gp_Ax2 * lresult = (gp_Ax2 *)0 ;
  Handle_Geom_Conic *arg1 = (Handle_Geom_Conic *) 0 ;
  gp_Ax2 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Conic_getPosition(arg1);
    lresult = new gp_Ax2(result);
    return lresult;
  } catch (...) {
    return (gp_Ax2 *)0;
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_Conic_getAxisX(Handle_Geom_Conic *self){
		return (*self)->XAxis();
	}
EXPORT gp_Ax1 *_wrap_Geom_Conic_getAxisX (Handle_Geom_Conic *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_Conic *arg1 = (Handle_Geom_Conic *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Conic_getAxisX(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_Conic_getAxisY(Handle_Geom_Conic *self){
		return (*self)->YAxis();
	}
EXPORT gp_Ax1 *_wrap_Geom_Conic_getAxisY (Handle_Geom_Conic *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_Conic *arg1 = (Handle_Geom_Conic *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Conic_getAxisY(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


EXPORT void _wrap_delete_Geom_Conic (Handle_Geom_Conic *larg1) {
  Handle_Geom_Conic *arg1 = (Handle_Geom_Conic *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Geom_BoundedSurface (Handle_Geom_BoundedSurface *larg1) {
  Handle_Geom_BoundedSurface *arg1 = (Handle_Geom_BoundedSurface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_ElementarySurface_getAxis(Handle_Geom_ElementarySurface *self){
		return (*self)->Axis();
	}
EXPORT gp_Ax1 *_wrap_Geom_ElementarySurface_getAxis (Handle_Geom_ElementarySurface *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_ElementarySurface *arg1 = (Handle_Geom_ElementarySurface *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_ElementarySurface_getAxis(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_ElementarySurface_getLocation(Handle_Geom_ElementarySurface *self){
		return (*self)->Location();
	}
EXPORT gp_Pnt *_wrap_Geom_ElementarySurface_getLocation (Handle_Geom_ElementarySurface *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_ElementarySurface *arg1 = (Handle_Geom_ElementarySurface *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_ElementarySurface_getLocation(arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN gp_Ax3 Handle_Geom_ElementarySurface_getPosition(Handle_Geom_ElementarySurface *self){
		return (*self)->Position();
	}
EXPORT gp_Ax3 *_wrap_Geom_ElementarySurface_getPosition (Handle_Geom_ElementarySurface *larg1) {
  gp_Ax3 * lresult = (gp_Ax3 *)0 ;
  Handle_Geom_ElementarySurface *arg1 = (Handle_Geom_ElementarySurface *) 0 ;
  gp_Ax3 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_ElementarySurface_getPosition(arg1);
    lresult = new gp_Ax3(result);
    return lresult;
  } catch (...) {
    return (gp_Ax3 *)0;
  }
}


EXPORT void _wrap_delete_Geom_ElementarySurface (Handle_Geom_ElementarySurface *larg1) {
  Handle_Geom_ElementarySurface *arg1 = (Handle_Geom_ElementarySurface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN gp_Dir Handle_Geom_SweptSurface_getDirection(Handle_Geom_SweptSurface *self){
		return (*self)->Direction();
	}
EXPORT gp_Dir *_wrap_Geom_SweptSurface_getDirection (Handle_Geom_SweptSurface *larg1) {
  gp_Dir * lresult = (gp_Dir *)0 ;
  Handle_Geom_SweptSurface *arg1 = (Handle_Geom_SweptSurface *) 0 ;
  gp_Dir result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_SweptSurface_getDirection(arg1);
    lresult = new gp_Dir(result);
    return lresult;
  } catch (...) {
    return (gp_Dir *)0;
  }
}


SWIGINTERN Handle_Geom_Curve Handle_Geom_SweptSurface_getBasisCurve(Handle_Geom_SweptSurface *self){
		return (*self)->BasisCurve();
	}
EXPORT Handle_Geom_Curve *_wrap_Geom_SweptSurface_getBasisCurve (Handle_Geom_SweptSurface *larg1) {
  Handle_Geom_Curve * lresult = (Handle_Geom_Curve *)0 ;
  Handle_Geom_SweptSurface *arg1 = (Handle_Geom_SweptSurface *) 0 ;
  SwigValueWrapper< Handle_Geom_Curve > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_SweptSurface_getBasisCurve(arg1);
    lresult = new Handle_Geom_Curve(result);
    return lresult;
  } catch (...) {
    return (Handle_Geom_Curve *)0;
  }
}


EXPORT void _wrap_delete_Geom_SweptSurface (Handle_Geom_SweptSurface *larg1) {
  Handle_Geom_SweptSurface *arg1 = (Handle_Geom_SweptSurface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_BezierCurve *new_Handle_Geom_BezierCurve__SWIG_0(TColgp_Array1OfPnt const &CurvePoles,TColStd_Array1OfReal const &PoleWeights){
          return new Handle_Geom_BezierCurve(new Geom_BezierCurve(CurvePoles, PoleWeights));
    }
EXPORT Handle_Geom_BezierCurve *_wrap_new_Geom_BezierCurve__SWIG_0 (TColgp_Array1OfPnt *larg1, TColStd_Array1OfReal *larg2) {
  Handle_Geom_BezierCurve * lresult = (Handle_Geom_BezierCurve *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  Handle_Geom_BezierCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom_BezierCurve *)new_Handle_Geom_BezierCurve__SWIG_0((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BezierCurve *)0;
  }
}


SWIGINTERN Handle_Geom_BezierCurve *new_Handle_Geom_BezierCurve__SWIG_1(TColgp_Array1OfPnt const &CurvePoles){
          return new Handle_Geom_BezierCurve(new Geom_BezierCurve(CurvePoles));
    }
EXPORT Handle_Geom_BezierCurve *_wrap_new_Geom_BezierCurve__SWIG_1 (TColgp_Array1OfPnt *larg1) {
  Handle_Geom_BezierCurve * lresult = (Handle_Geom_BezierCurve *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  Handle_Geom_BezierCurve *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Handle_Geom_BezierCurve *)new_Handle_Geom_BezierCurve__SWIG_1((TColgp_Array1OfPnt const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BezierCurve *)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_BezierCurve_isPeriodic(Handle_Geom_BezierCurve *self){
        return (*self)->IsPeriodic();
    }
EXPORT bool _wrap_Geom_BezierCurve_isPeriodic (Handle_Geom_BezierCurve *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_BezierCurve *arg1 = (Handle_Geom_BezierCurve *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_BezierCurve_isPeriodic(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_BezierCurve_isRational(Handle_Geom_BezierCurve *self){
		return (*self)->IsRational();
	}
EXPORT bool _wrap_Geom_BezierCurve_isRational (Handle_Geom_BezierCurve *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_BezierCurve *arg1 = (Handle_Geom_BezierCurve *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_BezierCurve_isRational(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BezierCurve_getDegree(Handle_Geom_BezierCurve *self){
		return (*self)->Degree();
	}
EXPORT Standard_Integer _wrap_Geom_BezierCurve_getDegree (Handle_Geom_BezierCurve *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BezierCurve *arg1 = (Handle_Geom_BezierCurve *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BezierCurve_getDegree(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN void Handle_Geom_BezierCurve_getResolution(Handle_Geom_BezierCurve *self,Standard_Real tolerance3d,Standard_Real &toleranceU){
        return (*self)->Resolution(tolerance3d, toleranceU);
    }
EXPORT void _wrap_Geom_BezierCurve_getResolution (Handle_Geom_BezierCurve *larg1, Standard_Real larg2, Standard_Real *larg3) {
  Handle_Geom_BezierCurve *arg1 = (Handle_Geom_BezierCurve *) 0 ;
  Standard_Real arg2 ;
  Standard_Real *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    Handle_Geom_BezierCurve_getResolution(arg1,arg2,*arg3);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BezierCurve_getControlPointsCount(Handle_Geom_BezierCurve *self){
        return (*self)->NbPoles();
    }
EXPORT Standard_Integer _wrap_Geom_BezierCurve_getControlPointsCount (Handle_Geom_BezierCurve *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BezierCurve *arg1 = (Handle_Geom_BezierCurve *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BezierCurve_getControlPointsCount(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_BezierCurve_getControlPoint(Handle_Geom_BezierCurve *self,Standard_Integer const Index){
        return (*self)->Pole(Index);
    }
EXPORT gp_Pnt *_wrap_Geom_BezierCurve_getControlPoint (Handle_Geom_BezierCurve *larg1, Standard_Integer larg2) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_BezierCurve *arg1 = (Handle_Geom_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = Handle_Geom_BezierCurve_getControlPoint(arg1,arg2);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_BezierCurve_getWeight(Handle_Geom_BezierCurve *self,Standard_Integer const Index){
        return (*self)->Weight(Index);
    }
EXPORT Standard_Real _wrap_Geom_BezierCurve_getWeight (Handle_Geom_BezierCurve *larg1, Standard_Integer larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_BezierCurve *arg1 = (Handle_Geom_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Geom_BezierCurve_getWeight(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Geom_BezierCurve (Handle_Geom_BezierCurve *larg1) {
  Handle_Geom_BezierCurve *arg1 = (Handle_Geom_BezierCurve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_BSplineCurve *new_Handle_Geom_BSplineCurve__SWIG_0(TColgp_Array1OfPnt const &Poles,TColStd_Array1OfReal const &Weights,TColStd_Array1OfReal const &Knots,TColStd_Array1OfInteger const &Multiplicities,Standard_Integer const Degree,Standard_Boolean const Periodic=Standard_False,Standard_Boolean const CheckRational=Standard_True){
		return new Handle_Geom_BSplineCurve(new Geom_BSplineCurve(
			Poles, Weights, Knots, Multiplicities, Degree, Periodic, CheckRational));
	}
EXPORT Handle_Geom_BSplineCurve *_wrap_new_Geom_BSplineCurve__SWIG_0 (TColgp_Array1OfPnt *larg1, TColStd_Array1OfReal *larg2, TColStd_Array1OfReal *larg3, TColStd_Array1OfInteger *larg4, Standard_Integer larg5, bool larg6, bool larg7) {
  Handle_Geom_BSplineCurve * lresult = (Handle_Geom_BSplineCurve *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  TColStd_Array1OfReal *arg3 = 0 ;
  TColStd_Array1OfInteger *arg4 = 0 ;
  Standard_Integer arg5 ;
  Standard_Boolean arg6 ;
  Standard_Boolean arg7 ;
  Handle_Geom_BSplineCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = (bool)larg7;
  try {
    result = (Handle_Geom_BSplineCurve *)new_Handle_Geom_BSplineCurve__SWIG_0((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,(TColStd_Array1OfReal const &)*arg3,(TColStd_Array1OfInteger const &)*arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BSplineCurve *)0;
  }
}


EXPORT Handle_Geom_BSplineCurve *_wrap_new_Geom_BSplineCurve__SWIG_1 (TColgp_Array1OfPnt *larg1, TColStd_Array1OfReal *larg2, TColStd_Array1OfReal *larg3, TColStd_Array1OfInteger *larg4, Standard_Integer larg5, bool larg6) {
  Handle_Geom_BSplineCurve * lresult = (Handle_Geom_BSplineCurve *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  TColStd_Array1OfReal *arg3 = 0 ;
  TColStd_Array1OfInteger *arg4 = 0 ;
  Standard_Integer arg5 ;
  Standard_Boolean arg6 ;
  Handle_Geom_BSplineCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (Handle_Geom_BSplineCurve *)new_Handle_Geom_BSplineCurve__SWIG_0((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,(TColStd_Array1OfReal const &)*arg3,(TColStd_Array1OfInteger const &)*arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BSplineCurve *)0;
  }
}


EXPORT Handle_Geom_BSplineCurve *_wrap_new_Geom_BSplineCurve__SWIG_2 (TColgp_Array1OfPnt *larg1, TColStd_Array1OfReal *larg2, TColStd_Array1OfReal *larg3, TColStd_Array1OfInteger *larg4, Standard_Integer larg5) {
  Handle_Geom_BSplineCurve * lresult = (Handle_Geom_BSplineCurve *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  TColStd_Array1OfReal *arg3 = 0 ;
  TColStd_Array1OfInteger *arg4 = 0 ;
  Standard_Integer arg5 ;
  Handle_Geom_BSplineCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (Handle_Geom_BSplineCurve *)new_Handle_Geom_BSplineCurve__SWIG_0((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,(TColStd_Array1OfReal const &)*arg3,(TColStd_Array1OfInteger const &)*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BSplineCurve *)0;
  }
}


SWIGINTERN Handle_Geom_BSplineCurve *new_Handle_Geom_BSplineCurve__SWIG_3(TColgp_Array1OfPnt const &Poles,TColStd_Array1OfReal const &Knots,TColStd_Array1OfInteger const &Multiplicities,Standard_Integer const Degree,Standard_Boolean const Periodic=Standard_False){
        return new Handle_Geom_BSplineCurve(new Geom_BSplineCurve(Poles, Knots, Multiplicities, 
            Degree, Periodic));
    }
EXPORT Handle_Geom_BSplineCurve *_wrap_new_Geom_BSplineCurve__SWIG_3 (TColgp_Array1OfPnt *larg1, TColStd_Array1OfReal *larg2, TColStd_Array1OfInteger *larg3, Standard_Integer larg4, bool larg5) {
  Handle_Geom_BSplineCurve * lresult = (Handle_Geom_BSplineCurve *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  TColStd_Array1OfInteger *arg3 = 0 ;
  Standard_Integer arg4 ;
  Standard_Boolean arg5 ;
  Handle_Geom_BSplineCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    result = (Handle_Geom_BSplineCurve *)new_Handle_Geom_BSplineCurve__SWIG_3((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,(TColStd_Array1OfInteger const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BSplineCurve *)0;
  }
}


EXPORT Handle_Geom_BSplineCurve *_wrap_new_Geom_BSplineCurve__SWIG_4 (TColgp_Array1OfPnt *larg1, TColStd_Array1OfReal *larg2, TColStd_Array1OfInteger *larg3, Standard_Integer larg4) {
  Handle_Geom_BSplineCurve * lresult = (Handle_Geom_BSplineCurve *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  TColStd_Array1OfInteger *arg3 = 0 ;
  Standard_Integer arg4 ;
  Handle_Geom_BSplineCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (Handle_Geom_BSplineCurve *)new_Handle_Geom_BSplineCurve__SWIG_3((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,(TColStd_Array1OfInteger const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BSplineCurve *)0;
  }
}


SWIGINTERN void Handle_Geom_BSplineCurve_setKnot__SWIG_0(Handle_Geom_BSplineCurve *self,Standard_Integer const Index,Standard_Real const K){
    (*self)->SetKnot(Index,K);
  }
EXPORT void _wrap_Geom_BSplineCurve_setKnot__SWIG_0 (Handle_Geom_BSplineCurve *larg1, Standard_Integer larg2, Standard_Real larg3) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    Handle_Geom_BSplineCurve_setKnot__SWIG_0(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


SWIGINTERN void Handle_Geom_BSplineCurve_setKnot__SWIG_1(Handle_Geom_BSplineCurve *self,Standard_Integer const Index,Standard_Real const K,Standard_Integer const M){
    (*self)->SetKnot(Index,K,M);
  }
EXPORT void _wrap_Geom_BSplineCurve_setKnot__SWIG_1 (Handle_Geom_BSplineCurve *larg1, Standard_Integer larg2, Standard_Real larg3, Standard_Integer larg4) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real arg3 ;
  Standard_Integer arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    Handle_Geom_BSplineCurve_setKnot__SWIG_1(arg1,arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


SWIGINTERN void Handle_Geom_BSplineCurve_setPeriodic(Handle_Geom_BSplineCurve *self){
    (*self)->SetPeriodic();
  }
EXPORT void _wrap_Geom_BSplineCurve_setPeriodic (Handle_Geom_BSplineCurve *larg1) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  
  arg1 = larg1;
  try {
    Handle_Geom_BSplineCurve_setPeriodic(arg1);
    
  } catch (...) {
    
  }
}


SWIGINTERN void Handle_Geom_BSplineCurve_setNotPeriodic(Handle_Geom_BSplineCurve *self){
    (*self)->SetNotPeriodic();
  }
EXPORT void _wrap_Geom_BSplineCurve_setNotPeriodic (Handle_Geom_BSplineCurve *larg1) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  
  arg1 = larg1;
  try {
    Handle_Geom_BSplineCurve_setNotPeriodic(arg1);
    
  } catch (...) {
    
  }
}


SWIGINTERN void Handle_Geom_BSplineCurve_setOrigin__SWIG_0(Handle_Geom_BSplineCurve *self,Standard_Integer const Index){
     (*self)->SetOrigin(Index);
  }
EXPORT void _wrap_Geom_BSplineCurve_setOrigin__SWIG_0 (Handle_Geom_BSplineCurve *larg1, Standard_Integer larg2) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Handle_Geom_BSplineCurve_setOrigin__SWIG_0(arg1,arg2);
    
  } catch (...) {
    
  }
}


SWIGINTERN void Handle_Geom_BSplineCurve_setOrigin__SWIG_1(Handle_Geom_BSplineCurve *self,Standard_Real const U,Standard_Real const Tol){
     (*self)->SetOrigin(U,Tol);
  }
EXPORT void _wrap_Geom_BSplineCurve_setOrigin__SWIG_1 (Handle_Geom_BSplineCurve *larg1, Standard_Real larg2, Standard_Real larg3) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    Handle_Geom_BSplineCurve_setOrigin__SWIG_1(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


SWIGINTERN void Handle_Geom_BSplineCurve_setPole__SWIG_0(Handle_Geom_BSplineCurve *self,Standard_Integer const Index,gp_Pnt const &P){
    (*self)->SetPole(Index,P);
  }
EXPORT void _wrap_Geom_BSplineCurve_setPole__SWIG_0 (Handle_Geom_BSplineCurve *larg1, Standard_Integer larg2, gp_Pnt *larg3) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    Handle_Geom_BSplineCurve_setPole__SWIG_0(arg1,arg2,(gp_Pnt const &)*arg3);
    
  } catch (...) {
    
  }
}


SWIGINTERN void Handle_Geom_BSplineCurve_setPole__SWIG_1(Handle_Geom_BSplineCurve *self,Standard_Integer const Index,gp_Pnt const &P,Standard_Real const Weight){
    (*self)->SetPole(Index,P,Weight);
  }
EXPORT void _wrap_Geom_BSplineCurve_setPole__SWIG_1 (Handle_Geom_BSplineCurve *larg1, Standard_Integer larg2, gp_Pnt *larg3, Standard_Real larg4) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt *arg3 = 0 ;
  Standard_Real arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    Handle_Geom_BSplineCurve_setPole__SWIG_1(arg1,arg2,(gp_Pnt const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


SWIGINTERN void Handle_Geom_BSplineCurve_movePoint(Handle_Geom_BSplineCurve *self,Standard_Real const U,gp_Pnt const &P,Standard_Integer const Index1,Standard_Integer const Index2,Standard_Integer &FirstModifiedPole,Standard_Integer &LastModifiedPole){
    (*self)->MovePoint(U,P,Index1,Index2,FirstModifiedPole,LastModifiedPole);
  }
EXPORT void _wrap_Geom_BSplineCurve_movePoint (Handle_Geom_BSplineCurve *larg1, Standard_Real larg2, gp_Pnt *larg3, Standard_Integer larg4, Standard_Integer larg5, Standard_Integer *larg6, Standard_Integer *larg7) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  Standard_Integer arg4 ;
  Standard_Integer arg5 ;
  Standard_Integer *arg6 = 0 ;
  Standard_Integer *arg7 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    Handle_Geom_BSplineCurve_movePoint(arg1,arg2,(gp_Pnt const &)*arg3,arg4,arg5,*arg6,*arg7);
    
  } catch (...) {
    
  }
}


SWIGINTERN void Handle_Geom_BSplineCurve_movePointAndTangent(Handle_Geom_BSplineCurve *self,Standard_Real const U,gp_Pnt const &P,gp_Vec const &Tangent,Standard_Real const Tolerance,Standard_Integer const StartingCondition,Standard_Integer const EndingCondition){
    Standard_Integer ErrorStatus =0;
	(*self)->MovePointAndTangent(U,P,Tangent,Tolerance,StartingCondition,EndingCondition,ErrorStatus);
  }
EXPORT void _wrap_Geom_BSplineCurve_movePointAndTangent (Handle_Geom_BSplineCurve *larg1, Standard_Real larg2, gp_Pnt *larg3, gp_Vec *larg4, Standard_Real larg5, Standard_Integer larg6, Standard_Integer larg7) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  gp_Vec *arg4 = 0 ;
  Standard_Real arg5 ;
  Standard_Integer arg6 ;
  Standard_Integer arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    Handle_Geom_BSplineCurve_movePointAndTangent(arg1,arg2,(gp_Pnt const &)*arg3,(gp_Vec const &)*arg4,arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_BSplineCurve_isRational(Handle_Geom_BSplineCurve const *self){
    return (*self)->IsRational();
  }
EXPORT bool _wrap_Geom_BSplineCurve_isRational (Handle_Geom_BSplineCurve *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_BSplineCurve_isRational((Handle_Geom_BSplineCurve const *)arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN GeomAbs_Shape Handle_Geom_BSplineCurve_continuity(Handle_Geom_BSplineCurve const *self){
    return (*self)->Continuity();
  }
EXPORT GeomAbs_Shape _wrap_Geom_BSplineCurve_continuity (Handle_Geom_BSplineCurve *larg1) {
  GeomAbs_Shape lresult = (GeomAbs_Shape)0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  GeomAbs_Shape result;
  
  arg1 = larg1;
  try {
    result = (GeomAbs_Shape)Handle_Geom_BSplineCurve_continuity((Handle_Geom_BSplineCurve const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAbs_Shape)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineCurve_getDegree(Handle_Geom_BSplineCurve const *self){
    return (*self)->Degree();
  }
EXPORT Standard_Integer _wrap_Geom_BSplineCurve_getDegree (Handle_Geom_BSplineCurve *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineCurve_getDegree((Handle_Geom_BSplineCurve const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_BSplineCurve_localValue(Handle_Geom_BSplineCurve const *self,Standard_Real const U,Standard_Integer const FromK1,Standard_Integer const ToK2){
    return (*self)->LocalValue(U,FromK1,ToK2);
  }
EXPORT gp_Pnt *_wrap_Geom_BSplineCurve_localValue (Handle_Geom_BSplineCurve *larg1, Standard_Real larg2, Standard_Integer larg3, Standard_Integer larg4) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Real arg2 ;
  Standard_Integer arg3 ;
  Standard_Integer arg4 ;
  gp_Pnt result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = Handle_Geom_BSplineCurve_localValue((Handle_Geom_BSplineCurve const *)arg1,arg2,arg3,arg4);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_BSplineCurve_endPoint(Handle_Geom_BSplineCurve const *self){
    return (*self)->EndPoint();
  }
EXPORT gp_Pnt *_wrap_Geom_BSplineCurve_endPoint (Handle_Geom_BSplineCurve *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_BSplineCurve_endPoint((Handle_Geom_BSplineCurve const *)arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_BSplineCurve_startPoint(Handle_Geom_BSplineCurve const *self){
    return (*self)->StartPoint();
  }
EXPORT gp_Pnt *_wrap_Geom_BSplineCurve_startPoint (Handle_Geom_BSplineCurve *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_BSplineCurve_startPoint((Handle_Geom_BSplineCurve const *)arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineCurve_getKnotsCount(Handle_Geom_BSplineCurve const *self){
    return (*self)->NbKnots();
  }
EXPORT Standard_Integer _wrap_Geom_BSplineCurve_getKnotsCount (Handle_Geom_BSplineCurve *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineCurve_getKnotsCount((Handle_Geom_BSplineCurve const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineCurve_getControlPointsCount(Handle_Geom_BSplineCurve const *self){
    return (*self)->NbPoles();
  }
EXPORT Standard_Integer _wrap_Geom_BSplineCurve_getControlPointsCount (Handle_Geom_BSplineCurve *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineCurve_getControlPointsCount((Handle_Geom_BSplineCurve const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_BSplineCurve_getControlPoint(Handle_Geom_BSplineCurve const *self,Standard_Integer const Index){
    return (*self)->Pole(Index);
  }
EXPORT gp_Pnt *_wrap_Geom_BSplineCurve_getControlPoint (Handle_Geom_BSplineCurve *larg1, Standard_Integer larg2) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = Handle_Geom_BSplineCurve_getControlPoint((Handle_Geom_BSplineCurve const *)arg1,arg2);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN void Handle_Geom_BSplineCurve_getControlPoints(Handle_Geom_BSplineCurve *self,TColgp_Array1OfPnt &P){
    (*self)->Poles(P);
  }
EXPORT void _wrap_Geom_BSplineCurve_getControlPoints (Handle_Geom_BSplineCurve *larg1, TColgp_Array1OfPnt *larg2) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  TColgp_Array1OfPnt *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Handle_Geom_BSplineCurve_getControlPoints(arg1,*arg2);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Real Handle_Geom_BSplineCurve_getWeight(Handle_Geom_BSplineCurve const *self,Standard_Integer const Index){
    return (*self)->Weight(Index);
  }
EXPORT Standard_Real _wrap_Geom_BSplineCurve_getWeight (Handle_Geom_BSplineCurve *larg1, Standard_Integer larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Geom_BSplineCurve_getWeight((Handle_Geom_BSplineCurve const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_BSplineCurve_getKnot(Handle_Geom_BSplineCurve const *self,Standard_Integer const Index){
    return (*self)->Knot(Index);
  }
EXPORT Standard_Real _wrap_Geom_BSplineCurve_getKnot (Handle_Geom_BSplineCurve *larg1, Standard_Integer larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Geom_BSplineCurve_getKnot((Handle_Geom_BSplineCurve const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN void Handle_Geom_BSplineCurve_getKnots(Handle_Geom_BSplineCurve *self,TColStd_Array1OfReal &K){
    (*self)->Knots(K);
  }
EXPORT void _wrap_Geom_BSplineCurve_getKnots (Handle_Geom_BSplineCurve *larg1, TColStd_Array1OfReal *larg2) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Handle_Geom_BSplineCurve_getKnots(arg1,*arg2);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineCurve_getMultiplicity(Handle_Geom_BSplineCurve const *self,Standard_Integer const Index){
    return (*self)->Multiplicity(Index);
  }
EXPORT Standard_Integer _wrap_Geom_BSplineCurve_getMultiplicity (Handle_Geom_BSplineCurve *larg1, Standard_Integer larg2) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineCurve_getMultiplicity((Handle_Geom_BSplineCurve const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT void _wrap_delete_Geom_BSplineCurve (Handle_Geom_BSplineCurve *larg1) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_Circle *new_Handle_Geom_Circle(gp_Ax2 const &A2,Standard_Real const R){
		return new Handle_Geom_Circle(new Geom_Circle(A2, R));
	}
EXPORT Handle_Geom_Circle *_wrap_new_Geom_Circle (gp_Ax2 *larg1, Standard_Real larg2) {
  Handle_Geom_Circle * lresult = (Handle_Geom_Circle *)0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Handle_Geom_Circle *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom_Circle *)new_Handle_Geom_Circle((gp_Ax2 const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_Circle *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Circle_getRadius(Handle_Geom_Circle *self){
    return (*self)->Radius();
  }
EXPORT Standard_Real _wrap_Geom_Circle_getRadius (Handle_Geom_Circle *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Circle *arg1 = (Handle_Geom_Circle *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Circle_getRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Geom_Circle (Handle_Geom_Circle *larg1) {
  Handle_Geom_Circle *arg1 = (Handle_Geom_Circle *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_Ellipse *new_Handle_Geom_Ellipse(gp_Ax2 const &A2,Standard_Real const majorRadius,Standard_Real const minorRadius){
		return new Handle_Geom_Ellipse(new Geom_Ellipse(A2, majorRadius, minorRadius));
	}
EXPORT Handle_Geom_Ellipse *_wrap_new_Geom_Ellipse (gp_Ax2 *larg1, Standard_Real larg2, Standard_Real larg3) {
  Handle_Geom_Ellipse * lresult = (Handle_Geom_Ellipse *)0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Handle_Geom_Ellipse *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Handle_Geom_Ellipse *)new_Handle_Geom_Ellipse((gp_Ax2 const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_Ellipse *)0;
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_Ellipse_getDirectrix1(Handle_Geom_Ellipse *self){
		return (*self)->Directrix1();
	}
EXPORT gp_Ax1 *_wrap_Geom_Ellipse_getDirectrix1 (Handle_Geom_Ellipse *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_Ellipse *arg1 = (Handle_Geom_Ellipse *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Ellipse_getDirectrix1(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_Ellipse_getDirectrix2(Handle_Geom_Ellipse *self){
		return (*self)->Directrix2();
	}
EXPORT gp_Ax1 *_wrap_Geom_Ellipse_getDirectrix2 (Handle_Geom_Ellipse *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_Ellipse *arg1 = (Handle_Geom_Ellipse *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Ellipse_getDirectrix2(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Ellipse_getFocalDistance(Handle_Geom_Ellipse *self){
		return (*self)->Focal();
	}
EXPORT Standard_Real _wrap_Geom_Ellipse_getFocalDistance (Handle_Geom_Ellipse *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Ellipse *arg1 = (Handle_Geom_Ellipse *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Ellipse_getFocalDistance(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_Ellipse_getFocus1(Handle_Geom_Ellipse *self){
		return (*self)->Focus1();
	}
EXPORT gp_Pnt *_wrap_Geom_Ellipse_getFocus1 (Handle_Geom_Ellipse *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_Ellipse *arg1 = (Handle_Geom_Ellipse *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Ellipse_getFocus1(arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_Ellipse_getFocus2(Handle_Geom_Ellipse *self){
    	return (*self)->Focus2();
	}
EXPORT gp_Pnt *_wrap_Geom_Ellipse_getFocus2 (Handle_Geom_Ellipse *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_Ellipse *arg1 = (Handle_Geom_Ellipse *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Ellipse_getFocus2(arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Ellipse_getMajorRadius(Handle_Geom_Ellipse *self){
		return (*self)->MajorRadius();
	}
EXPORT Standard_Real _wrap_Geom_Ellipse_getMajorRadius (Handle_Geom_Ellipse *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Ellipse *arg1 = (Handle_Geom_Ellipse *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Ellipse_getMajorRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Ellipse_getMinorRadius(Handle_Geom_Ellipse *self){
		return (*self)->MinorRadius();
	}
EXPORT Standard_Real _wrap_Geom_Ellipse_getMinorRadius (Handle_Geom_Ellipse *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Ellipse *arg1 = (Handle_Geom_Ellipse *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Ellipse_getMinorRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Ellipse_getParameter(Handle_Geom_Ellipse *self){
		return (*self)->Parameter();
	}
EXPORT Standard_Real _wrap_Geom_Ellipse_getParameter (Handle_Geom_Ellipse *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Ellipse *arg1 = (Handle_Geom_Ellipse *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Ellipse_getParameter(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Geom_Ellipse (Handle_Geom_Ellipse *larg1) {
  Handle_Geom_Ellipse *arg1 = (Handle_Geom_Ellipse *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_TrimmedCurve *new_Handle_Geom_TrimmedCurve__SWIG_0(Handle_Geom_Curve const &C,Standard_Real const U1,Standard_Real const U2,Standard_Boolean const Sense=Standard_True){
          return new Handle_Geom_TrimmedCurve(new Geom_TrimmedCurve(C, U1, U2, Sense));
    }
EXPORT Handle_Geom_TrimmedCurve *_wrap_new_Geom_TrimmedCurve__SWIG_0 (Handle_Geom_Curve *larg1, Standard_Real larg2, Standard_Real larg3, bool larg4) {
  Handle_Geom_TrimmedCurve * lresult = (Handle_Geom_TrimmedCurve *)0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 ;
  Handle_Geom_TrimmedCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (Handle_Geom_TrimmedCurve *)new_Handle_Geom_TrimmedCurve__SWIG_0((Handle_Geom_Curve const &)*arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_TrimmedCurve *)0;
  }
}


EXPORT Handle_Geom_TrimmedCurve *_wrap_new_Geom_TrimmedCurve__SWIG_1 (Handle_Geom_Curve *larg1, Standard_Real larg2, Standard_Real larg3) {
  Handle_Geom_TrimmedCurve * lresult = (Handle_Geom_TrimmedCurve *)0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Handle_Geom_TrimmedCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Handle_Geom_TrimmedCurve *)new_Handle_Geom_TrimmedCurve__SWIG_0((Handle_Geom_Curve const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_TrimmedCurve *)0;
  }
}


SWIGINTERN Handle_Geom_Curve Handle_Geom_TrimmedCurve_getBasisCurve(Handle_Geom_TrimmedCurve *self){
		return (*self)->BasisCurve();
	}
EXPORT Handle_Geom_Curve *_wrap_Geom_TrimmedCurve_getBasisCurve (Handle_Geom_TrimmedCurve *larg1) {
  Handle_Geom_Curve * lresult = (Handle_Geom_Curve *)0 ;
  Handle_Geom_TrimmedCurve *arg1 = (Handle_Geom_TrimmedCurve *) 0 ;
  SwigValueWrapper< Handle_Geom_Curve > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_TrimmedCurve_getBasisCurve(arg1);
    lresult = new Handle_Geom_Curve(result);
    return lresult;
  } catch (...) {
    return (Handle_Geom_Curve *)0;
  }
}


EXPORT void _wrap_delete_Geom_TrimmedCurve (Handle_Geom_TrimmedCurve *larg1) {
  Handle_Geom_TrimmedCurve *arg1 = (Handle_Geom_TrimmedCurve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_OffsetCurve *new_Handle_Geom_OffsetCurve(Handle_Geom_Curve const &C,Standard_Real const Offset,gp_Dir const &V){
          return new Handle_Geom_OffsetCurve(new Geom_OffsetCurve(C, Offset, V));
    }
EXPORT Handle_Geom_OffsetCurve *_wrap_new_Geom_OffsetCurve (Handle_Geom_Curve *larg1, Standard_Real larg2, gp_Dir *larg3) {
  Handle_Geom_OffsetCurve * lresult = (Handle_Geom_OffsetCurve *)0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  gp_Dir *arg3 = 0 ;
  Handle_Geom_OffsetCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Handle_Geom_OffsetCurve *)new_Handle_Geom_OffsetCurve((Handle_Geom_Curve const &)*arg1,arg2,(gp_Dir const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_OffsetCurve *)0;
  }
}


SWIGINTERN gp_Dir Handle_Geom_OffsetCurve_getDirection(Handle_Geom_OffsetCurve *self){
    	return (*self)->Direction();
    }
EXPORT gp_Dir *_wrap_Geom_OffsetCurve_getDirection (Handle_Geom_OffsetCurve *larg1) {
  gp_Dir * lresult = (gp_Dir *)0 ;
  Handle_Geom_OffsetCurve *arg1 = (Handle_Geom_OffsetCurve *) 0 ;
  gp_Dir result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_OffsetCurve_getDirection(arg1);
    lresult = new gp_Dir(result);
    return lresult;
  } catch (...) {
    return (gp_Dir *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_OffsetCurve_getOffset(Handle_Geom_OffsetCurve *self){
    	return (*self)->Offset();
    }
EXPORT Standard_Real _wrap_Geom_OffsetCurve_getOffset (Handle_Geom_OffsetCurve *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_OffsetCurve *arg1 = (Handle_Geom_OffsetCurve *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_OffsetCurve_getOffset(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Handle_Geom_Curve Handle_Geom_OffsetCurve_getBasisCurve(Handle_Geom_OffsetCurve *self){
    	return (*self)->BasisCurve();
    }
EXPORT Handle_Geom_Curve *_wrap_Geom_OffsetCurve_getBasisCurve (Handle_Geom_OffsetCurve *larg1) {
  Handle_Geom_Curve * lresult = (Handle_Geom_Curve *)0 ;
  Handle_Geom_OffsetCurve *arg1 = (Handle_Geom_OffsetCurve *) 0 ;
  SwigValueWrapper< Handle_Geom_Curve > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_OffsetCurve_getBasisCurve(arg1);
    lresult = new Handle_Geom_Curve(result);
    return lresult;
  } catch (...) {
    return (Handle_Geom_Curve *)0;
  }
}


EXPORT void _wrap_delete_Geom_OffsetCurve (Handle_Geom_OffsetCurve *larg1) {
  Handle_Geom_OffsetCurve *arg1 = (Handle_Geom_OffsetCurve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_Hyperbola *new_Handle_Geom_Hyperbola(gp_Ax2 const &A2,Standard_Real const majorRadius,Standard_Real const minorRadius){
		return new Handle_Geom_Hyperbola(new Geom_Hyperbola(A2, majorRadius, minorRadius));
	}
EXPORT Handle_Geom_Hyperbola *_wrap_new_Geom_Hyperbola (gp_Ax2 *larg1, Standard_Real larg2, Standard_Real larg3) {
  Handle_Geom_Hyperbola * lresult = (Handle_Geom_Hyperbola *)0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Handle_Geom_Hyperbola *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Handle_Geom_Hyperbola *)new_Handle_Geom_Hyperbola((gp_Ax2 const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_Hyperbola *)0;
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_Hyperbola_getAsymptote1(Handle_Geom_Hyperbola *self){
		return (*self)->Asymptote1();
	}
EXPORT gp_Ax1 *_wrap_Geom_Hyperbola_getAsymptote1 (Handle_Geom_Hyperbola *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Hyperbola_getAsymptote1(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_Hyperbola_getAsymptote2(Handle_Geom_Hyperbola *self){
		return (*self)->Asymptote2();
	}
EXPORT gp_Ax1 *_wrap_Geom_Hyperbola_getAsymptote2 (Handle_Geom_Hyperbola *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Hyperbola_getAsymptote2(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


SWIGINTERN gp_Hypr Handle_Geom_Hyperbola_getConjugateBranch1(Handle_Geom_Hyperbola *self){
		return (*self)->ConjugateBranch1();
	}
EXPORT gp_Hypr *_wrap_Geom_Hyperbola_getConjugateBranch1 (Handle_Geom_Hyperbola *larg1) {
  gp_Hypr * lresult = (gp_Hypr *)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  SwigValueWrapper< gp_Hypr > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Hyperbola_getConjugateBranch1(arg1);
    lresult = new gp_Hypr(result);
    return lresult;
  } catch (...) {
    return (gp_Hypr *)0;
  }
}


SWIGINTERN gp_Hypr Handle_Geom_Hyperbola_getConjugateBranch2(Handle_Geom_Hyperbola *self){
		return (*self)->ConjugateBranch2();
	}
EXPORT gp_Hypr *_wrap_Geom_Hyperbola_getConjugateBranch2 (Handle_Geom_Hyperbola *larg1) {
  gp_Hypr * lresult = (gp_Hypr *)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  SwigValueWrapper< gp_Hypr > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Hyperbola_getConjugateBranch2(arg1);
    lresult = new gp_Hypr(result);
    return lresult;
  } catch (...) {
    return (gp_Hypr *)0;
  }
}


SWIGINTERN gp_Hypr Handle_Geom_Hyperbola_getOtherBranch(Handle_Geom_Hyperbola *self){
		return (*self)->OtherBranch();
	}
EXPORT gp_Hypr *_wrap_Geom_Hyperbola_getOtherBranch (Handle_Geom_Hyperbola *larg1) {
  gp_Hypr * lresult = (gp_Hypr *)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  SwigValueWrapper< gp_Hypr > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Hyperbola_getOtherBranch(arg1);
    lresult = new gp_Hypr(result);
    return lresult;
  } catch (...) {
    return (gp_Hypr *)0;
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_Hyperbola_getDirectrix1(Handle_Geom_Hyperbola *self){
		return (*self)->Directrix1();
	}
EXPORT gp_Ax1 *_wrap_Geom_Hyperbola_getDirectrix1 (Handle_Geom_Hyperbola *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Hyperbola_getDirectrix1(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_Hyperbola_getDirectrix2(Handle_Geom_Hyperbola *self){
		return (*self)->Directrix2();
	}
EXPORT gp_Ax1 *_wrap_Geom_Hyperbola_getDirectrix2 (Handle_Geom_Hyperbola *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Hyperbola_getDirectrix2(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Hyperbola_getFocalDistance(Handle_Geom_Hyperbola *self){
		return (*self)->Focal();
	}
EXPORT Standard_Real _wrap_Geom_Hyperbola_getFocalDistance (Handle_Geom_Hyperbola *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Hyperbola_getFocalDistance(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_Hyperbola_getFocus1(Handle_Geom_Hyperbola *self){
		return (*self)->Focus1();
	}
EXPORT gp_Pnt *_wrap_Geom_Hyperbola_getFocus1 (Handle_Geom_Hyperbola *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Hyperbola_getFocus1(arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_Hyperbola_getFocus2(Handle_Geom_Hyperbola *self){
		return (*self)->Focus2();
	}
EXPORT gp_Pnt *_wrap_Geom_Hyperbola_getFocus2 (Handle_Geom_Hyperbola *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Hyperbola_getFocus2(arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Hyperbola_getMajorRadius(Handle_Geom_Hyperbola *self){
		return (*self)->MajorRadius();
	}
EXPORT Standard_Real _wrap_Geom_Hyperbola_getMajorRadius (Handle_Geom_Hyperbola *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Hyperbola_getMajorRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Hyperbola_getMinorRadius(Handle_Geom_Hyperbola *self){
		return (*self)->MinorRadius();
	}
EXPORT Standard_Real _wrap_Geom_Hyperbola_getMinorRadius (Handle_Geom_Hyperbola *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Hyperbola_getMinorRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Hyperbola_getParameter(Handle_Geom_Hyperbola *self){
		return (*self)->Parameter();
	}
EXPORT Standard_Real _wrap_Geom_Hyperbola_getParameter (Handle_Geom_Hyperbola *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Hyperbola_getParameter(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Geom_Hyperbola (Handle_Geom_Hyperbola *larg1) {
  Handle_Geom_Hyperbola *arg1 = (Handle_Geom_Hyperbola *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_Line *new_Handle_Geom_Line__SWIG_0(gp_Ax1 const &A1){
		return new Handle_Geom_Line(new Geom_Line(A1));
	}
EXPORT Handle_Geom_Line *_wrap_new_Geom_Line__SWIG_0 (gp_Ax1 *larg1) {
  Handle_Geom_Line * lresult = (Handle_Geom_Line *)0 ;
  gp_Ax1 *arg1 = 0 ;
  Handle_Geom_Line *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Handle_Geom_Line *)new_Handle_Geom_Line__SWIG_0((gp_Ax1 const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_Line *)0;
  }
}


SWIGINTERN Handle_Geom_Line *new_Handle_Geom_Line__SWIG_1(gp_Pnt const &P,gp_Dir const &V){
		return new Handle_Geom_Line(new Geom_Line(P, V));
	}
EXPORT Handle_Geom_Line *_wrap_new_Geom_Line__SWIG_1 (gp_Pnt *larg1, gp_Dir *larg2) {
  Handle_Geom_Line * lresult = (Handle_Geom_Line *)0 ;
  gp_Pnt *arg1 = 0 ;
  gp_Dir *arg2 = 0 ;
  Handle_Geom_Line *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom_Line *)new_Handle_Geom_Line__SWIG_1((gp_Pnt const &)*arg1,(gp_Dir const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_Line *)0;
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_Line_getPosition(Handle_Geom_Line *self){
		return (*self)->Position();
	}
EXPORT gp_Ax1 *_wrap_Geom_Line_getPosition (Handle_Geom_Line *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_Line *arg1 = (Handle_Geom_Line *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Line_getPosition(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


SWIGINTERN gp_Lin Handle_Geom_Line_getLin(Handle_Geom_Line *self){
		return (*self)->Lin();
	}
EXPORT gp_Lin *_wrap_Geom_Line_getLin (Handle_Geom_Line *larg1) {
  gp_Lin * lresult = (gp_Lin *)0 ;
  Handle_Geom_Line *arg1 = (Handle_Geom_Line *) 0 ;
  gp_Lin result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Line_getLin(arg1);
    lresult = new gp_Lin(result);
    return lresult;
  } catch (...) {
    return (gp_Lin *)0;
  }
}


EXPORT void _wrap_delete_Geom_Line (Handle_Geom_Line *larg1) {
  Handle_Geom_Line *arg1 = (Handle_Geom_Line *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_Parabola *new_Handle_Geom_Parabola(gp_Ax2 const &A2,Standard_Real const Focal){
		return new Handle_Geom_Parabola(new Geom_Parabola(A2, Focal));
	}
EXPORT Handle_Geom_Parabola *_wrap_new_Geom_Parabola (gp_Ax2 *larg1, Standard_Real larg2) {
  Handle_Geom_Parabola * lresult = (Handle_Geom_Parabola *)0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Handle_Geom_Parabola *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom_Parabola *)new_Handle_Geom_Parabola((gp_Ax2 const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_Parabola *)0;
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_Parabola_getDirectrix(Handle_Geom_Parabola *self){
		return (*self)->Directrix();
	}
EXPORT gp_Ax1 *_wrap_Geom_Parabola_getDirectrix (Handle_Geom_Parabola *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_Parabola *arg1 = (Handle_Geom_Parabola *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Parabola_getDirectrix(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Parabola_getFocalDistance(Handle_Geom_Parabola *self){
		return (*self)->Focal();
	}
EXPORT Standard_Real _wrap_Geom_Parabola_getFocalDistance (Handle_Geom_Parabola *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Parabola *arg1 = (Handle_Geom_Parabola *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Parabola_getFocalDistance(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_Parabola_getFocus(Handle_Geom_Parabola *self){
		return (*self)->Focus();
	}
EXPORT gp_Pnt *_wrap_Geom_Parabola_getFocus (Handle_Geom_Parabola *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_Parabola *arg1 = (Handle_Geom_Parabola *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Parabola_getFocus(arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_Parabola_getParameter(Handle_Geom_Parabola *self){
		return (*self)->Parameter();
	}
EXPORT Standard_Real _wrap_Geom_Parabola_getParameter (Handle_Geom_Parabola *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_Parabola *arg1 = (Handle_Geom_Parabola *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_Parabola_getParameter(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Geom_Parabola (Handle_Geom_Parabola *larg1) {
  Handle_Geom_Parabola *arg1 = (Handle_Geom_Parabola *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_BezierSurface *new_Handle_Geom_BezierSurface(TColgp_Array2OfPnt const &SurfacePoles,TColStd_Array2OfReal const &PoleWeights){
		return new Handle_Geom_BezierSurface(new Geom_BezierSurface(SurfacePoles, PoleWeights));
	}
EXPORT Handle_Geom_BezierSurface *_wrap_new_Geom_BezierSurface (TColgp_Array2OfPnt *larg1, TColStd_Array2OfReal *larg2) {
  Handle_Geom_BezierSurface * lresult = (Handle_Geom_BezierSurface *)0 ;
  TColgp_Array2OfPnt *arg1 = 0 ;
  TColStd_Array2OfReal *arg2 = 0 ;
  Handle_Geom_BezierSurface *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom_BezierSurface *)new_Handle_Geom_BezierSurface((TColgp_Array2OfPnt const &)*arg1,(TColStd_Array2OfReal const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BezierSurface *)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BezierSurface_getControlPointsUCount(Handle_Geom_BezierSurface *self){
        return (*self)->NbUPoles();
    }
EXPORT Standard_Integer _wrap_Geom_BezierSurface_getControlPointsUCount (Handle_Geom_BezierSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BezierSurface *arg1 = (Handle_Geom_BezierSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BezierSurface_getControlPointsUCount(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BezierSurface_getControlPointsVCount(Handle_Geom_BezierSurface *self){
        return (*self)->NbVPoles();
    }
EXPORT Standard_Integer _wrap_Geom_BezierSurface_getControlPointsVCount (Handle_Geom_BezierSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BezierSurface *arg1 = (Handle_Geom_BezierSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BezierSurface_getControlPointsVCount(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BezierSurface_getDegreeU(Handle_Geom_BezierSurface *self){
        return (*self)->UDegree();
    }
EXPORT Standard_Integer _wrap_Geom_BezierSurface_getDegreeU (Handle_Geom_BezierSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BezierSurface *arg1 = (Handle_Geom_BezierSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BezierSurface_getDegreeU(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BezierSurface_getDegreeV(Handle_Geom_BezierSurface *self){
        return (*self)->VDegree();
    }
EXPORT Standard_Integer _wrap_Geom_BezierSurface_getDegreeV (Handle_Geom_BezierSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BezierSurface *arg1 = (Handle_Geom_BezierSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BezierSurface_getDegreeV(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_BezierSurface_getControlPoint(Handle_Geom_BezierSurface *self,Standard_Integer const indexU,Standard_Integer const indexV){
        return (*self)->Pole(indexU, indexV);
    }
EXPORT gp_Pnt *_wrap_Geom_BezierSurface_getControlPoint (Handle_Geom_BezierSurface *larg1, Standard_Integer larg2, Standard_Integer larg3) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_BezierSurface *arg1 = (Handle_Geom_BezierSurface *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  gp_Pnt result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = Handle_Geom_BezierSurface_getControlPoint(arg1,arg2,arg3);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_BezierSurface_getWeight(Handle_Geom_BezierSurface *self,Standard_Integer const indexU,Standard_Integer const indexV){
        return (*self)->Weight(indexU, indexV);
    }
EXPORT Standard_Real _wrap_Geom_BezierSurface_getWeight (Handle_Geom_BezierSurface *larg1, Standard_Integer larg2, Standard_Integer larg3) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_BezierSurface *arg1 = (Handle_Geom_BezierSurface *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Standard_Real)Handle_Geom_BezierSurface_getWeight(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_BezierSurface_isRationalU(Handle_Geom_BezierSurface *self){
        return (*self)->IsURational();
    }
EXPORT bool _wrap_Geom_BezierSurface_isRationalU (Handle_Geom_BezierSurface *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_BezierSurface *arg1 = (Handle_Geom_BezierSurface *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_BezierSurface_isRationalU(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_BezierSurface_isRationalV(Handle_Geom_BezierSurface *self){
        return (*self)->IsVRational();
    }
EXPORT bool _wrap_Geom_BezierSurface_isRationalV (Handle_Geom_BezierSurface *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_BezierSurface *arg1 = (Handle_Geom_BezierSurface *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_BezierSurface_isRationalV(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BezierSurface_getMaxDegree(Handle_Geom_BezierSurface *self){
        return (*self)->MaxDegree();
    }
EXPORT Standard_Integer _wrap_Geom_BezierSurface_getMaxDegree (Handle_Geom_BezierSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BezierSurface *arg1 = (Handle_Geom_BezierSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BezierSurface_getMaxDegree(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN void Handle_Geom_BezierSurface_getResolution(Handle_Geom_BezierSurface *self,Standard_Real tolerance3d,Standard_Real &toleranceU,Standard_Real &toleranceV){
        return (*self)->Resolution(tolerance3d, toleranceU, toleranceV);
    }
EXPORT void _wrap_Geom_BezierSurface_getResolution (Handle_Geom_BezierSurface *larg1, Standard_Real larg2, Standard_Real *larg3, Standard_Real *larg4) {
  Handle_Geom_BezierSurface *arg1 = (Handle_Geom_BezierSurface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    Handle_Geom_BezierSurface_getResolution(arg1,arg2,*arg3,*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Geom_BezierSurface (Handle_Geom_BezierSurface *larg1) {
  Handle_Geom_BezierSurface *arg1 = (Handle_Geom_BezierSurface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_BSplineSurface *new_Handle_Geom_BSplineSurface__SWIG_0(TColgp_Array2OfPnt const &Poles,TColStd_Array2OfReal const &Weights,TColStd_Array1OfReal const &UKnots,TColStd_Array1OfReal const &VKnots,TColStd_Array1OfInteger const &UMults,TColStd_Array1OfInteger const &VMults,Standard_Integer const UDegree,Standard_Integer const VDegree,Standard_Boolean const UPeriodic=Standard_False,Standard_Boolean const VPeriodic=Standard_False){
        return new Handle_Geom_BSplineSurface(new Geom_BSplineSurface(Poles, Weights, UKnots, VKnots, UMults, VMults,
            UDegree, VDegree, UPeriodic, VPeriodic));
    }
EXPORT Handle_Geom_BSplineSurface *_wrap_new_Geom_BSplineSurface__SWIG_0 (TColgp_Array2OfPnt *larg1, TColStd_Array2OfReal *larg2, TColStd_Array1OfReal *larg3, TColStd_Array1OfReal *larg4, TColStd_Array1OfInteger *larg5, TColStd_Array1OfInteger *larg6, Standard_Integer larg7, Standard_Integer larg8, bool larg9, bool larg10) {
  Handle_Geom_BSplineSurface * lresult = (Handle_Geom_BSplineSurface *)0 ;
  TColgp_Array2OfPnt *arg1 = 0 ;
  TColStd_Array2OfReal *arg2 = 0 ;
  TColStd_Array1OfReal *arg3 = 0 ;
  TColStd_Array1OfReal *arg4 = 0 ;
  TColStd_Array1OfInteger *arg5 = 0 ;
  TColStd_Array1OfInteger *arg6 = 0 ;
  Standard_Integer arg7 ;
  Standard_Integer arg8 ;
  Standard_Boolean arg9 ;
  Standard_Boolean arg10 ;
  Handle_Geom_BSplineSurface *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = (bool)larg9;
  arg10 = (bool)larg10;
  try {
    result = (Handle_Geom_BSplineSurface *)new_Handle_Geom_BSplineSurface__SWIG_0((TColgp_Array2OfPnt const &)*arg1,(TColStd_Array2OfReal const &)*arg2,(TColStd_Array1OfReal const &)*arg3,(TColStd_Array1OfReal const &)*arg4,(TColStd_Array1OfInteger const &)*arg5,(TColStd_Array1OfInteger const &)*arg6,arg7,arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BSplineSurface *)0;
  }
}


EXPORT Handle_Geom_BSplineSurface *_wrap_new_Geom_BSplineSurface__SWIG_1 (TColgp_Array2OfPnt *larg1, TColStd_Array2OfReal *larg2, TColStd_Array1OfReal *larg3, TColStd_Array1OfReal *larg4, TColStd_Array1OfInteger *larg5, TColStd_Array1OfInteger *larg6, Standard_Integer larg7, Standard_Integer larg8, bool larg9) {
  Handle_Geom_BSplineSurface * lresult = (Handle_Geom_BSplineSurface *)0 ;
  TColgp_Array2OfPnt *arg1 = 0 ;
  TColStd_Array2OfReal *arg2 = 0 ;
  TColStd_Array1OfReal *arg3 = 0 ;
  TColStd_Array1OfReal *arg4 = 0 ;
  TColStd_Array1OfInteger *arg5 = 0 ;
  TColStd_Array1OfInteger *arg6 = 0 ;
  Standard_Integer arg7 ;
  Standard_Integer arg8 ;
  Standard_Boolean arg9 ;
  Handle_Geom_BSplineSurface *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = (bool)larg9;
  try {
    result = (Handle_Geom_BSplineSurface *)new_Handle_Geom_BSplineSurface__SWIG_0((TColgp_Array2OfPnt const &)*arg1,(TColStd_Array2OfReal const &)*arg2,(TColStd_Array1OfReal const &)*arg3,(TColStd_Array1OfReal const &)*arg4,(TColStd_Array1OfInteger const &)*arg5,(TColStd_Array1OfInteger const &)*arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BSplineSurface *)0;
  }
}


EXPORT Handle_Geom_BSplineSurface *_wrap_new_Geom_BSplineSurface__SWIG_2 (TColgp_Array2OfPnt *larg1, TColStd_Array2OfReal *larg2, TColStd_Array1OfReal *larg3, TColStd_Array1OfReal *larg4, TColStd_Array1OfInteger *larg5, TColStd_Array1OfInteger *larg6, Standard_Integer larg7, Standard_Integer larg8) {
  Handle_Geom_BSplineSurface * lresult = (Handle_Geom_BSplineSurface *)0 ;
  TColgp_Array2OfPnt *arg1 = 0 ;
  TColStd_Array2OfReal *arg2 = 0 ;
  TColStd_Array1OfReal *arg3 = 0 ;
  TColStd_Array1OfReal *arg4 = 0 ;
  TColStd_Array1OfInteger *arg5 = 0 ;
  TColStd_Array1OfInteger *arg6 = 0 ;
  Standard_Integer arg7 ;
  Standard_Integer arg8 ;
  Handle_Geom_BSplineSurface *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (Handle_Geom_BSplineSurface *)new_Handle_Geom_BSplineSurface__SWIG_0((TColgp_Array2OfPnt const &)*arg1,(TColStd_Array2OfReal const &)*arg2,(TColStd_Array1OfReal const &)*arg3,(TColStd_Array1OfReal const &)*arg4,(TColStd_Array1OfInteger const &)*arg5,(TColStd_Array1OfInteger const &)*arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BSplineSurface *)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_BSplineSurface_isRationalU(Handle_Geom_BSplineSurface *self){
        return (*self)->IsURational();
    }
EXPORT bool _wrap_Geom_BSplineSurface_isRationalU (Handle_Geom_BSplineSurface *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_BSplineSurface_isRationalU(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom_BSplineSurface_isRationalV(Handle_Geom_BSplineSurface *self){
        return (*self)->IsVRational();
    }
EXPORT bool _wrap_Geom_BSplineSurface_isRationalV (Handle_Geom_BSplineSurface *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom_BSplineSurface_isRationalV(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getIndexOfFirstKnotU(Handle_Geom_BSplineSurface *self){
        return (*self)->FirstUKnotIndex();
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getIndexOfFirstKnotU (Handle_Geom_BSplineSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getIndexOfFirstKnotU(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getIndexOfFirstKnotV(Handle_Geom_BSplineSurface *self){
        return (*self)->FirstVKnotIndex();
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getIndexOfFirstKnotV (Handle_Geom_BSplineSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getIndexOfFirstKnotV(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getIndexOfLastKnotU(Handle_Geom_BSplineSurface *self){
        return (*self)->LastUKnotIndex();
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getIndexOfLastKnotU (Handle_Geom_BSplineSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getIndexOfLastKnotU(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getIndexOfLastKnotV(Handle_Geom_BSplineSurface *self){
        return (*self)->LastVKnotIndex();
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getIndexOfLastKnotV (Handle_Geom_BSplineSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getIndexOfLastKnotV(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getControlPointsUCount(Handle_Geom_BSplineSurface *self){
        return (*self)->NbUPoles();
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getControlPointsUCount (Handle_Geom_BSplineSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getControlPointsUCount(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getControlPointsVCount(Handle_Geom_BSplineSurface *self){
        return (*self)->NbVPoles();
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getControlPointsVCount (Handle_Geom_BSplineSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getControlPointsVCount(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getKnotsUCount(Handle_Geom_BSplineSurface *self){
        return (*self)->NbUKnots();
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getKnotsUCount (Handle_Geom_BSplineSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getKnotsUCount(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getKnotsVCount(Handle_Geom_BSplineSurface *self){
        return (*self)->NbVKnots();
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getKnotsVCount (Handle_Geom_BSplineSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getKnotsVCount(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_BSplineSurface_getControlPoint(Handle_Geom_BSplineSurface *self,Standard_Integer const indexU,Standard_Integer const indexV){
        return (*self)->Pole(indexU, indexV);
    }
EXPORT gp_Pnt *_wrap_Geom_BSplineSurface_getControlPoint (Handle_Geom_BSplineSurface *larg1, Standard_Integer larg2, Standard_Integer larg3) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  gp_Pnt result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = Handle_Geom_BSplineSurface_getControlPoint(arg1,arg2,arg3);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getDegreeU(Handle_Geom_BSplineSurface *self){
        return (*self)->UDegree();
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getDegreeU (Handle_Geom_BSplineSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getDegreeU(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getDegreeV(Handle_Geom_BSplineSurface *self){
        return (*self)->VDegree();
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getDegreeV (Handle_Geom_BSplineSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getDegreeV(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_BSplineSurface_getKnotU(Handle_Geom_BSplineSurface *self,Standard_Integer const indexUKnot){
        return (*self)->UKnot(indexUKnot);
    }
EXPORT Standard_Real _wrap_Geom_BSplineSurface_getKnotU (Handle_Geom_BSplineSurface *larg1, Standard_Integer larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Geom_BSplineSurface_getKnotU(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_BSplineSurface_getKnotV(Handle_Geom_BSplineSurface *self,Standard_Integer const indexVKnot){
        return (*self)->VKnot(indexVKnot);
    }
EXPORT Standard_Real _wrap_Geom_BSplineSurface_getKnotV (Handle_Geom_BSplineSurface *larg1, Standard_Integer larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Geom_BSplineSurface_getKnotV(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getMultiplicityU(Handle_Geom_BSplineSurface *self,Standard_Integer const indexUKnot){
		return (*self)->UMultiplicity(indexUKnot);
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getMultiplicityU (Handle_Geom_BSplineSurface *larg1, Standard_Integer larg2) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getMultiplicityU(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getMultiplicityV(Handle_Geom_BSplineSurface *self,Standard_Integer const indexVKnot){
		return (*self)->VMultiplicity(indexVKnot);
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getMultiplicityV (Handle_Geom_BSplineSurface *larg1, Standard_Integer larg2) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getMultiplicityV(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_BSplineSurface_getWeight(Handle_Geom_BSplineSurface *self,Standard_Integer const indexU,Standard_Integer const indexV){
        return (*self)->Weight(indexU, indexV);
    }
EXPORT Standard_Real _wrap_Geom_BSplineSurface_getWeight (Handle_Geom_BSplineSurface *larg1, Standard_Integer larg2, Standard_Integer larg3) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Standard_Real)Handle_Geom_BSplineSurface_getWeight(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom_BSplineSurface_getMaxDegree(Handle_Geom_BSplineSurface *self){
        return (*self)->MaxDegree();
    }
EXPORT Standard_Integer _wrap_Geom_BSplineSurface_getMaxDegree (Handle_Geom_BSplineSurface *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom_BSplineSurface_getMaxDegree(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN void Handle_Geom_BSplineSurface_getResolution(Handle_Geom_BSplineSurface *self,Standard_Real tolerance3d,Standard_Real &toleranceU,Standard_Real &toleranceV){
        return (*self)->Resolution(tolerance3d, toleranceU, toleranceV);
    }
EXPORT void _wrap_Geom_BSplineSurface_getResolution (Handle_Geom_BSplineSurface *larg1, Standard_Real larg2, Standard_Real *larg3, Standard_Real *larg4) {
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    Handle_Geom_BSplineSurface_getResolution(arg1,arg2,*arg3,*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Geom_BSplineSurface (Handle_Geom_BSplineSurface *larg1) {
  Handle_Geom_BSplineSurface *arg1 = (Handle_Geom_BSplineSurface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_RectangularTrimmedSurface *new_Handle_Geom_RectangularTrimmedSurface__SWIG_0(Handle_Geom_Surface const &S,Standard_Real const U1,Standard_Real const U2,Standard_Real const V1,Standard_Real const V2,Standard_Boolean const USense=Standard_True,Standard_Boolean const VSense=Standard_True){
        return new Handle_Geom_RectangularTrimmedSurface(new Geom_RectangularTrimmedSurface(S, U1, U2, V1, V2, USense, VSense));
     }
EXPORT Handle_Geom_RectangularTrimmedSurface *_wrap_new_Geom_RectangularTrimmedSurface__SWIG_0 (Handle_Geom_Surface *larg1, Standard_Real larg2, Standard_Real larg3, Standard_Real larg4, Standard_Real larg5, bool larg6, bool larg7) {
  Handle_Geom_RectangularTrimmedSurface * lresult = (Handle_Geom_RectangularTrimmedSurface *)0 ;
  Handle_Geom_Surface *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  Standard_Boolean arg6 ;
  Standard_Boolean arg7 ;
  Handle_Geom_RectangularTrimmedSurface *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = (bool)larg7;
  try {
    result = (Handle_Geom_RectangularTrimmedSurface *)new_Handle_Geom_RectangularTrimmedSurface__SWIG_0((Handle_Geom_Surface const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_RectangularTrimmedSurface *)0;
  }
}


EXPORT Handle_Geom_RectangularTrimmedSurface *_wrap_new_Geom_RectangularTrimmedSurface__SWIG_1 (Handle_Geom_Surface *larg1, Standard_Real larg2, Standard_Real larg3, Standard_Real larg4, Standard_Real larg5, bool larg6) {
  Handle_Geom_RectangularTrimmedSurface * lresult = (Handle_Geom_RectangularTrimmedSurface *)0 ;
  Handle_Geom_Surface *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  Standard_Boolean arg6 ;
  Handle_Geom_RectangularTrimmedSurface *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (Handle_Geom_RectangularTrimmedSurface *)new_Handle_Geom_RectangularTrimmedSurface__SWIG_0((Handle_Geom_Surface const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_RectangularTrimmedSurface *)0;
  }
}


EXPORT Handle_Geom_RectangularTrimmedSurface *_wrap_new_Geom_RectangularTrimmedSurface__SWIG_2 (Handle_Geom_Surface *larg1, Standard_Real larg2, Standard_Real larg3, Standard_Real larg4, Standard_Real larg5) {
  Handle_Geom_RectangularTrimmedSurface * lresult = (Handle_Geom_RectangularTrimmedSurface *)0 ;
  Handle_Geom_Surface *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  Handle_Geom_RectangularTrimmedSurface *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (Handle_Geom_RectangularTrimmedSurface *)new_Handle_Geom_RectangularTrimmedSurface__SWIG_0((Handle_Geom_Surface const &)*arg1,arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_RectangularTrimmedSurface *)0;
  }
}


SWIGINTERN Handle_Geom_Surface Handle_Geom_RectangularTrimmedSurface_getBasisSurface(Handle_Geom_RectangularTrimmedSurface *self){
        return (*self)->BasisSurface();	
	}
EXPORT Handle_Geom_Surface *_wrap_Geom_RectangularTrimmedSurface_getBasisSurface (Handle_Geom_RectangularTrimmedSurface *larg1) {
  Handle_Geom_Surface * lresult = (Handle_Geom_Surface *)0 ;
  Handle_Geom_RectangularTrimmedSurface *arg1 = (Handle_Geom_RectangularTrimmedSurface *) 0 ;
  SwigValueWrapper< Handle_Geom_Surface > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_RectangularTrimmedSurface_getBasisSurface(arg1);
    lresult = new Handle_Geom_Surface(result);
    return lresult;
  } catch (...) {
    return (Handle_Geom_Surface *)0;
  }
}


SWIGINTERN void Handle_Geom_RectangularTrimmedSurface_bounds(Handle_Geom_RectangularTrimmedSurface *self,Standard_Real &u1,Standard_Real &u2,Standard_Real &v1,Standard_Real &v2){
        (*self)->Bounds(u1, u2, v1, v2);
    }
EXPORT void _wrap_Geom_RectangularTrimmedSurface_bounds (Handle_Geom_RectangularTrimmedSurface *larg1, Standard_Real *larg2, Standard_Real *larg3, Standard_Real *larg4, Standard_Real *larg5) {
  Handle_Geom_RectangularTrimmedSurface *arg1 = (Handle_Geom_RectangularTrimmedSurface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Standard_Real *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    Handle_Geom_RectangularTrimmedSurface_bounds(arg1,*arg2,*arg3,*arg4,*arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Geom_RectangularTrimmedSurface (Handle_Geom_RectangularTrimmedSurface *larg1) {
  Handle_Geom_RectangularTrimmedSurface *arg1 = (Handle_Geom_RectangularTrimmedSurface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_SphericalSurface *new_Handle_Geom_SphericalSurface(gp_Ax3 const &A3,Standard_Real const Radius){
        return new Handle_Geom_SphericalSurface(new Geom_SphericalSurface(A3, Radius));
    }
EXPORT Handle_Geom_SphericalSurface *_wrap_new_Geom_SphericalSurface (gp_Ax3 *larg1, Standard_Real larg2) {
  Handle_Geom_SphericalSurface * lresult = (Handle_Geom_SphericalSurface *)0 ;
  gp_Ax3 *arg1 = 0 ;
  Standard_Real arg2 ;
  Handle_Geom_SphericalSurface *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom_SphericalSurface *)new_Handle_Geom_SphericalSurface((gp_Ax3 const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_SphericalSurface *)0;
  }
}


SWIGINTERN gp_Sphere Handle_Geom_SphericalSurface_getSphere(Handle_Geom_SphericalSurface *self){
	    return (*self)->Sphere();	
	}
EXPORT gp_Sphere *_wrap_Geom_SphericalSurface_getSphere (Handle_Geom_SphericalSurface *larg1) {
  gp_Sphere * lresult = (gp_Sphere *)0 ;
  Handle_Geom_SphericalSurface *arg1 = (Handle_Geom_SphericalSurface *) 0 ;
  SwigValueWrapper< gp_Sphere > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_SphericalSurface_getSphere(arg1);
    lresult = new gp_Sphere(result);
    return lresult;
  } catch (...) {
    return (gp_Sphere *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_SphericalSurface_getArea(Handle_Geom_SphericalSurface *self){
	    return (*self)->Area();	
	}
EXPORT Standard_Real _wrap_Geom_SphericalSurface_getArea (Handle_Geom_SphericalSurface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_SphericalSurface *arg1 = (Handle_Geom_SphericalSurface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_SphericalSurface_getArea(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN void Handle_Geom_SphericalSurface_getCoefficients(Handle_Geom_SphericalSurface *self,Standard_Real &outA1,Standard_Real &outA2,Standard_Real &outA3,Standard_Real &outB1,Standard_Real &outB2,Standard_Real &outB3,Standard_Real &outC1,Standard_Real &outC2,Standard_Real &outC3,Standard_Real &outD){
		return (*self)->Coefficients(outA1, outA2, outA3, outB1, outB2, outB3, outC1, outC2, outC3, outD);
	}
EXPORT void _wrap_Geom_SphericalSurface_getCoefficients (Handle_Geom_SphericalSurface *larg1, Standard_Real *larg2, Standard_Real *larg3, Standard_Real *larg4, Standard_Real *larg5, Standard_Real *larg6, Standard_Real *larg7, Standard_Real *larg8, Standard_Real *larg9, Standard_Real *larg10, Standard_Real *larg11) {
  Handle_Geom_SphericalSurface *arg1 = (Handle_Geom_SphericalSurface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Standard_Real *arg5 = 0 ;
  Standard_Real *arg6 = 0 ;
  Standard_Real *arg7 = 0 ;
  Standard_Real *arg8 = 0 ;
  Standard_Real *arg9 = 0 ;
  Standard_Real *arg10 = 0 ;
  Standard_Real *arg11 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    Handle_Geom_SphericalSurface_getCoefficients(arg1,*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Real Handle_Geom_SphericalSurface_getRadius(Handle_Geom_SphericalSurface *self){   
		return (*self)->Radius();	
	}
EXPORT Standard_Real _wrap_Geom_SphericalSurface_getRadius (Handle_Geom_SphericalSurface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_SphericalSurface *arg1 = (Handle_Geom_SphericalSurface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_SphericalSurface_getRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_SphericalSurface_getVolume(Handle_Geom_SphericalSurface *self){   
		return (*self)->Volume();	
	}
EXPORT Standard_Real _wrap_Geom_SphericalSurface_getVolume (Handle_Geom_SphericalSurface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_SphericalSurface *arg1 = (Handle_Geom_SphericalSurface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_SphericalSurface_getVolume(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Geom_SphericalSurface (Handle_Geom_SphericalSurface *larg1) {
  Handle_Geom_SphericalSurface *arg1 = (Handle_Geom_SphericalSurface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_ToroidalSurface *new_Handle_Geom_ToroidalSurface(gp_Ax3 const &A3,Standard_Real const MajorRadius,Standard_Real const MinorRadius){
        return new Handle_Geom_ToroidalSurface(new Geom_ToroidalSurface(A3, MajorRadius, MinorRadius));
    }
EXPORT Handle_Geom_ToroidalSurface *_wrap_new_Geom_ToroidalSurface (gp_Ax3 *larg1, Standard_Real larg2, Standard_Real larg3) {
  Handle_Geom_ToroidalSurface * lresult = (Handle_Geom_ToroidalSurface *)0 ;
  gp_Ax3 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Handle_Geom_ToroidalSurface *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Handle_Geom_ToroidalSurface *)new_Handle_Geom_ToroidalSurface((gp_Ax3 const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_ToroidalSurface *)0;
  }
}


SWIGINTERN gp_Torus Handle_Geom_ToroidalSurface_getTorus(Handle_Geom_ToroidalSurface *self){
	    return (*self)->Torus();	
	}
EXPORT gp_Torus *_wrap_Geom_ToroidalSurface_getTorus (Handle_Geom_ToroidalSurface *larg1) {
  gp_Torus * lresult = (gp_Torus *)0 ;
  Handle_Geom_ToroidalSurface *arg1 = (Handle_Geom_ToroidalSurface *) 0 ;
  SwigValueWrapper< gp_Torus > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_ToroidalSurface_getTorus(arg1);
    lresult = new gp_Torus(result);
    return lresult;
  } catch (...) {
    return (gp_Torus *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_ToroidalSurface_getArea(Handle_Geom_ToroidalSurface *self){
	    return (*self)->Area();	
	}
EXPORT Standard_Real _wrap_Geom_ToroidalSurface_getArea (Handle_Geom_ToroidalSurface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_ToroidalSurface *arg1 = (Handle_Geom_ToroidalSurface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_ToroidalSurface_getArea(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_ToroidalSurface_getMajorRadius(Handle_Geom_ToroidalSurface *self){
		return (*self)->MajorRadius();
	}
EXPORT Standard_Real _wrap_Geom_ToroidalSurface_getMajorRadius (Handle_Geom_ToroidalSurface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_ToroidalSurface *arg1 = (Handle_Geom_ToroidalSurface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_ToroidalSurface_getMajorRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_ToroidalSurface_getMinorRadius(Handle_Geom_ToroidalSurface *self){
		return (*self)->MinorRadius();
	}
EXPORT Standard_Real _wrap_Geom_ToroidalSurface_getMinorRadius (Handle_Geom_ToroidalSurface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_ToroidalSurface *arg1 = (Handle_Geom_ToroidalSurface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_ToroidalSurface_getMinorRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_ToroidalSurface_getVolume(Handle_Geom_ToroidalSurface *self){   
		return (*self)->Volume();	
	}
EXPORT Standard_Real _wrap_Geom_ToroidalSurface_getVolume (Handle_Geom_ToroidalSurface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_ToroidalSurface *arg1 = (Handle_Geom_ToroidalSurface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_ToroidalSurface_getVolume(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Geom_ToroidalSurface (Handle_Geom_ToroidalSurface *larg1) {
  Handle_Geom_ToroidalSurface *arg1 = (Handle_Geom_ToroidalSurface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_OffsetSurface *new_Handle_Geom_OffsetSurface(Handle_Geom_Surface const &S,Standard_Real const Offset){
        return new Handle_Geom_OffsetSurface(new Geom_OffsetSurface(S, Offset)); 
    }
EXPORT Handle_Geom_OffsetSurface *_wrap_new_Geom_OffsetSurface (Handle_Geom_Surface *larg1, Standard_Real larg2) {
  Handle_Geom_OffsetSurface * lresult = (Handle_Geom_OffsetSurface *)0 ;
  Handle_Geom_Surface *arg1 = 0 ;
  Standard_Real arg2 ;
  Handle_Geom_OffsetSurface *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom_OffsetSurface *)new_Handle_Geom_OffsetSurface((Handle_Geom_Surface const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_OffsetSurface *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_OffsetSurface_getOffset(Handle_Geom_OffsetSurface *self){
		return (*self)->Offset();	
	}
EXPORT Standard_Real _wrap_Geom_OffsetSurface_getOffset (Handle_Geom_OffsetSurface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_OffsetSurface *arg1 = (Handle_Geom_OffsetSurface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_OffsetSurface_getOffset(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Handle_Geom_Surface Handle_Geom_OffsetSurface_getBasisSurface(Handle_Geom_OffsetSurface *self){
        return (*self)->BasisSurface();	
	}
EXPORT Handle_Geom_Surface *_wrap_Geom_OffsetSurface_getBasisSurface (Handle_Geom_OffsetSurface *larg1) {
  Handle_Geom_Surface * lresult = (Handle_Geom_Surface *)0 ;
  Handle_Geom_OffsetSurface *arg1 = (Handle_Geom_OffsetSurface *) 0 ;
  SwigValueWrapper< Handle_Geom_Surface > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_OffsetSurface_getBasisSurface(arg1);
    lresult = new Handle_Geom_Surface(result);
    return lresult;
  } catch (...) {
    return (Handle_Geom_Surface *)0;
  }
}


EXPORT void _wrap_delete_Geom_OffsetSurface (Handle_Geom_OffsetSurface *larg1) {
  Handle_Geom_OffsetSurface *arg1 = (Handle_Geom_OffsetSurface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_SurfaceOfRevolution *new_Handle_Geom_SurfaceOfRevolution(Handle_Geom_Curve const &C,gp_Ax1 const &A1){
        return new Handle_Geom_SurfaceOfRevolution(new Geom_SurfaceOfRevolution(C, A1));
    }
EXPORT Handle_Geom_SurfaceOfRevolution *_wrap_new_Geom_SurfaceOfRevolution (Handle_Geom_Curve *larg1, gp_Ax1 *larg2) {
  Handle_Geom_SurfaceOfRevolution * lresult = (Handle_Geom_SurfaceOfRevolution *)0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  gp_Ax1 *arg2 = 0 ;
  Handle_Geom_SurfaceOfRevolution *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom_SurfaceOfRevolution *)new_Handle_Geom_SurfaceOfRevolution((Handle_Geom_Curve const &)*arg1,(gp_Ax1 const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_SurfaceOfRevolution *)0;
  }
}


SWIGINTERN gp_Ax1 Handle_Geom_SurfaceOfRevolution_getAxis(Handle_Geom_SurfaceOfRevolution *self){
		return (*self)->Axis();	
	}
EXPORT gp_Ax1 *_wrap_Geom_SurfaceOfRevolution_getAxis (Handle_Geom_SurfaceOfRevolution *larg1) {
  gp_Ax1 * lresult = (gp_Ax1 *)0 ;
  Handle_Geom_SurfaceOfRevolution *arg1 = (Handle_Geom_SurfaceOfRevolution *) 0 ;
  gp_Ax1 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_SurfaceOfRevolution_getAxis(arg1);
    lresult = new gp_Ax1(result);
    return lresult;
  } catch (...) {
    return (gp_Ax1 *)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_SurfaceOfRevolution_getLocation(Handle_Geom_SurfaceOfRevolution *self){
		return (*self)->Location();	
	}
EXPORT gp_Pnt *_wrap_Geom_SurfaceOfRevolution_getLocation (Handle_Geom_SurfaceOfRevolution *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_SurfaceOfRevolution *arg1 = (Handle_Geom_SurfaceOfRevolution *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_SurfaceOfRevolution_getLocation(arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN gp_Ax2 Handle_Geom_SurfaceOfRevolution_getReferencePlane(Handle_Geom_SurfaceOfRevolution *self){
		return (*self)->ReferencePlane();	
	}
EXPORT gp_Ax2 *_wrap_Geom_SurfaceOfRevolution_getReferencePlane (Handle_Geom_SurfaceOfRevolution *larg1) {
  gp_Ax2 * lresult = (gp_Ax2 *)0 ;
  Handle_Geom_SurfaceOfRevolution *arg1 = (Handle_Geom_SurfaceOfRevolution *) 0 ;
  gp_Ax2 result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_SurfaceOfRevolution_getReferencePlane(arg1);
    lresult = new gp_Ax2(result);
    return lresult;
  } catch (...) {
    return (gp_Ax2 *)0;
  }
}


EXPORT void _wrap_delete_Geom_SurfaceOfRevolution (Handle_Geom_SurfaceOfRevolution *larg1) {
  Handle_Geom_SurfaceOfRevolution *arg1 = (Handle_Geom_SurfaceOfRevolution *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_ConicalSurface *new_Handle_Geom_ConicalSurface(gp_Ax3 const &A3,Standard_Real const Ang,Standard_Real const Radius){
		return new Handle_Geom_ConicalSurface(new Geom_ConicalSurface(A3, Ang, Radius));
	}
EXPORT Handle_Geom_ConicalSurface *_wrap_new_Geom_ConicalSurface (gp_Ax3 *larg1, Standard_Real larg2, Standard_Real larg3) {
  Handle_Geom_ConicalSurface * lresult = (Handle_Geom_ConicalSurface *)0 ;
  gp_Ax3 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Handle_Geom_ConicalSurface *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Handle_Geom_ConicalSurface *)new_Handle_Geom_ConicalSurface((gp_Ax3 const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_ConicalSurface *)0;
  }
}


SWIGINTERN gp_Cone Handle_Geom_ConicalSurface_getCone(Handle_Geom_ConicalSurface *self){
		return (*self)->Cone();	
	}
EXPORT gp_Cone *_wrap_Geom_ConicalSurface_getCone (Handle_Geom_ConicalSurface *larg1) {
  gp_Cone * lresult = (gp_Cone *)0 ;
  Handle_Geom_ConicalSurface *arg1 = (Handle_Geom_ConicalSurface *) 0 ;
  SwigValueWrapper< gp_Cone > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_ConicalSurface_getCone(arg1);
    lresult = new gp_Cone(result);
    return lresult;
  } catch (...) {
    return (gp_Cone *)0;
  }
}


SWIGINTERN gp_Pnt Handle_Geom_ConicalSurface_getApex(Handle_Geom_ConicalSurface *self){
		return (*self)->Apex();	
	}
EXPORT gp_Pnt *_wrap_Geom_ConicalSurface_getApex (Handle_Geom_ConicalSurface *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  Handle_Geom_ConicalSurface *arg1 = (Handle_Geom_ConicalSurface *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_ConicalSurface_getApex(arg1);
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


SWIGINTERN void Handle_Geom_ConicalSurface_getCoefficients(Handle_Geom_ConicalSurface *self,Standard_Real &outA1,Standard_Real &outA2,Standard_Real &outA3,Standard_Real &outB1,Standard_Real &outB2,Standard_Real &outB3,Standard_Real &outC1,Standard_Real &outC2,Standard_Real &outC3,Standard_Real &outD){
    	(*self)->Coefficients(outA1, outA2, outA3, outB1, outB2, outB3, outC1, outC2, outC3, outD);
    }
EXPORT void _wrap_Geom_ConicalSurface_getCoefficients (Handle_Geom_ConicalSurface *larg1, Standard_Real *larg2, Standard_Real *larg3, Standard_Real *larg4, Standard_Real *larg5, Standard_Real *larg6, Standard_Real *larg7, Standard_Real *larg8, Standard_Real *larg9, Standard_Real *larg10, Standard_Real *larg11) {
  Handle_Geom_ConicalSurface *arg1 = (Handle_Geom_ConicalSurface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Standard_Real *arg5 = 0 ;
  Standard_Real *arg6 = 0 ;
  Standard_Real *arg7 = 0 ;
  Standard_Real *arg8 = 0 ;
  Standard_Real *arg9 = 0 ;
  Standard_Real *arg10 = 0 ;
  Standard_Real *arg11 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    Handle_Geom_ConicalSurface_getCoefficients(arg1,*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Real Handle_Geom_ConicalSurface_getReferenceRadius(Handle_Geom_ConicalSurface *self){   
		return (*self)->RefRadius();	
	}
EXPORT Standard_Real _wrap_Geom_ConicalSurface_getReferenceRadius (Handle_Geom_ConicalSurface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_ConicalSurface *arg1 = (Handle_Geom_ConicalSurface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_ConicalSurface_getReferenceRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom_ConicalSurface_getSemiAngle(Handle_Geom_ConicalSurface *self){   
		return (*self)->SemiAngle();	
	}
EXPORT Standard_Real _wrap_Geom_ConicalSurface_getSemiAngle (Handle_Geom_ConicalSurface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_ConicalSurface *arg1 = (Handle_Geom_ConicalSurface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_ConicalSurface_getSemiAngle(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Geom_ConicalSurface (Handle_Geom_ConicalSurface *larg1) {
  Handle_Geom_ConicalSurface *arg1 = (Handle_Geom_ConicalSurface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_CylindricalSurface *new_Handle_Geom_CylindricalSurface(gp_Ax3 const &A3,Standard_Real const Radius){
		return new Handle_Geom_CylindricalSurface(new Geom_CylindricalSurface(A3, Radius));
	}
EXPORT Handle_Geom_CylindricalSurface *_wrap_new_Geom_CylindricalSurface (gp_Ax3 *larg1, Standard_Real larg2) {
  Handle_Geom_CylindricalSurface * lresult = (Handle_Geom_CylindricalSurface *)0 ;
  gp_Ax3 *arg1 = 0 ;
  Standard_Real arg2 ;
  Handle_Geom_CylindricalSurface *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom_CylindricalSurface *)new_Handle_Geom_CylindricalSurface((gp_Ax3 const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_CylindricalSurface *)0;
  }
}


SWIGINTERN gp_Cylinder Handle_Geom_CylindricalSurface_getCylinder(Handle_Geom_CylindricalSurface *self){
		return (*self)->Cylinder();	
	}
EXPORT gp_Cylinder *_wrap_Geom_CylindricalSurface_getCylinder (Handle_Geom_CylindricalSurface *larg1) {
  gp_Cylinder * lresult = (gp_Cylinder *)0 ;
  Handle_Geom_CylindricalSurface *arg1 = (Handle_Geom_CylindricalSurface *) 0 ;
  SwigValueWrapper< gp_Cylinder > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_CylindricalSurface_getCylinder(arg1);
    lresult = new gp_Cylinder(result);
    return lresult;
  } catch (...) {
    return (gp_Cylinder *)0;
  }
}


SWIGINTERN void Handle_Geom_CylindricalSurface_getCoefficients(Handle_Geom_CylindricalSurface *self,Standard_Real &outA1,Standard_Real &outA2,Standard_Real &outA3,Standard_Real &outB1,Standard_Real &outB2,Standard_Real &outB3,Standard_Real &outC1,Standard_Real &outC2,Standard_Real &outC3,Standard_Real &outD){
		return (*self)->Coefficients(outA1, outA2, outA3, outB1, outB2, outB3, outC1, outC2, outC3, outD);
	}
EXPORT void _wrap_Geom_CylindricalSurface_getCoefficients (Handle_Geom_CylindricalSurface *larg1, Standard_Real *larg2, Standard_Real *larg3, Standard_Real *larg4, Standard_Real *larg5, Standard_Real *larg6, Standard_Real *larg7, Standard_Real *larg8, Standard_Real *larg9, Standard_Real *larg10, Standard_Real *larg11) {
  Handle_Geom_CylindricalSurface *arg1 = (Handle_Geom_CylindricalSurface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Standard_Real *arg5 = 0 ;
  Standard_Real *arg6 = 0 ;
  Standard_Real *arg7 = 0 ;
  Standard_Real *arg8 = 0 ;
  Standard_Real *arg9 = 0 ;
  Standard_Real *arg10 = 0 ;
  Standard_Real *arg11 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    Handle_Geom_CylindricalSurface_getCoefficients(arg1,*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Real Handle_Geom_CylindricalSurface_getRadius(Handle_Geom_CylindricalSurface *self){   
		return (*self)->Radius();	
	}
EXPORT Standard_Real _wrap_Geom_CylindricalSurface_getRadius (Handle_Geom_CylindricalSurface *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom_CylindricalSurface *arg1 = (Handle_Geom_CylindricalSurface *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom_CylindricalSurface_getRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Geom_CylindricalSurface (Handle_Geom_CylindricalSurface *larg1) {
  Handle_Geom_CylindricalSurface *arg1 = (Handle_Geom_CylindricalSurface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_SurfaceOfLinearExtrusion *new_Handle_Geom_SurfaceOfLinearExtrusion(Handle_Geom_Curve const &C,gp_Dir const &V){
        return new Handle_Geom_SurfaceOfLinearExtrusion(new Geom_SurfaceOfLinearExtrusion(C, V));
    }
EXPORT Handle_Geom_SurfaceOfLinearExtrusion *_wrap_new_Geom_SurfaceOfLinearExtrusion (Handle_Geom_Curve *larg1, gp_Dir *larg2) {
  Handle_Geom_SurfaceOfLinearExtrusion * lresult = (Handle_Geom_SurfaceOfLinearExtrusion *)0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  gp_Dir *arg2 = 0 ;
  Handle_Geom_SurfaceOfLinearExtrusion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom_SurfaceOfLinearExtrusion *)new_Handle_Geom_SurfaceOfLinearExtrusion((Handle_Geom_Curve const &)*arg1,(gp_Dir const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_SurfaceOfLinearExtrusion *)0;
  }
}


EXPORT void _wrap_delete_Geom_SurfaceOfLinearExtrusion (Handle_Geom_SurfaceOfLinearExtrusion *larg1) {
  Handle_Geom_SurfaceOfLinearExtrusion *arg1 = (Handle_Geom_SurfaceOfLinearExtrusion *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom_Plane *new_Handle_Geom_Plane(gp_Ax3 const &A3){
		return new Handle_Geom_Plane(new Geom_Plane(A3));
	}
EXPORT Handle_Geom_Plane *_wrap_new_Geom_Plane (gp_Ax3 *larg1) {
  Handle_Geom_Plane * lresult = (Handle_Geom_Plane *)0 ;
  gp_Ax3 *arg1 = 0 ;
  Handle_Geom_Plane *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Handle_Geom_Plane *)new_Handle_Geom_Plane((gp_Ax3 const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_Plane *)0;
  }
}


SWIGINTERN gp_Pln Handle_Geom_Plane_getPlane(Handle_Geom_Plane *self){
		return (*self)->Pln();	
	}
EXPORT gp_Pln *_wrap_Geom_Plane_getPlane (Handle_Geom_Plane *larg1) {
  gp_Pln * lresult = (gp_Pln *)0 ;
  Handle_Geom_Plane *arg1 = (Handle_Geom_Plane *) 0 ;
  SwigValueWrapper< gp_Pln > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom_Plane_getPlane(arg1);
    lresult = new gp_Pln(result);
    return lresult;
  } catch (...) {
    return (gp_Pln *)0;
  }
}


SWIGINTERN void Handle_Geom_Plane_getCoefficients(Handle_Geom_Plane *self,Standard_Real &outA,Standard_Real &outB,Standard_Real &outC,Standard_Real &outD){
		return (*self)->Coefficients(outA, outB, outC, outD);
	}
EXPORT void _wrap_Geom_Plane_getCoefficients (Handle_Geom_Plane *larg1, Standard_Real *larg2, Standard_Real *larg3, Standard_Real *larg4, Standard_Real *larg5) {
  Handle_Geom_Plane *arg1 = (Handle_Geom_Plane *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Standard_Real *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    Handle_Geom_Plane_getCoefficients(arg1,*arg2,*arg3,*arg4,*arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Geom_Plane (Handle_Geom_Plane *larg1) {
  Handle_Geom_Plane *arg1 = (Handle_Geom_Plane *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Geom2d_Geometry (Handle_Geom2d_Geometry *larg1) {
  Handle_Geom2d_Geometry *arg1 = (Handle_Geom2d_Geometry *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Curve_firstParameter(Handle_Geom2d_Curve *self){
		return (*self)->FirstParameter();
	}
EXPORT Standard_Real _wrap_Geom2d_Curve_firstParameter (Handle_Geom2d_Curve *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Curve *arg1 = (Handle_Geom2d_Curve *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_Curve_firstParameter(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Curve_lastParameter(Handle_Geom2d_Curve *self){
		return (*self)->LastParameter();
	}
EXPORT Standard_Real _wrap_Geom2d_Curve_lastParameter (Handle_Geom2d_Curve *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Curve *arg1 = (Handle_Geom2d_Curve *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_Curve_lastParameter(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom2d_Curve_isClosed(Handle_Geom2d_Curve *self){
		return (*self)->IsClosed();
	}
EXPORT bool _wrap_Geom2d_Curve_isClosed (Handle_Geom2d_Curve *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom2d_Curve *arg1 = (Handle_Geom2d_Curve *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom2d_Curve_isClosed(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Geom2d_Curve_isPeriodic(Handle_Geom2d_Curve *self){
		return (*self)->IsPeriodic();
	}
EXPORT bool _wrap_Geom2d_Curve_isPeriodic (Handle_Geom2d_Curve *larg1) {
  bool lresult = (bool)0 ;
  Handle_Geom2d_Curve *arg1 = (Handle_Geom2d_Curve *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Geom2d_Curve_isPeriodic(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Curve_period(Handle_Geom2d_Curve *self){
		return (*self)->Period();
	}
EXPORT Standard_Real _wrap_Geom2d_Curve_period (Handle_Geom2d_Curve *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Curve *arg1 = (Handle_Geom2d_Curve *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_Curve_period(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN void Handle_Geom2d_Curve_reverse(Handle_Geom2d_Curve *self){
		return (*self)->Reverse();
	}
EXPORT void _wrap_Geom2d_Curve_reverse (Handle_Geom2d_Curve *larg1) {
  Handle_Geom2d_Curve *arg1 = (Handle_Geom2d_Curve *) 0 ;
  
  arg1 = larg1;
  try {
    Handle_Geom2d_Curve_reverse(arg1);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Curve_getReversedParameter(Handle_Geom2d_Curve *self,Standard_Real const U){
		return (*self)->ReversedParameter(U);
	}
EXPORT Standard_Real _wrap_Geom2d_Curve_getReversedParameter (Handle_Geom2d_Curve *larg1, Standard_Real larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Curve *arg1 = (Handle_Geom2d_Curve *) 0 ;
  Standard_Real arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Geom2d_Curve_getReversedParameter(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN gp_Pnt2d Handle_Geom2d_Curve_getValueAt(Handle_Geom2d_Curve *self,Standard_Real const U){
		return (*self)->Value(U);
	}
EXPORT gp_Pnt2d *_wrap_Geom2d_Curve_getValueAt (Handle_Geom2d_Curve *larg1, Standard_Real larg2) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Handle_Geom2d_Curve *arg1 = (Handle_Geom2d_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = Handle_Geom2d_Curve_getValueAt(arg1,arg2);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom2d_Curve_getGeometryType(Handle_Geom2d_Curve *self){
		if (STANDARD_TYPE(Geom2d_Line) == (*self)->DynamicType())
		{
			return 300;
		}
		else if (STANDARD_TYPE(Geom2d_Circle) == (*self)->DynamicType())
		{
			return 301;
		}
		else if (STANDARD_TYPE(Geom2d_Ellipse) == (*self)->DynamicType())
		{
			return 302;
		}
		else if (STANDARD_TYPE(Geom2d_Hyperbola) == (*self)->DynamicType())
		{
			return 303;
		}
		else if (STANDARD_TYPE(Geom2d_Parabola) == (*self)->DynamicType())
		{
			return 304;
		}
		else if (STANDARD_TYPE(Geom2d_OffsetCurve) == (*self)->DynamicType())
		{
			return 305;
		}
		else if (STANDARD_TYPE(Geom2d_BezierCurve) == (*self)->DynamicType())
		{
			return 306;
		}
		else if (STANDARD_TYPE(Geom2d_BSplineCurve) == (*self)->DynamicType())
		{
			return 307;
		}
		else if (STANDARD_TYPE(Geom2d_TrimmedCurve) == (*self)->DynamicType())
		{
			return 308;
		}
		else if (STANDARD_TYPE(Bisector_BisecAna) == (*self)->DynamicType())
		{
			return 309;
		}
		else if (STANDARD_TYPE(Bisector_BisecCC) == (*self)->DynamicType())
		{
			return 310;
		}
		else if (STANDARD_TYPE(Bisector_BisecPC) == (*self)->DynamicType())
		{
			return 311;
		}
		
		return -1;
	}
EXPORT Standard_Integer _wrap_Geom2d_Curve_getGeometryType (Handle_Geom2d_Curve *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom2d_Curve *arg1 = (Handle_Geom2d_Curve *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom2d_Curve_getGeometryType(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT void _wrap_delete_Geom2d_Curve (Handle_Geom2d_Curve *larg1) {
  Handle_Geom2d_Curve *arg1 = (Handle_Geom2d_Curve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom2d_Line *new_Handle_Geom2d_Line__SWIG_0(gp_Ax2d const &A){
		return new Handle_Geom2d_Line(new Geom2d_Line(A));
	}
EXPORT Handle_Geom2d_Line *_wrap_new_Geom2d_Line__SWIG_0 (gp_Ax2d *larg1) {
  Handle_Geom2d_Line * lresult = (Handle_Geom2d_Line *)0 ;
  gp_Ax2d *arg1 = 0 ;
  Handle_Geom2d_Line *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Handle_Geom2d_Line *)new_Handle_Geom2d_Line__SWIG_0((gp_Ax2d const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_Line *)0;
  }
}


SWIGINTERN Handle_Geom2d_Line *new_Handle_Geom2d_Line__SWIG_1(gp_Lin2d const &L){
		return new Handle_Geom2d_Line(new Geom2d_Line(L));
	}
EXPORT Handle_Geom2d_Line *_wrap_new_Geom2d_Line__SWIG_1 (gp_Lin2d *larg1) {
  Handle_Geom2d_Line * lresult = (Handle_Geom2d_Line *)0 ;
  gp_Lin2d *arg1 = 0 ;
  Handle_Geom2d_Line *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Handle_Geom2d_Line *)new_Handle_Geom2d_Line__SWIG_1((gp_Lin2d const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_Line *)0;
  }
}


SWIGINTERN Handle_Geom2d_Line *new_Handle_Geom2d_Line__SWIG_2(gp_Pnt2d const &P,gp_Dir2d const &V){
		return new Handle_Geom2d_Line(new Geom2d_Line(P, V));
	}
EXPORT Handle_Geom2d_Line *_wrap_new_Geom2d_Line__SWIG_2 (gp_Pnt2d *larg1, gp_Dir2d *larg2) {
  Handle_Geom2d_Line * lresult = (Handle_Geom2d_Line *)0 ;
  gp_Pnt2d *arg1 = 0 ;
  gp_Dir2d *arg2 = 0 ;
  Handle_Geom2d_Line *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom2d_Line *)new_Handle_Geom2d_Line__SWIG_2((gp_Pnt2d const &)*arg1,(gp_Dir2d const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_Line *)0;
  }
}


SWIGINTERN gp_Pnt2d Handle_Geom2d_Line_getLocation(Handle_Geom2d_Line *self){
		return (*self)->Location();
	}
EXPORT gp_Pnt2d *_wrap_Geom2d_Line_getLocation (Handle_Geom2d_Line *larg1) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Handle_Geom2d_Line *arg1 = (Handle_Geom2d_Line *) 0 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Line_getLocation(arg1);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


SWIGINTERN gp_Ax2d Handle_Geom2d_Line_getPosition(Handle_Geom2d_Line *self){
		return (*self)->Position();
	}
EXPORT gp_Ax2d *_wrap_Geom2d_Line_getPosition (Handle_Geom2d_Line *larg1) {
  gp_Ax2d * lresult = (gp_Ax2d *)0 ;
  Handle_Geom2d_Line *arg1 = (Handle_Geom2d_Line *) 0 ;
  gp_Ax2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Line_getPosition(arg1);
    lresult = new gp_Ax2d(result);
    return lresult;
  } catch (...) {
    return (gp_Ax2d *)0;
  }
}


EXPORT void _wrap_delete_Geom2d_Line (Handle_Geom2d_Line *larg1) {
  Handle_Geom2d_Line *arg1 = (Handle_Geom2d_Line *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom2d_OffsetCurve *new_Handle_Geom2d_OffsetCurve(Handle_Geom2d_Curve const &C,Standard_Real const Offset){
		return new Handle_Geom2d_OffsetCurve(new Geom2d_OffsetCurve(C, Offset));
	}
EXPORT Handle_Geom2d_OffsetCurve *_wrap_new_Geom2d_OffsetCurve (Handle_Geom2d_Curve *larg1, Standard_Real larg2) {
  Handle_Geom2d_OffsetCurve * lresult = (Handle_Geom2d_OffsetCurve *)0 ;
  Handle_Geom2d_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Handle_Geom2d_OffsetCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom2d_OffsetCurve *)new_Handle_Geom2d_OffsetCurve((Handle_Geom2d_Curve const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_OffsetCurve *)0;
  }
}


SWIGINTERN Handle_Geom2d_Curve Handle_Geom2d_OffsetCurve_getBasisCurve(Handle_Geom2d_OffsetCurve *self){
		return (*self)->BasisCurve();
	}
EXPORT Handle_Geom2d_Curve *_wrap_Geom2d_OffsetCurve_getBasisCurve (Handle_Geom2d_OffsetCurve *larg1) {
  Handle_Geom2d_Curve * lresult = (Handle_Geom2d_Curve *)0 ;
  Handle_Geom2d_OffsetCurve *arg1 = (Handle_Geom2d_OffsetCurve *) 0 ;
  SwigValueWrapper< Handle_Geom2d_Curve > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_OffsetCurve_getBasisCurve(arg1);
    lresult = new Handle_Geom2d_Curve(result);
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_Curve *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_OffsetCurve_getOffset(Handle_Geom2d_OffsetCurve *self){
		return (*self)->Offset();
	}
EXPORT Standard_Real _wrap_Geom2d_OffsetCurve_getOffset (Handle_Geom2d_OffsetCurve *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_OffsetCurve *arg1 = (Handle_Geom2d_OffsetCurve *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_OffsetCurve_getOffset(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Geom2d_OffsetCurve (Handle_Geom2d_OffsetCurve *larg1) {
  Handle_Geom2d_OffsetCurve *arg1 = (Handle_Geom2d_OffsetCurve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN gp_Ax2d Handle_Geom2d_Conic_getXAxis(Handle_Geom2d_Conic *self){
		return (*self)->XAxis();
	}
EXPORT gp_Ax2d *_wrap_Geom2d_Conic_getXAxis (Handle_Geom2d_Conic *larg1) {
  gp_Ax2d * lresult = (gp_Ax2d *)0 ;
  Handle_Geom2d_Conic *arg1 = (Handle_Geom2d_Conic *) 0 ;
  gp_Ax2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Conic_getXAxis(arg1);
    lresult = new gp_Ax2d(result);
    return lresult;
  } catch (...) {
    return (gp_Ax2d *)0;
  }
}


SWIGINTERN gp_Ax2d Handle_Geom2d_Conic_getYAxis(Handle_Geom2d_Conic *self){
		return (*self)->YAxis();
	}
EXPORT gp_Ax2d *_wrap_Geom2d_Conic_getYAxis (Handle_Geom2d_Conic *larg1) {
  gp_Ax2d * lresult = (gp_Ax2d *)0 ;
  Handle_Geom2d_Conic *arg1 = (Handle_Geom2d_Conic *) 0 ;
  gp_Ax2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Conic_getYAxis(arg1);
    lresult = new gp_Ax2d(result);
    return lresult;
  } catch (...) {
    return (gp_Ax2d *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Conic_getEccentricity(Handle_Geom2d_Conic *self){
		return (*self)->Eccentricity();
	}
EXPORT Standard_Real _wrap_Geom2d_Conic_getEccentricity (Handle_Geom2d_Conic *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Conic *arg1 = (Handle_Geom2d_Conic *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_Conic_getEccentricity(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN gp_Pnt2d Handle_Geom2d_Conic_getLocation(Handle_Geom2d_Conic *self){
		return (*self)->Location();
	}
EXPORT gp_Pnt2d *_wrap_Geom2d_Conic_getLocation (Handle_Geom2d_Conic *larg1) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Handle_Geom2d_Conic *arg1 = (Handle_Geom2d_Conic *) 0 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Conic_getLocation(arg1);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


SWIGINTERN gp_Ax22d Handle_Geom2d_Conic_getPosition(Handle_Geom2d_Conic *self){
		return (*self)->Position();
	}
EXPORT gp_Ax22d *_wrap_Geom2d_Conic_getPosition (Handle_Geom2d_Conic *larg1) {
  gp_Ax22d * lresult = (gp_Ax22d *)0 ;
  Handle_Geom2d_Conic *arg1 = (Handle_Geom2d_Conic *) 0 ;
  gp_Ax22d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Conic_getPosition(arg1);
    lresult = new gp_Ax22d(result);
    return lresult;
  } catch (...) {
    return (gp_Ax22d *)0;
  }
}


EXPORT void _wrap_delete_Geom2d_Conic (Handle_Geom2d_Conic *larg1) {
  Handle_Geom2d_Conic *arg1 = (Handle_Geom2d_Conic *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom2d_Circle *new_Handle_Geom2d_Circle(gp_Ax22d const &A,Standard_Real const R){
		return new Handle_Geom2d_Circle(new Geom2d_Circle(A, R));
	}
EXPORT Handle_Geom2d_Circle *_wrap_new_Geom2d_Circle (gp_Ax22d *larg1, Standard_Real larg2) {
  Handle_Geom2d_Circle * lresult = (Handle_Geom2d_Circle *)0 ;
  gp_Ax22d *arg1 = 0 ;
  Standard_Real arg2 ;
  Handle_Geom2d_Circle *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom2d_Circle *)new_Handle_Geom2d_Circle((gp_Ax22d const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_Circle *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Circle_getRadius(Handle_Geom2d_Circle *self){
    return (*self)->Radius();
  }
EXPORT Standard_Real _wrap_Geom2d_Circle_getRadius (Handle_Geom2d_Circle *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Circle *arg1 = (Handle_Geom2d_Circle *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_Circle_getRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Geom2d_Circle (Handle_Geom2d_Circle *larg1) {
  Handle_Geom2d_Circle *arg1 = (Handle_Geom2d_Circle *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom2d_Ellipse *new_Handle_Geom2d_Ellipse(gp_Ax22d const &Axis,Standard_Real const MajorRadius,Standard_Real const MinorRadius){
		return new Handle_Geom2d_Ellipse(new Geom2d_Ellipse(Axis, MajorRadius, MinorRadius));
	}
EXPORT Handle_Geom2d_Ellipse *_wrap_new_Geom2d_Ellipse (gp_Ax22d *larg1, Standard_Real larg2, Standard_Real larg3) {
  Handle_Geom2d_Ellipse * lresult = (Handle_Geom2d_Ellipse *)0 ;
  gp_Ax22d *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Handle_Geom2d_Ellipse *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Handle_Geom2d_Ellipse *)new_Handle_Geom2d_Ellipse((gp_Ax22d const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_Ellipse *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Ellipse_getMajorRadius(Handle_Geom2d_Ellipse *self){
        return (*self)->MajorRadius();
    }
EXPORT Standard_Real _wrap_Geom2d_Ellipse_getMajorRadius (Handle_Geom2d_Ellipse *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Ellipse *arg1 = (Handle_Geom2d_Ellipse *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_Ellipse_getMajorRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Ellipse_getMinorRadius(Handle_Geom2d_Ellipse *self){
        return (*self)->MinorRadius();
    }
EXPORT Standard_Real _wrap_Geom2d_Ellipse_getMinorRadius (Handle_Geom2d_Ellipse *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Ellipse *arg1 = (Handle_Geom2d_Ellipse *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_Ellipse_getMinorRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN gp_Ax2d Handle_Geom2d_Ellipse_getDirectrix1(Handle_Geom2d_Ellipse *self){
		return (*self)->Directrix1();
	}
EXPORT gp_Ax2d *_wrap_Geom2d_Ellipse_getDirectrix1 (Handle_Geom2d_Ellipse *larg1) {
  gp_Ax2d * lresult = (gp_Ax2d *)0 ;
  Handle_Geom2d_Ellipse *arg1 = (Handle_Geom2d_Ellipse *) 0 ;
  gp_Ax2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Ellipse_getDirectrix1(arg1);
    lresult = new gp_Ax2d(result);
    return lresult;
  } catch (...) {
    return (gp_Ax2d *)0;
  }
}


SWIGINTERN gp_Ax2d Handle_Geom2d_Ellipse_getDirectrix2(Handle_Geom2d_Ellipse *self){
		return (*self)->Directrix2();
	}
EXPORT gp_Ax2d *_wrap_Geom2d_Ellipse_getDirectrix2 (Handle_Geom2d_Ellipse *larg1) {
  gp_Ax2d * lresult = (gp_Ax2d *)0 ;
  Handle_Geom2d_Ellipse *arg1 = (Handle_Geom2d_Ellipse *) 0 ;
  gp_Ax2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Ellipse_getDirectrix2(arg1);
    lresult = new gp_Ax2d(result);
    return lresult;
  } catch (...) {
    return (gp_Ax2d *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Ellipse_getFocalDistance(Handle_Geom2d_Ellipse *self){
		return (*self)->Focal();
	}
EXPORT Standard_Real _wrap_Geom2d_Ellipse_getFocalDistance (Handle_Geom2d_Ellipse *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Ellipse *arg1 = (Handle_Geom2d_Ellipse *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_Ellipse_getFocalDistance(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN gp_Pnt2d Handle_Geom2d_Ellipse_getFocus1(Handle_Geom2d_Ellipse *self){
		return (*self)->Focus1();
	}
EXPORT gp_Pnt2d *_wrap_Geom2d_Ellipse_getFocus1 (Handle_Geom2d_Ellipse *larg1) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Handle_Geom2d_Ellipse *arg1 = (Handle_Geom2d_Ellipse *) 0 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Ellipse_getFocus1(arg1);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


SWIGINTERN gp_Pnt2d Handle_Geom2d_Ellipse_getFocus2(Handle_Geom2d_Ellipse *self){
		return (*self)->Focus2();
	}
EXPORT gp_Pnt2d *_wrap_Geom2d_Ellipse_getFocus2 (Handle_Geom2d_Ellipse *larg1) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Handle_Geom2d_Ellipse *arg1 = (Handle_Geom2d_Ellipse *) 0 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Ellipse_getFocus2(arg1);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


EXPORT void _wrap_delete_Geom2d_Ellipse (Handle_Geom2d_Ellipse *larg1) {
  Handle_Geom2d_Ellipse *arg1 = (Handle_Geom2d_Ellipse *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom2d_Hyperbola *new_Handle_Geom2d_Hyperbola(gp_Ax22d const &Axis,Standard_Real const MajorRadius,Standard_Real const MinorRadius){
        return new Handle_Geom2d_Hyperbola(new Geom2d_Hyperbola(Axis, MajorRadius, MinorRadius));
    }
EXPORT Handle_Geom2d_Hyperbola *_wrap_new_Geom2d_Hyperbola (gp_Ax22d *larg1, Standard_Real larg2, Standard_Real larg3) {
  Handle_Geom2d_Hyperbola * lresult = (Handle_Geom2d_Hyperbola *)0 ;
  gp_Ax22d *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Handle_Geom2d_Hyperbola *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Handle_Geom2d_Hyperbola *)new_Handle_Geom2d_Hyperbola((gp_Ax22d const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_Hyperbola *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Hyperbola_getMajorRadius(Handle_Geom2d_Hyperbola *self){
        return (*self)->MajorRadius();
    }
EXPORT Standard_Real _wrap_Geom2d_Hyperbola_getMajorRadius (Handle_Geom2d_Hyperbola *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Hyperbola *arg1 = (Handle_Geom2d_Hyperbola *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_Hyperbola_getMajorRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Hyperbola_getMinorRadius(Handle_Geom2d_Hyperbola *self){
        return (*self)->MinorRadius();
    }
EXPORT Standard_Real _wrap_Geom2d_Hyperbola_getMinorRadius (Handle_Geom2d_Hyperbola *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Hyperbola *arg1 = (Handle_Geom2d_Hyperbola *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_Hyperbola_getMinorRadius(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN gp_Ax2d Handle_Geom2d_Hyperbola_getDirectrix1(Handle_Geom2d_Hyperbola *self){
        return (*self)->Directrix1();
    }
EXPORT gp_Ax2d *_wrap_Geom2d_Hyperbola_getDirectrix1 (Handle_Geom2d_Hyperbola *larg1) {
  gp_Ax2d * lresult = (gp_Ax2d *)0 ;
  Handle_Geom2d_Hyperbola *arg1 = (Handle_Geom2d_Hyperbola *) 0 ;
  gp_Ax2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Hyperbola_getDirectrix1(arg1);
    lresult = new gp_Ax2d(result);
    return lresult;
  } catch (...) {
    return (gp_Ax2d *)0;
  }
}


SWIGINTERN gp_Ax2d Handle_Geom2d_Hyperbola_getDirectrix2(Handle_Geom2d_Hyperbola *self){
        return (*self)->Directrix2();
    }
EXPORT gp_Ax2d *_wrap_Geom2d_Hyperbola_getDirectrix2 (Handle_Geom2d_Hyperbola *larg1) {
  gp_Ax2d * lresult = (gp_Ax2d *)0 ;
  Handle_Geom2d_Hyperbola *arg1 = (Handle_Geom2d_Hyperbola *) 0 ;
  gp_Ax2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Hyperbola_getDirectrix2(arg1);
    lresult = new gp_Ax2d(result);
    return lresult;
  } catch (...) {
    return (gp_Ax2d *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Hyperbola_getFocalDistance(Handle_Geom2d_Hyperbola *self){
        return (*self)->Focal();
    }
EXPORT Standard_Real _wrap_Geom2d_Hyperbola_getFocalDistance (Handle_Geom2d_Hyperbola *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Hyperbola *arg1 = (Handle_Geom2d_Hyperbola *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_Hyperbola_getFocalDistance(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN gp_Pnt2d Handle_Geom2d_Hyperbola_getFocus1(Handle_Geom2d_Hyperbola *self){
        return (*self)->Focus1();
    }
EXPORT gp_Pnt2d *_wrap_Geom2d_Hyperbola_getFocus1 (Handle_Geom2d_Hyperbola *larg1) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Handle_Geom2d_Hyperbola *arg1 = (Handle_Geom2d_Hyperbola *) 0 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Hyperbola_getFocus1(arg1);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


SWIGINTERN gp_Pnt2d Handle_Geom2d_Hyperbola_getFocus2(Handle_Geom2d_Hyperbola *self){
        return (*self)->Focus2();
    }
EXPORT gp_Pnt2d *_wrap_Geom2d_Hyperbola_getFocus2 (Handle_Geom2d_Hyperbola *larg1) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Handle_Geom2d_Hyperbola *arg1 = (Handle_Geom2d_Hyperbola *) 0 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Hyperbola_getFocus2(arg1);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


EXPORT void _wrap_delete_Geom2d_Hyperbola (Handle_Geom2d_Hyperbola *larg1) {
  Handle_Geom2d_Hyperbola *arg1 = (Handle_Geom2d_Hyperbola *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom2d_Parabola *new_Handle_Geom2d_Parabola__SWIG_0(gp_Ax22d const &Axis,Standard_Real const Focal){
        return new Handle_Geom2d_Parabola(new Geom2d_Parabola(Axis, Focal));
    }
EXPORT Handle_Geom2d_Parabola *_wrap_new_Geom2d_Parabola__SWIG_0 (gp_Ax22d *larg1, Standard_Real larg2) {
  Handle_Geom2d_Parabola * lresult = (Handle_Geom2d_Parabola *)0 ;
  gp_Ax22d *arg1 = 0 ;
  Standard_Real arg2 ;
  Handle_Geom2d_Parabola *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom2d_Parabola *)new_Handle_Geom2d_Parabola__SWIG_0((gp_Ax22d const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_Parabola *)0;
  }
}


SWIGINTERN Handle_Geom2d_Parabola *new_Handle_Geom2d_Parabola__SWIG_1(gp_Ax2d const &D,gp_Pnt2d const &F){
        return new Handle_Geom2d_Parabola(new Geom2d_Parabola(D, F));
    }
EXPORT Handle_Geom2d_Parabola *_wrap_new_Geom2d_Parabola__SWIG_1 (gp_Ax2d *larg1, gp_Pnt2d *larg2) {
  Handle_Geom2d_Parabola * lresult = (Handle_Geom2d_Parabola *)0 ;
  gp_Ax2d *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  Handle_Geom2d_Parabola *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom2d_Parabola *)new_Handle_Geom2d_Parabola__SWIG_1((gp_Ax2d const &)*arg1,(gp_Pnt2d const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_Parabola *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_Parabola_getFocalDistance(Handle_Geom2d_Parabola *self){
        return (*self)->Focal();
    }
EXPORT Standard_Real _wrap_Geom2d_Parabola_getFocalDistance (Handle_Geom2d_Parabola *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_Parabola *arg1 = (Handle_Geom2d_Parabola *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)Handle_Geom2d_Parabola_getFocalDistance(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN gp_Pnt2d Handle_Geom2d_Parabola_getFocus(Handle_Geom2d_Parabola *self){
        return (*self)->Focus();
    }
EXPORT gp_Pnt2d *_wrap_Geom2d_Parabola_getFocus (Handle_Geom2d_Parabola *larg1) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Handle_Geom2d_Parabola *arg1 = (Handle_Geom2d_Parabola *) 0 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Parabola_getFocus(arg1);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


SWIGINTERN gp_Ax2d Handle_Geom2d_Parabola_getDirectrix(Handle_Geom2d_Parabola *self){
        return (*self)->Directrix();
    }
EXPORT gp_Ax2d *_wrap_Geom2d_Parabola_getDirectrix (Handle_Geom2d_Parabola *larg1) {
  gp_Ax2d * lresult = (gp_Ax2d *)0 ;
  Handle_Geom2d_Parabola *arg1 = (Handle_Geom2d_Parabola *) 0 ;
  gp_Ax2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_Parabola_getDirectrix(arg1);
    lresult = new gp_Ax2d(result);
    return lresult;
  } catch (...) {
    return (gp_Ax2d *)0;
  }
}


EXPORT void _wrap_delete_Geom2d_Parabola (Handle_Geom2d_Parabola *larg1) {
  Handle_Geom2d_Parabola *arg1 = (Handle_Geom2d_Parabola *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN gp_Pnt2d Handle_Geom2d_BoundedCurve_getEndPoint(Handle_Geom2d_BoundedCurve *self){
		return (*self)->EndPoint();
	}
EXPORT gp_Pnt2d *_wrap_Geom2d_BoundedCurve_getEndPoint (Handle_Geom2d_BoundedCurve *larg1) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Handle_Geom2d_BoundedCurve *arg1 = (Handle_Geom2d_BoundedCurve *) 0 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_BoundedCurve_getEndPoint(arg1);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


SWIGINTERN gp_Pnt2d Handle_Geom2d_BoundedCurve_getStartPoint(Handle_Geom2d_BoundedCurve *self){
		return (*self)->StartPoint();
	}
EXPORT gp_Pnt2d *_wrap_Geom2d_BoundedCurve_getStartPoint (Handle_Geom2d_BoundedCurve *larg1) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Handle_Geom2d_BoundedCurve *arg1 = (Handle_Geom2d_BoundedCurve *) 0 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_BoundedCurve_getStartPoint(arg1);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


EXPORT void _wrap_delete_Geom2d_BoundedCurve (Handle_Geom2d_BoundedCurve *larg1) {
  Handle_Geom2d_BoundedCurve *arg1 = (Handle_Geom2d_BoundedCurve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom2d_BezierCurve *new_Handle_Geom2d_BezierCurve(TColgp_Array1OfPnt2d const &CurvePoles,TColStd_Array1OfReal const &PoleWeights){
        return new Handle_Geom2d_BezierCurve(new Geom2d_BezierCurve(CurvePoles, PoleWeights));
    }
EXPORT Handle_Geom2d_BezierCurve *_wrap_new_Geom2d_BezierCurve (TColgp_Array1OfPnt2d *larg1, TColStd_Array1OfReal *larg2) {
  Handle_Geom2d_BezierCurve * lresult = (Handle_Geom2d_BezierCurve *)0 ;
  TColgp_Array1OfPnt2d *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  Handle_Geom2d_BezierCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Handle_Geom2d_BezierCurve *)new_Handle_Geom2d_BezierCurve((TColgp_Array1OfPnt2d const &)*arg1,(TColStd_Array1OfReal const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_BezierCurve *)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom2d_BezierCurve_getControlPointsCount(Handle_Geom2d_BezierCurve *self){
        return (*self)->NbPoles();
    }
EXPORT Standard_Integer _wrap_Geom2d_BezierCurve_getControlPointsCount (Handle_Geom2d_BezierCurve *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom2d_BezierCurve *arg1 = (Handle_Geom2d_BezierCurve *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom2d_BezierCurve_getControlPointsCount(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN gp_Pnt2d Handle_Geom2d_BezierCurve_getControlPoint(Handle_Geom2d_BezierCurve *self,Standard_Integer const Index){
        return (*self)->Pole(Index);
    }
EXPORT gp_Pnt2d *_wrap_Geom2d_BezierCurve_getControlPoint (Handle_Geom2d_BezierCurve *larg1, Standard_Integer larg2) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Handle_Geom2d_BezierCurve *arg1 = (Handle_Geom2d_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = Handle_Geom2d_BezierCurve_getControlPoint(arg1,arg2);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_BezierCurve_getWeight(Handle_Geom2d_BezierCurve *self,Standard_Integer const Index){
        return (*self)->Weight(Index);
    }
EXPORT Standard_Real _wrap_Geom2d_BezierCurve_getWeight (Handle_Geom2d_BezierCurve *larg1, Standard_Integer larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_BezierCurve *arg1 = (Handle_Geom2d_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Geom2d_BezierCurve_getWeight(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Geom2d_BezierCurve (Handle_Geom2d_BezierCurve *larg1) {
  Handle_Geom2d_BezierCurve *arg1 = (Handle_Geom2d_BezierCurve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom2d_BSplineCurve *new_Handle_Geom2d_BSplineCurve__SWIG_0(TColgp_Array1OfPnt2d const &Poles,TColStd_Array1OfReal const &Knots,TColStd_Array1OfInteger const &Multiplicities,Standard_Integer const Degree,Standard_Boolean const Periodic=Standard_False){
	    return new Handle_Geom2d_BSplineCurve(new Geom2d_BSplineCurve(Poles, Knots, Multiplicities,
            Degree, Periodic));
	}
EXPORT Handle_Geom2d_BSplineCurve *_wrap_new_Geom2d_BSplineCurve__SWIG_0 (TColgp_Array1OfPnt2d *larg1, TColStd_Array1OfReal *larg2, TColStd_Array1OfInteger *larg3, Standard_Integer larg4, bool larg5) {
  Handle_Geom2d_BSplineCurve * lresult = (Handle_Geom2d_BSplineCurve *)0 ;
  TColgp_Array1OfPnt2d *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  TColStd_Array1OfInteger *arg3 = 0 ;
  Standard_Integer arg4 ;
  Standard_Boolean arg5 ;
  Handle_Geom2d_BSplineCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    result = (Handle_Geom2d_BSplineCurve *)new_Handle_Geom2d_BSplineCurve__SWIG_0((TColgp_Array1OfPnt2d const &)*arg1,(TColStd_Array1OfReal const &)*arg2,(TColStd_Array1OfInteger const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_BSplineCurve *)0;
  }
}


EXPORT Handle_Geom2d_BSplineCurve *_wrap_new_Geom2d_BSplineCurve__SWIG_1 (TColgp_Array1OfPnt2d *larg1, TColStd_Array1OfReal *larg2, TColStd_Array1OfInteger *larg3, Standard_Integer larg4) {
  Handle_Geom2d_BSplineCurve * lresult = (Handle_Geom2d_BSplineCurve *)0 ;
  TColgp_Array1OfPnt2d *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  TColStd_Array1OfInteger *arg3 = 0 ;
  Standard_Integer arg4 ;
  Handle_Geom2d_BSplineCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (Handle_Geom2d_BSplineCurve *)new_Handle_Geom2d_BSplineCurve__SWIG_0((TColgp_Array1OfPnt2d const &)*arg1,(TColStd_Array1OfReal const &)*arg2,(TColStd_Array1OfInteger const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_BSplineCurve *)0;
  }
}


SWIGINTERN Handle_Geom2d_BSplineCurve *new_Handle_Geom2d_BSplineCurve__SWIG_2(TColgp_Array1OfPnt2d const &Poles,TColStd_Array1OfReal const &Weights,TColStd_Array1OfReal const &Knots,TColStd_Array1OfInteger const &Multiplicities,Standard_Integer const Degree,Standard_Boolean const Periodic=Standard_False){
        return new Handle_Geom2d_BSplineCurve(new Geom2d_BSplineCurve(Poles, Weights, Knots, 
            Multiplicities, Degree, Periodic));
    }
EXPORT Handle_Geom2d_BSplineCurve *_wrap_new_Geom2d_BSplineCurve__SWIG_2 (TColgp_Array1OfPnt2d *larg1, TColStd_Array1OfReal *larg2, TColStd_Array1OfReal *larg3, TColStd_Array1OfInteger *larg4, Standard_Integer larg5, bool larg6) {
  Handle_Geom2d_BSplineCurve * lresult = (Handle_Geom2d_BSplineCurve *)0 ;
  TColgp_Array1OfPnt2d *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  TColStd_Array1OfReal *arg3 = 0 ;
  TColStd_Array1OfInteger *arg4 = 0 ;
  Standard_Integer arg5 ;
  Standard_Boolean arg6 ;
  Handle_Geom2d_BSplineCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (Handle_Geom2d_BSplineCurve *)new_Handle_Geom2d_BSplineCurve__SWIG_2((TColgp_Array1OfPnt2d const &)*arg1,(TColStd_Array1OfReal const &)*arg2,(TColStd_Array1OfReal const &)*arg3,(TColStd_Array1OfInteger const &)*arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_BSplineCurve *)0;
  }
}


EXPORT Handle_Geom2d_BSplineCurve *_wrap_new_Geom2d_BSplineCurve__SWIG_3 (TColgp_Array1OfPnt2d *larg1, TColStd_Array1OfReal *larg2, TColStd_Array1OfReal *larg3, TColStd_Array1OfInteger *larg4, Standard_Integer larg5) {
  Handle_Geom2d_BSplineCurve * lresult = (Handle_Geom2d_BSplineCurve *)0 ;
  TColgp_Array1OfPnt2d *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  TColStd_Array1OfReal *arg3 = 0 ;
  TColStd_Array1OfInteger *arg4 = 0 ;
  Standard_Integer arg5 ;
  Handle_Geom2d_BSplineCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (Handle_Geom2d_BSplineCurve *)new_Handle_Geom2d_BSplineCurve__SWIG_2((TColgp_Array1OfPnt2d const &)*arg1,(TColStd_Array1OfReal const &)*arg2,(TColStd_Array1OfReal const &)*arg3,(TColStd_Array1OfInteger const &)*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_BSplineCurve *)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom2d_BSplineCurve_getDegree(Handle_Geom2d_BSplineCurve *self){
        return (*self)->Degree();
    }
EXPORT Standard_Integer _wrap_Geom2d_BSplineCurve_getDegree (Handle_Geom2d_BSplineCurve *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom2d_BSplineCurve *arg1 = (Handle_Geom2d_BSplineCurve *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom2d_BSplineCurve_getDegree(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN gp_Pnt2d Handle_Geom2d_BSplineCurve_getControlPoint(Handle_Geom2d_BSplineCurve *self,Standard_Integer const Index){
        return (*self)->Pole(Index);
    }
EXPORT gp_Pnt2d *_wrap_Geom2d_BSplineCurve_getControlPoint (Handle_Geom2d_BSplineCurve *larg1, Standard_Integer larg2) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Handle_Geom2d_BSplineCurve *arg1 = (Handle_Geom2d_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = Handle_Geom2d_BSplineCurve_getControlPoint(arg1,arg2);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_BSplineCurve_getWeight(Handle_Geom2d_BSplineCurve *self,Standard_Integer const Index){
        return (*self)->Weight(Index);
    }
EXPORT Standard_Real _wrap_Geom2d_BSplineCurve_getWeight (Handle_Geom2d_BSplineCurve *larg1, Standard_Integer larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_BSplineCurve *arg1 = (Handle_Geom2d_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Geom2d_BSplineCurve_getWeight(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Geom2d_BSplineCurve_getKnot(Handle_Geom2d_BSplineCurve *self,Standard_Integer const Index){
        return (*self)->Knot(Index);
    }
EXPORT Standard_Real _wrap_Geom2d_BSplineCurve_getKnot (Handle_Geom2d_BSplineCurve *larg1, Standard_Integer larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Geom2d_BSplineCurve *arg1 = (Handle_Geom2d_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Geom2d_BSplineCurve_getKnot(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom2d_BSplineCurve_getMultiplicity(Handle_Geom2d_BSplineCurve *self,Standard_Integer const Index){
        return (*self)->Multiplicity(Index);
    }
EXPORT Standard_Integer _wrap_Geom2d_BSplineCurve_getMultiplicity (Handle_Geom2d_BSplineCurve *larg1, Standard_Integer larg2) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom2d_BSplineCurve *arg1 = (Handle_Geom2d_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Integer)Handle_Geom2d_BSplineCurve_getMultiplicity(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom2d_BSplineCurve_getKnotsCount(Handle_Geom2d_BSplineCurve *self){
        return(*self)->NbKnots();
    }
EXPORT Standard_Integer _wrap_Geom2d_BSplineCurve_getKnotsCount (Handle_Geom2d_BSplineCurve *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom2d_BSplineCurve *arg1 = (Handle_Geom2d_BSplineCurve *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom2d_BSplineCurve_getKnotsCount(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Integer Handle_Geom2d_BSplineCurve_getControlPointsCount(Handle_Geom2d_BSplineCurve *self){
        return(*self)->NbPoles();
    }
EXPORT Standard_Integer _wrap_Geom2d_BSplineCurve_getControlPointsCount (Handle_Geom2d_BSplineCurve *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Geom2d_BSplineCurve *arg1 = (Handle_Geom2d_BSplineCurve *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Geom2d_BSplineCurve_getControlPointsCount(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT void _wrap_delete_Geom2d_BSplineCurve (Handle_Geom2d_BSplineCurve *larg1) {
  Handle_Geom2d_BSplineCurve *arg1 = (Handle_Geom2d_BSplineCurve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Geom2d_TrimmedCurve *new_Handle_Geom2d_TrimmedCurve__SWIG_0(Handle_Geom2d_Curve const &C,Standard_Real const U1,Standard_Real const U2,Standard_Boolean const Sense=Standard_True){
		return new Handle_Geom2d_TrimmedCurve(new Geom2d_TrimmedCurve(C, U1, U2, Sense));
	}
EXPORT Handle_Geom2d_TrimmedCurve *_wrap_new_Geom2d_TrimmedCurve__SWIG_0 (Handle_Geom2d_Curve *larg1, Standard_Real larg2, Standard_Real larg3, bool larg4) {
  Handle_Geom2d_TrimmedCurve * lresult = (Handle_Geom2d_TrimmedCurve *)0 ;
  Handle_Geom2d_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 ;
  Handle_Geom2d_TrimmedCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (Handle_Geom2d_TrimmedCurve *)new_Handle_Geom2d_TrimmedCurve__SWIG_0((Handle_Geom2d_Curve const &)*arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_TrimmedCurve *)0;
  }
}


EXPORT Handle_Geom2d_TrimmedCurve *_wrap_new_Geom2d_TrimmedCurve__SWIG_1 (Handle_Geom2d_Curve *larg1, Standard_Real larg2, Standard_Real larg3) {
  Handle_Geom2d_TrimmedCurve * lresult = (Handle_Geom2d_TrimmedCurve *)0 ;
  Handle_Geom2d_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Handle_Geom2d_TrimmedCurve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Handle_Geom2d_TrimmedCurve *)new_Handle_Geom2d_TrimmedCurve__SWIG_0((Handle_Geom2d_Curve const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_TrimmedCurve *)0;
  }
}


SWIGINTERN Handle_Geom2d_Curve Handle_Geom2d_TrimmedCurve_getBasisCurve(Handle_Geom2d_TrimmedCurve *self){
    return (*self)->BasisCurve();
  }
EXPORT Handle_Geom2d_Curve *_wrap_Geom2d_TrimmedCurve_getBasisCurve (Handle_Geom2d_TrimmedCurve *larg1) {
  Handle_Geom2d_Curve * lresult = (Handle_Geom2d_Curve *)0 ;
  Handle_Geom2d_TrimmedCurve *arg1 = (Handle_Geom2d_TrimmedCurve *) 0 ;
  SwigValueWrapper< Handle_Geom2d_Curve > result;
  
  arg1 = larg1;
  try {
    result = Handle_Geom2d_TrimmedCurve_getBasisCurve(arg1);
    lresult = new Handle_Geom2d_Curve(result);
    return lresult;
  } catch (...) {
    return (Handle_Geom2d_Curve *)0;
  }
}


EXPORT void _wrap_delete_Geom2d_TrimmedCurve (Handle_Geom2d_TrimmedCurve *larg1) {
  Handle_Geom2d_TrimmedCurve *arg1 = (Handle_Geom2d_TrimmedCurve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Real Handle_Bisector_Curve_getParameter(Handle_Bisector_Curve *self,gp_Pnt2d const &P){
		return (*self)->Parameter(P);
	}
EXPORT Standard_Real _wrap_Bisector_Curve_getParameter (Handle_Bisector_Curve *larg1, gp_Pnt2d *larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Bisector_Curve *arg1 = (Handle_Bisector_Curve *) 0 ;
  gp_Pnt2d *arg2 = 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Bisector_Curve_getParameter(arg1,(gp_Pnt2d const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Bisector_Curve_isExtendAtStart(Handle_Bisector_Curve *self){
		return (*self)->IsExtendAtStart();
	}
EXPORT bool _wrap_Bisector_Curve_isExtendAtStart (Handle_Bisector_Curve *larg1) {
  bool lresult = (bool)0 ;
  Handle_Bisector_Curve *arg1 = (Handle_Bisector_Curve *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Bisector_Curve_isExtendAtStart(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Boolean Handle_Bisector_Curve_isExtendAtEnd(Handle_Bisector_Curve *self){
		return (*self)->IsExtendAtEnd();
	}
EXPORT bool _wrap_Bisector_Curve_isExtendAtEnd (Handle_Bisector_Curve *larg1) {
  bool lresult = (bool)0 ;
  Handle_Bisector_Curve *arg1 = (Handle_Bisector_Curve *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)Handle_Bisector_Curve_isExtendAtEnd(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN Standard_Integer Handle_Bisector_Curve_getNumberOfIntervals(Handle_Bisector_Curve *self){
		return (*self)->NbIntervals();
	}
EXPORT Standard_Integer _wrap_Bisector_Curve_getNumberOfIntervals (Handle_Bisector_Curve *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  Handle_Bisector_Curve *arg1 = (Handle_Bisector_Curve *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)Handle_Bisector_Curve_getNumberOfIntervals(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


SWIGINTERN Standard_Real Handle_Bisector_Curve_getIntervalFirst(Handle_Bisector_Curve *self,Standard_Integer const index){
		return (*self)->IntervalFirst(index);
	}
EXPORT Standard_Real _wrap_Bisector_Curve_getIntervalFirst (Handle_Bisector_Curve *larg1, Standard_Integer larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Bisector_Curve *arg1 = (Handle_Bisector_Curve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Bisector_Curve_getIntervalFirst(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


SWIGINTERN Standard_Real Handle_Bisector_Curve_getIntervalLast(Handle_Bisector_Curve *self,Standard_Integer const index){
		return (*self)->IntervalLast(index);
	}
EXPORT Standard_Real _wrap_Bisector_Curve_getIntervalLast (Handle_Bisector_Curve *larg1, Standard_Integer larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  Handle_Bisector_Curve *arg1 = (Handle_Bisector_Curve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)Handle_Bisector_Curve_getIntervalLast(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_Bisector_Curve (Handle_Bisector_Curve *larg1) {
  Handle_Bisector_Curve *arg1 = (Handle_Bisector_Curve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Bisector_BisecAna (Handle_Bisector_BisecAna *larg1) {
  Handle_Bisector_BisecAna *arg1 = (Handle_Bisector_BisecAna *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Bisector_BisecCC *new_Handle_Bisector_BisecCC__SWIG_0(Handle_Geom2d_Curve const &Cu1,Handle_Geom2d_Curve const &Cu2,Standard_Real const Side1,Standard_Real const Side2,gp_Pnt2d const &Origin,Standard_Real const DistMax=500){
    return new Handle_Bisector_BisecCC(new Bisector_BisecCC(Cu1, Cu2, Side1, Side2, Origin, DistMax));
    }
EXPORT Handle_Bisector_BisecCC *_wrap_new_Bisector_BisecCC__SWIG_0 (Handle_Geom2d_Curve *larg1, Handle_Geom2d_Curve *larg2, Standard_Real larg3, Standard_Real larg4, gp_Pnt2d *larg5, Standard_Real larg6) {
  Handle_Bisector_BisecCC * lresult = (Handle_Bisector_BisecCC *)0 ;
  Handle_Geom2d_Curve *arg1 = 0 ;
  Handle_Geom2d_Curve *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  gp_Pnt2d *arg5 = 0 ;
  Standard_Real arg6 ;
  Handle_Bisector_BisecCC *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (Handle_Bisector_BisecCC *)new_Handle_Bisector_BisecCC__SWIG_0((Handle_Geom2d_Curve const &)*arg1,(Handle_Geom2d_Curve const &)*arg2,arg3,arg4,(gp_Pnt2d const &)*arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Bisector_BisecCC *)0;
  }
}


EXPORT Handle_Bisector_BisecCC *_wrap_new_Bisector_BisecCC__SWIG_1 (Handle_Geom2d_Curve *larg1, Handle_Geom2d_Curve *larg2, Standard_Real larg3, Standard_Real larg4, gp_Pnt2d *larg5) {
  Handle_Bisector_BisecCC * lresult = (Handle_Bisector_BisecCC *)0 ;
  Handle_Geom2d_Curve *arg1 = 0 ;
  Handle_Geom2d_Curve *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  gp_Pnt2d *arg5 = 0 ;
  Handle_Bisector_BisecCC *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (Handle_Bisector_BisecCC *)new_Handle_Bisector_BisecCC__SWIG_0((Handle_Geom2d_Curve const &)*arg1,(Handle_Geom2d_Curve const &)*arg2,arg3,arg4,(gp_Pnt2d const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Bisector_BisecCC *)0;
  }
}


EXPORT void _wrap_delete_Bisector_BisecCC (Handle_Bisector_BisecCC *larg1) {
  Handle_Bisector_BisecCC *arg1 = (Handle_Bisector_BisecCC *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_Bisector_BisecPC *new_Handle_Bisector_BisecPC__SWIG_0(Handle_Geom2d_Curve const &Cu,gp_Pnt2d const &P,Standard_Real const Side,Standard_Real const DistMax=500){
        return new Handle_Bisector_BisecPC(new Bisector_BisecPC(Cu, P, Side, DistMax));
    }
EXPORT Handle_Bisector_BisecPC *_wrap_new_Bisector_BisecPC__SWIG_0 (Handle_Geom2d_Curve *larg1, gp_Pnt2d *larg2, Standard_Real larg3, Standard_Real larg4) {
  Handle_Bisector_BisecPC * lresult = (Handle_Bisector_BisecPC *)0 ;
  Handle_Geom2d_Curve *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Handle_Bisector_BisecPC *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (Handle_Bisector_BisecPC *)new_Handle_Bisector_BisecPC__SWIG_0((Handle_Geom2d_Curve const &)*arg1,(gp_Pnt2d const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Bisector_BisecPC *)0;
  }
}


EXPORT Handle_Bisector_BisecPC *_wrap_new_Bisector_BisecPC__SWIG_1 (Handle_Geom2d_Curve *larg1, gp_Pnt2d *larg2, Standard_Real larg3) {
  Handle_Bisector_BisecPC * lresult = (Handle_Bisector_BisecPC *)0 ;
  Handle_Geom2d_Curve *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  Standard_Real arg3 ;
  Handle_Bisector_BisecPC *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Handle_Bisector_BisecPC *)new_Handle_Bisector_BisecPC__SWIG_0((Handle_Geom2d_Curve const &)*arg1,(gp_Pnt2d const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Bisector_BisecPC *)0;
  }
}


EXPORT void _wrap_delete_Bisector_BisecPC (Handle_Bisector_BisecPC *larg1) {
  Handle_Bisector_BisecPC *arg1 = (Handle_Bisector_BisecPC *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <BRepLib.hxx>

EXPORT void _wrap_BRepLib_encodeRegularity__SWIG_0 (TopoDS_Shape *larg1, Standard_Real larg2) {
  TopoDS_Shape *arg1 = 0 ;
  Standard_Real arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    BRepLib::EncodeRegularity((TopoDS_Shape const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepLib_encodeRegularity__SWIG_1 (TopoDS_Shape *larg1) {
  TopoDS_Shape *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    BRepLib::EncodeRegularity((TopoDS_Shape const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_BRepLib (BRepLib *larg1) {
  BRepLib *arg1 = (BRepLib *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <BRepFilletAPI_MakeFillet.hxx>
#include <BRepFilletAPI_MakeChamfer.hxx>
  
EXPORT void _wrap_delete_BRepFilletAPI_LocalOperation (BRepFilletAPI_LocalOperation *larg1) {
  BRepFilletAPI_LocalOperation *arg1 = (BRepFilletAPI_LocalOperation *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepFilletAPI_MakeFillet *_wrap_new_BRepFilletAPI_MakeFillet__SWIG_0 (TopoDS_Shape *larg1, ChFi3d_FilletShape larg2) {
  BRepFilletAPI_MakeFillet * lresult = (BRepFilletAPI_MakeFillet *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  ChFi3d_FilletShape arg2 ;
  BRepFilletAPI_MakeFillet *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepFilletAPI_MakeFillet *)new BRepFilletAPI_MakeFillet((TopoDS_Shape const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepFilletAPI_MakeFillet *)0;
  }
}


EXPORT BRepFilletAPI_MakeFillet *_wrap_new_BRepFilletAPI_MakeFillet__SWIG_1 (TopoDS_Shape *larg1) {
  BRepFilletAPI_MakeFillet * lresult = (BRepFilletAPI_MakeFillet *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  BRepFilletAPI_MakeFillet *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepFilletAPI_MakeFillet *)new BRepFilletAPI_MakeFillet((TopoDS_Shape const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepFilletAPI_MakeFillet *)0;
  }
}


EXPORT void _wrap_BRepFilletAPI_MakeFillet_add (BRepFilletAPI_MakeFillet *larg1, Standard_Real larg2, TopoDS_Edge *larg3) {
  BRepFilletAPI_MakeFillet *arg1 = (BRepFilletAPI_MakeFillet *) 0 ;
  Standard_Real arg2 ;
  TopoDS_Edge *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->Add(arg2,(TopoDS_Edge const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_BRepFilletAPI_MakeFillet (BRepFilletAPI_MakeFillet *larg1) {
  BRepFilletAPI_MakeFillet *arg1 = (BRepFilletAPI_MakeFillet *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT BRepFilletAPI_MakeChamfer *_wrap_new_BRepFilletAPI_MakeChamfer (TopoDS_Shape *larg1) {
  BRepFilletAPI_MakeChamfer * lresult = (BRepFilletAPI_MakeChamfer *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  BRepFilletAPI_MakeChamfer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepFilletAPI_MakeChamfer *)new BRepFilletAPI_MakeChamfer((TopoDS_Shape const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepFilletAPI_MakeChamfer *)0;
  }
}


EXPORT void _wrap_BRepFilletAPI_MakeChamfer_add (BRepFilletAPI_MakeChamfer *larg1, Standard_Real larg2, TopoDS_Edge *larg3, TopoDS_Face *larg4) {
  BRepFilletAPI_MakeChamfer *arg1 = (BRepFilletAPI_MakeChamfer *) 0 ;
  Standard_Real arg2 ;
  TopoDS_Edge *arg3 = 0 ;
  TopoDS_Face *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->Add(arg2,(TopoDS_Edge const &)*arg3,(TopoDS_Face const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_BRepFilletAPI_MakeChamfer (BRepFilletAPI_MakeChamfer *larg1) {
  BRepFilletAPI_MakeChamfer *arg1 = (BRepFilletAPI_MakeChamfer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include <BRepCheck_Analyzer.hxx>
EXPORT BRepCheck_Analyzer *_wrap_new_BRepCheck_Analyzer__SWIG_0 (TopoDS_Shape *larg1, bool larg2) {
  BRepCheck_Analyzer * lresult = (BRepCheck_Analyzer *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 ;
  BRepCheck_Analyzer *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (BRepCheck_Analyzer *)new BRepCheck_Analyzer((TopoDS_Shape const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepCheck_Analyzer *)0;
  }
}


EXPORT BRepCheck_Analyzer *_wrap_new_BRepCheck_Analyzer__SWIG_1 (TopoDS_Shape *larg1) {
  BRepCheck_Analyzer * lresult = (BRepCheck_Analyzer *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  BRepCheck_Analyzer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (BRepCheck_Analyzer *)new BRepCheck_Analyzer((TopoDS_Shape const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepCheck_Analyzer *)0;
  }
}


EXPORT void _wrap_BRepCheck_Analyzer_init__SWIG_0 (BRepCheck_Analyzer *larg1, TopoDS_Shape *larg2, bool larg3) {
  BRepCheck_Analyzer *arg1 = (BRepCheck_Analyzer *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->Init((TopoDS_Shape const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepCheck_Analyzer_init__SWIG_1 (BRepCheck_Analyzer *larg1, TopoDS_Shape *larg2) {
  BRepCheck_Analyzer *arg1 = (BRepCheck_Analyzer *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Init((TopoDS_Shape const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_BRepCheck_Analyzer_isValid (BRepCheck_Analyzer *larg1) {
  bool lresult = (bool)0 ;
  BRepCheck_Analyzer *arg1 = (BRepCheck_Analyzer *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepCheck_Analyzer const *)arg1)->IsValid();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_BRepCheck_Analyzer (BRepCheck_Analyzer *larg1) {
  BRepCheck_Analyzer *arg1 = (BRepCheck_Analyzer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include <ShapeBuild_ReShape.hxx>
EXPORT ShapeBuild_ReShape *_wrap_new_ShapeBuild_ReShape () {
  ShapeBuild_ReShape * lresult = (ShapeBuild_ReShape *)0 ;
  ShapeBuild_ReShape *result = 0 ;
  
  try {
    result = (ShapeBuild_ReShape *)new ShapeBuild_ReShape();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ShapeBuild_ReShape *)0;
  }
}


EXPORT void _wrap_ShapeBuild_ReShape_replace__SWIG_0 (ShapeBuild_ReShape *larg1, TopoDS_Shape *larg2, TopoDS_Shape *larg3, bool larg4) {
  ShapeBuild_ReShape *arg1 = (ShapeBuild_ReShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  Standard_Boolean arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    (arg1)->Replace((TopoDS_Shape const &)*arg2,(TopoDS_Shape const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ShapeBuild_ReShape_replace__SWIG_1 (ShapeBuild_ReShape *larg1, TopoDS_Shape *larg2, TopoDS_Shape *larg3) {
  ShapeBuild_ReShape *arg1 = (ShapeBuild_ReShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->Replace((TopoDS_Shape const &)*arg2,(TopoDS_Shape const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT TopoDS_Shape *_wrap_ShapeBuild_ReShape_apply__SWIG_0 (ShapeBuild_ReShape *larg1, TopoDS_Shape *larg2, TopAbs_ShapeEnum larg3) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  ShapeBuild_ReShape *arg1 = (ShapeBuild_ReShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopAbs_ShapeEnum arg3 ;
  TopoDS_Shape result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (arg1)->Apply((TopoDS_Shape const &)*arg2,arg3);
    lresult = new TopoDS_Shape(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT TopoDS_Shape *_wrap_ShapeBuild_ReShape_apply__SWIG_1 (ShapeBuild_ReShape *larg1, TopoDS_Shape *larg2) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  ShapeBuild_ReShape *arg1 = (ShapeBuild_ReShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->Apply((TopoDS_Shape const &)*arg2);
    lresult = new TopoDS_Shape(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT void _wrap_delete_ShapeBuild_ReShape (ShapeBuild_ReShape *larg1) {
  ShapeBuild_ReShape *arg1 = (ShapeBuild_ReShape *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <STEPControl_Reader.hxx>
#include <IGESControl_Reader.hxx>
#include <XSControl_WorkSession.hxx>
#include <XSControl_TransferReader.hxx>
#include <StepRepr_RepresentationItem.hxx>
#include <TCollection_HAsciiString.hxx>
#include <IGESData_IGESEntity.hxx>
#include <TransferBRep.hxx>
#include <Transfer_Binder.hxx>
#include <Transfer_TransientProcess.hxx>
#include <Interface_InterfaceModel.hxx>
#include <iostream>
 
EXPORT IFSelect_ReturnStatus _wrap_XSControl_Reader_readFile__SWIG_0 (XSControl_Reader *larg1, Standard_CString larg2) {
  IFSelect_ReturnStatus lresult = (IFSelect_ReturnStatus)0 ;
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  Standard_CString arg2 = (Standard_CString) (Standard_CString)0 ;
  IFSelect_ReturnStatus result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (IFSelect_ReturnStatus)(arg1)->ReadFile(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (IFSelect_ReturnStatus)0;
  }
}


EXPORT Standard_Integer _wrap_XSControl_Reader_transferRoots (XSControl_Reader *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)(arg1)->TransferRoots();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT void _wrap_XSControl_Reader_clearShapes (XSControl_Reader *larg1) {
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->ClearShapes();
    
  } catch (...) {
    
  }
}


EXPORT Standard_Integer _wrap_XSControl_Reader_nbRootsForTransfer (XSControl_Reader *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)(arg1)->NbRootsForTransfer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT TopoDS_Shape *_wrap_XSControl_Reader_oneShape (XSControl_Reader *larg1) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  TopoDS_Shape result;
  
  arg1 = larg1;
  try {
    result = ((XSControl_Reader const *)arg1)->OneShape();
    lresult = new TopoDS_Shape(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


SWIGINTERN IFSelect_ReturnStatus XSControl_Reader_readFile__SWIG_1(XSControl_Reader *self,char *filename){
		return self->ReadFile(filename);
	}
EXPORT IFSelect_ReturnStatus _wrap_XSControl_Reader_readFile__SWIG_1 (XSControl_Reader *larg1, char *larg2) {
  IFSelect_ReturnStatus lresult = (IFSelect_ReturnStatus)0 ;
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  char *arg2 = (char *) 0 ;
  IFSelect_ReturnStatus result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (IFSelect_ReturnStatus)XSControl_Reader_readFile__SWIG_1(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (IFSelect_ReturnStatus)0;
  }
}


EXPORT void _wrap_delete_XSControl_Reader (XSControl_Reader *larg1) {
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT STEPControl_Reader *_wrap_new_STEPControl_Reader () {
  STEPControl_Reader * lresult = (STEPControl_Reader *)0 ;
  STEPControl_Reader *result = 0 ;
  
  try {
    result = (STEPControl_Reader *)new STEPControl_Reader();
    lresult = result;
    return lresult;
  } catch (...) {
    return (STEPControl_Reader *)0;
  }
}


SWIGINTERN char const *STEPControl_Reader_getLabel(STEPControl_Reader *self,TopoDS_Shape *theShape){
		const Handle(XSControl_WorkSession)& theSession = self->WS();
		const Handle(XSControl_TransferReader)& aReader = theSession->TransferReader();
		Handle(Standard_Transient) anEntity = aReader->EntityFromShapeResult(*theShape, 1);
		if (anEntity.IsNull()) {
			// as just mapped
			anEntity = aReader->EntityFromShapeResult (*theShape,-1);
		}

		if (anEntity.IsNull()) {
			// as anything
			anEntity = aReader->EntityFromShapeResult (*theShape,4);
		}

		if (anEntity.IsNull()) {
			cout<<"Warning: XSInterface_STEPReader::ReadAttributes() entity not found"<<endl;
			return NULL;
		}
		else 
		{
			Handle(StepRepr_RepresentationItem) aReprItem;
			aReprItem = Handle(StepRepr_RepresentationItem)::DownCast(anEntity);

			if (aReprItem.IsNull()) {
				cout<<"Error: STEPReader::ReadAttributes(): StepRepr_RepresentationItem Is NULL"<<endl;
				return NULL;
			}
			else 
				return aReprItem->Name()->ToCString();
		}
	}
EXPORT char *_wrap_STEPControl_Reader_getLabel (STEPControl_Reader *larg1, TopoDS_Shape *larg2) {
  char * lresult = (char *)0 ;
  STEPControl_Reader *arg1 = (STEPControl_Reader *) 0 ;
  TopoDS_Shape *arg2 = (TopoDS_Shape *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (char *)STEPControl_Reader_getLabel(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_delete_STEPControl_Reader (STEPControl_Reader *larg1) {
  STEPControl_Reader *arg1 = (STEPControl_Reader *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT IGESControl_Reader *_wrap_new_IGESControl_Reader () {
  IGESControl_Reader * lresult = (IGESControl_Reader *)0 ;
  IGESControl_Reader *result = 0 ;
  
  try {
    result = (IGESControl_Reader *)new IGESControl_Reader();
    lresult = result;
    return lresult;
  } catch (...) {
    return (IGESControl_Reader *)0;
  }
}


SWIGINTERN char const *IGESControl_Reader_getLabel(IGESControl_Reader *self,TopoDS_Shape theShape){
		const Handle(XSControl_WorkSession)& theSession = self->WS();
		const Handle(Interface_InterfaceModel)& theModel = theSession->Model();
		const Handle(XSControl_TransferReader)& aReader = theSession->TransferReader();
		const Handle(Transfer_TransientProcess)& tp = aReader->TransientProcess();
		Standard_Integer nb = theModel->NbEntities(); 
		for(Standard_Integer i=1; i<=nb; i++) 
		{
			Handle(IGESData_IGESEntity) ent = Handle(IGESData_IGESEntity)::DownCast(theModel->Value(i));

			if (ent.IsNull())
				continue;

			Handle(Transfer_Binder) binder = tp->Find(ent); 

			if (binder.IsNull())
				continue;
			TopoDS_Shape oneShape = TransferBRep::ShapeResult(binder);
			if (oneShape.IsNull())
				continue;
			if (oneShape.IsEqual(theShape))
			{
				if (ent->HasName())
					return ent->NameValue()->String().ToCString();
				else
					return NULL; 
			}
		}
		return NULL; 
	}
EXPORT char *_wrap_IGESControl_Reader_getLabel (IGESControl_Reader *larg1, TopoDS_Shape *larg2) {
  char * lresult = (char *)0 ;
  IGESControl_Reader *arg1 = (IGESControl_Reader *) 0 ;
  TopoDS_Shape arg2 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    result = (char *)IGESControl_Reader_getLabel(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


SWIGINTERN TopoDS_Shape IGESControl_Reader_getShape(IGESControl_Reader *self,char *shapeName){
		const TCollection_AsciiString ascShapeName(shapeName);
		const Handle(XSControl_WorkSession)& theSession = self->WS();
		const Handle(Interface_InterfaceModel)& theModel = theSession->Model();
		const Handle(XSControl_TransferReader)& aReader = theSession->TransferReader();
		const Handle(Transfer_TransientProcess)& tp = aReader->TransientProcess();
		Standard_Integer nb = theModel->NbEntities();
		TopoDS_Shape retShape; 
		for(Standard_Integer i=1; i<=nb; i++)
		{
			Handle(IGESData_IGESEntity) ent = Handle(IGESData_IGESEntity)::DownCast(theModel->Value(i));

			if (ent.IsNull())
				continue;
			Handle(Transfer_Binder) binder = tp->Find(ent);

			if (binder.IsNull())
				continue;
			TopoDS_Shape oneShape = TransferBRep::ShapeResult(binder);

			if (oneShape.IsNull())
				continue;

			if (ent->HasName() && ent->NameValue()->String().IsEqual(ascShapeName))
				retShape = oneShape;
		}
		return retShape; 
	}
EXPORT TopoDS_Shape *_wrap_IGESControl_Reader_getShape (IGESControl_Reader *larg1, char *larg2) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  IGESControl_Reader *arg1 = (IGESControl_Reader *) 0 ;
  char *arg2 = (char *) 0 ;
  TopoDS_Shape result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = IGESControl_Reader_getShape(arg1,arg2);
    lresult = new TopoDS_Shape(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


SWIGINTERN void IGESControl_Reader_dumpLabels(IGESControl_Reader *self){
		const Handle(XSControl_WorkSession)& theSession = self->WS();
		const Handle(Interface_InterfaceModel)& theModel = theSession->Model();
		Standard_Integer nb = theModel->NbEntities();
		for(Standard_Integer i=1; i<=nb; i++)
		{
			Handle(IGESData_IGESEntity) ent = Handle(IGESData_IGESEntity)::DownCast(theModel->Value(i));
			if (ent.IsNull()) continue;
			if (ent->HasName())
			{
				std::cout << ent->NameValue()->String().ToCString() << std::endl;
			}
		}
	}
EXPORT void _wrap_IGESControl_Reader_dumpLabels (IGESControl_Reader *larg1) {
  IGESControl_Reader *arg1 = (IGESControl_Reader *) 0 ;
  
  arg1 = larg1;
  try {
    IGESControl_Reader_dumpLabels(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IGESControl_Reader (IGESControl_Reader *larg1) {
  IGESControl_Reader *arg1 = (IGESControl_Reader *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <STEPControl_Writer.hxx>
 
EXPORT STEPControl_Writer *_wrap_new_STEPControl_Writer () {
  STEPControl_Writer * lresult = (STEPControl_Writer *)0 ;
  STEPControl_Writer *result = 0 ;
  
  try {
    result = (STEPControl_Writer *)new STEPControl_Writer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (STEPControl_Writer *)0;
  }
}


EXPORT IFSelect_ReturnStatus _wrap_STEPControl_Writer_write (STEPControl_Writer *larg1, Standard_CString larg2) {
  IFSelect_ReturnStatus lresult = (IFSelect_ReturnStatus)0 ;
  STEPControl_Writer *arg1 = (STEPControl_Writer *) 0 ;
  Standard_CString arg2 = (Standard_CString) (Standard_CString)0 ;
  IFSelect_ReturnStatus result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (IFSelect_ReturnStatus)(arg1)->Write(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (IFSelect_ReturnStatus)0;
  }
}


EXPORT IFSelect_ReturnStatus _wrap_STEPControl_Writer_transfer (STEPControl_Writer *larg1, TopoDS_Shape *larg2, STEPControl_StepModelType larg3) {
  IFSelect_ReturnStatus lresult = (IFSelect_ReturnStatus)0 ;
  STEPControl_Writer *arg1 = (STEPControl_Writer *) 0 ;
  TopoDS_Shape arg2 ;
  STEPControl_StepModelType arg3 ;
  IFSelect_ReturnStatus result;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    result = (IFSelect_ReturnStatus)(arg1)->Transfer(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (IFSelect_ReturnStatus)0;
  }
}


EXPORT void _wrap_delete_STEPControl_Writer (STEPControl_Writer *larg1) {
  STEPControl_Writer *arg1 = (STEPControl_Writer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <IGESControl_Writer.hxx>
 
EXPORT IGESControl_Writer *_wrap_new_IGESControl_Writer__SWIG_0 () {
  IGESControl_Writer * lresult = (IGESControl_Writer *)0 ;
  IGESControl_Writer *result = 0 ;
  
  try {
    result = (IGESControl_Writer *)new IGESControl_Writer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (IGESControl_Writer *)0;
  }
}


EXPORT IGESControl_Writer *_wrap_new_IGESControl_Writer__SWIG_1 (Standard_CString larg1, Standard_Integer larg2) {
  IGESControl_Writer * lresult = (IGESControl_Writer *)0 ;
  Standard_CString arg1 = (Standard_CString) (Standard_CString)0 ;
  Standard_Integer arg2 ;
  IGESControl_Writer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (IGESControl_Writer *)new IGESControl_Writer(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (IGESControl_Writer *)0;
  }
}


EXPORT IGESControl_Writer *_wrap_new_IGESControl_Writer__SWIG_2 (Standard_CString larg1) {
  IGESControl_Writer * lresult = (IGESControl_Writer *)0 ;
  Standard_CString arg1 = (Standard_CString) (Standard_CString)0 ;
  IGESControl_Writer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (IGESControl_Writer *)new IGESControl_Writer(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (IGESControl_Writer *)0;
  }
}


EXPORT bool _wrap_IGESControl_Writer_write (IGESControl_Writer *larg1, Standard_CString larg2) {
  bool lresult = (bool)0 ;
  IGESControl_Writer *arg1 = (IGESControl_Writer *) 0 ;
  Standard_CString arg2 = (Standard_CString) (Standard_CString)0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)(arg1)->Write(arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_IGESControl_Writer_addShape (IGESControl_Writer *larg1, TopoDS_Shape *larg2) {
  bool lresult = (bool)0 ;
  IGESControl_Writer *arg1 = (IGESControl_Writer *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)(arg1)->AddShape((TopoDS_Shape const &)*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_IGESControl_Writer_computeModel (IGESControl_Writer *larg1) {
  IGESControl_Writer *arg1 = (IGESControl_Writer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->ComputeModel();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IGESControl_Writer (IGESControl_Writer *larg1) {
  IGESControl_Writer *arg1 = (IGESControl_Writer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <IGESControl_Controller.hxx>
 
EXPORT IGESControl_Controller *_wrap_new_IGESControl_Controller () {
  IGESControl_Controller * lresult = (IGESControl_Controller *)0 ;
  IGESControl_Controller *result = 0 ;
  
  try {
    result = (IGESControl_Controller *)new IGESControl_Controller();
    lresult = result;
    return lresult;
  } catch (...) {
    return (IGESControl_Controller *)0;
  }
}


EXPORT void _wrap_IGESControl_Controller_init (IGESControl_Controller *larg1) {
  IGESControl_Controller *arg1 = (IGESControl_Controller *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Init();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IGESControl_Controller (IGESControl_Controller *larg1) {
  IGESControl_Controller *arg1 = (IGESControl_Controller *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <ShapeFix_Wireframe.hxx>
#include <ShapeFix_Root.hxx>
#include <ShapeBuild_ReShape.hxx>
#include <Message_ProgressIndicator.hxx>
#include <ShapeFix_Shape.hxx>
#include <ShapeFix_Solid.hxx>
#include <ShapeFix_Shell.hxx>
#include <ShapeFix_Face.hxx>
#include <ShapeFix_Wire.hxx>
#include <ShapeFix_Edge.hxx>

EXPORT void _wrap_ShapeFix_Root_setPrecision (ShapeFix_Root *larg1, Standard_Real larg2) {
  ShapeFix_Root *arg1 = (ShapeFix_Root *) 0 ;
  Standard_Real arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->SetPrecision(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Standard_Real _wrap_ShapeFix_Root_getPrecision (ShapeFix_Root *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  ShapeFix_Root *arg1 = (ShapeFix_Root *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)((ShapeFix_Root const *)arg1)->Precision();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_ShapeFix_Root_setContext (ShapeFix_Root *larg1, ShapeBuild_ReShape *larg2) {
  ShapeFix_Root *arg1 = (ShapeFix_Root *) 0 ;
  ShapeBuild_ReShape *arg2 = (ShapeBuild_ReShape *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->SetContext((ShapeBuild_ReShape const *)arg2);
    
  } catch (...) {
    
  }
}


SWIGINTERN Handle_ShapeBuild_ReShape ShapeFix_Root_getContext(ShapeFix_Root *self){
        Handle_ShapeBuild_ReShape p = self->Context();
        return p;
    }
EXPORT Handle_ShapeBuild_ReShape *_wrap_ShapeFix_Root_getContext (ShapeFix_Root *larg1) {
  Handle_ShapeBuild_ReShape * lresult = (Handle_ShapeBuild_ReShape *)0 ;
  ShapeFix_Root *arg1 = (ShapeFix_Root *) 0 ;
  Handle_ShapeBuild_ReShape result;
  
  arg1 = larg1;
  try {
    result = ShapeFix_Root_getContext(arg1);
    lresult = new Handle_ShapeBuild_ReShape(result);
    return lresult;
  } catch (...) {
    return (Handle_ShapeBuild_ReShape *)0;
  }
}


EXPORT void _wrap_delete_ShapeFix_Root (ShapeFix_Root *larg1) {
  ShapeFix_Root *arg1 = (ShapeFix_Root *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ShapeFix_Wireframe *_wrap_new_ShapeFix_Wireframe (TopoDS_Shape *larg1) {
  ShapeFix_Wireframe * lresult = (ShapeFix_Wireframe *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  ShapeFix_Wireframe *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ShapeFix_Wireframe *)new ShapeFix_Wireframe((TopoDS_Shape const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ShapeFix_Wireframe *)0;
  }
}


EXPORT bool _wrap_ShapeFix_Wireframe_fixWireGaps (ShapeFix_Wireframe *larg1) {
  bool lresult = (bool)0 ;
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)(arg1)->FixWireGaps();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_ShapeFix_Wireframe_fixSmallEdges (ShapeFix_Wireframe *larg1) {
  bool lresult = (bool)0 ;
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)(arg1)->FixSmallEdges();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_ShapeFix_Wireframe_setLimitAngle (ShapeFix_Wireframe *larg1, Standard_Real larg2) {
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  Standard_Real arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->SetLimitAngle(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Standard_Real _wrap_ShapeFix_Wireframe_getLimitAngle (ShapeFix_Wireframe *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)((ShapeFix_Wireframe const *)arg1)->LimitAngle();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT TopoDS_Shape *_wrap_ShapeFix_Wireframe_shape (ShapeFix_Wireframe *larg1) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  TopoDS_Shape result;
  
  arg1 = larg1;
  try {
    result = (arg1)->Shape();
    lresult = new TopoDS_Shape(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


SWIGINTERN void ShapeFix_Wireframe_setDropSmallEdges(ShapeFix_Wireframe *self,bool b){
		self->ModeDropSmallEdges()=b;
	}
EXPORT void _wrap_ShapeFix_Wireframe_setDropSmallEdges (ShapeFix_Wireframe *larg1, bool larg2) {
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    ShapeFix_Wireframe_setDropSmallEdges(arg1,arg2);
    
  } catch (...) {
    
  }
}


SWIGINTERN bool ShapeFix_Wireframe_getDropSmallEdges(ShapeFix_Wireframe *self){
        return self->ModeDropSmallEdges()!=0;
	}
EXPORT bool _wrap_ShapeFix_Wireframe_getDropSmallEdges (ShapeFix_Wireframe *larg1) {
  bool lresult = (bool)0 ;
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ShapeFix_Wireframe_getDropSmallEdges(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_ShapeFix_Wireframe (ShapeFix_Wireframe *larg1) {
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ShapeFix_Shape *_wrap_new_ShapeFix_Shape (TopoDS_Shape *larg1) {
  ShapeFix_Shape * lresult = (ShapeFix_Shape *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  ShapeFix_Shape *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ShapeFix_Shape *)new ShapeFix_Shape((TopoDS_Shape const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ShapeFix_Shape *)0;
  }
}


EXPORT TopoDS_Shape *_wrap_ShapeFix_Shape_getShape (ShapeFix_Shape *larg1) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  ShapeFix_Shape *arg1 = (ShapeFix_Shape *) 0 ;
  TopoDS_Shape result;
  
  arg1 = larg1;
  try {
    result = ((ShapeFix_Shape const *)arg1)->Shape();
    lresult = new TopoDS_Shape(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT bool _wrap_ShapeFix_Shape_perform__SWIG_0 (ShapeFix_Shape *larg1, Handle_Message_ProgressIndicator *larg2) {
  bool lresult = (bool)0 ;
  ShapeFix_Shape *arg1 = (ShapeFix_Shape *) 0 ;
  Handle_Message_ProgressIndicator *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)(arg1)->Perform((Handle_Message_ProgressIndicator const &)*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_ShapeFix_Shape_perform__SWIG_1 (ShapeFix_Shape *larg1) {
  bool lresult = (bool)0 ;
  ShapeFix_Shape *arg1 = (ShapeFix_Shape *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)(arg1)->Perform();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT Handle_ShapeFix_Solid *_wrap_ShapeFix_Shape_getFixSolidTool (ShapeFix_Shape *larg1) {
  Handle_ShapeFix_Solid * lresult = (Handle_ShapeFix_Solid *)0 ;
  ShapeFix_Shape *arg1 = (ShapeFix_Shape *) 0 ;
  Handle_ShapeFix_Solid result;
  
  arg1 = larg1;
  try {
    result = ((ShapeFix_Shape const *)arg1)->FixSolidTool();
    lresult = new Handle_ShapeFix_Solid(result);
    return lresult;
  } catch (...) {
    return (Handle_ShapeFix_Solid *)0;
  }
}


EXPORT Handle_ShapeFix_Shell *_wrap_ShapeFix_Shape_getFixShellTool (ShapeFix_Shape *larg1) {
  Handle_ShapeFix_Shell * lresult = (Handle_ShapeFix_Shell *)0 ;
  ShapeFix_Shape *arg1 = (ShapeFix_Shape *) 0 ;
  Handle_ShapeFix_Shell result;
  
  arg1 = larg1;
  try {
    result = ((ShapeFix_Shape const *)arg1)->FixShellTool();
    lresult = new Handle_ShapeFix_Shell(result);
    return lresult;
  } catch (...) {
    return (Handle_ShapeFix_Shell *)0;
  }
}


EXPORT Handle_ShapeFix_Face *_wrap_ShapeFix_Shape_getFixFaceTool (ShapeFix_Shape *larg1) {
  Handle_ShapeFix_Face * lresult = (Handle_ShapeFix_Face *)0 ;
  ShapeFix_Shape *arg1 = (ShapeFix_Shape *) 0 ;
  Handle_ShapeFix_Face result;
  
  arg1 = larg1;
  try {
    result = ((ShapeFix_Shape const *)arg1)->FixFaceTool();
    lresult = new Handle_ShapeFix_Face(result);
    return lresult;
  } catch (...) {
    return (Handle_ShapeFix_Face *)0;
  }
}


EXPORT Handle_ShapeFix_Wire *_wrap_ShapeFix_Shape_getFixWireTool (ShapeFix_Shape *larg1) {
  Handle_ShapeFix_Wire * lresult = (Handle_ShapeFix_Wire *)0 ;
  ShapeFix_Shape *arg1 = (ShapeFix_Shape *) 0 ;
  Handle_ShapeFix_Wire result;
  
  arg1 = larg1;
  try {
    result = ((ShapeFix_Shape const *)arg1)->FixWireTool();
    lresult = new Handle_ShapeFix_Wire(result);
    return lresult;
  } catch (...) {
    return (Handle_ShapeFix_Wire *)0;
  }
}


EXPORT Handle_ShapeFix_Edge *_wrap_ShapeFix_Shape_getFixEdgeTool (ShapeFix_Shape *larg1) {
  Handle_ShapeFix_Edge * lresult = (Handle_ShapeFix_Edge *)0 ;
  ShapeFix_Shape *arg1 = (ShapeFix_Shape *) 0 ;
  Handle_ShapeFix_Edge result;
  
  arg1 = larg1;
  try {
    result = ((ShapeFix_Shape const *)arg1)->FixEdgeTool();
    lresult = new Handle_ShapeFix_Edge(result);
    return lresult;
  } catch (...) {
    return (Handle_ShapeFix_Edge *)0;
  }
}


EXPORT void _wrap_delete_ShapeFix_Shape (ShapeFix_Shape *larg1) {
  ShapeFix_Shape *arg1 = (ShapeFix_Shape *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Message_ProgressIndicator (Handle_Message_ProgressIndicator *larg1) {
  Handle_Message_ProgressIndicator *arg1 = (Handle_Message_ProgressIndicator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <ShapeAnalysis_Edge.hxx>
#include <ShapeAnalysis_Surface.hxx>

EXPORT ShapeAnalysis_Edge *_wrap_new_ShapeAnalysis_Edge () {
  ShapeAnalysis_Edge * lresult = (ShapeAnalysis_Edge *)0 ;
  ShapeAnalysis_Edge *result = 0 ;
  
  try {
    result = (ShapeAnalysis_Edge *)new ShapeAnalysis_Edge();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ShapeAnalysis_Edge *)0;
  }
}


EXPORT bool _wrap_ShapeAnalysis_Edge_isClosed3d (ShapeAnalysis_Edge *larg1, TopoDS_Edge *larg2) {
  bool lresult = (bool)0 ;
  ShapeAnalysis_Edge *arg1 = (ShapeAnalysis_Edge *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)((ShapeAnalysis_Edge const *)arg1)->IsClosed3d((TopoDS_Edge const &)*arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_ShapeAnalysis_Edge_hasPCurve (ShapeAnalysis_Edge *larg1, TopoDS_Edge *larg2, TopoDS_Face *larg3) {
  bool lresult = (bool)0 ;
  ShapeAnalysis_Edge *arg1 = (ShapeAnalysis_Edge *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Face *arg3 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Standard_Boolean)((ShapeAnalysis_Edge const *)arg1)->HasPCurve((TopoDS_Edge const &)*arg2,(TopoDS_Face const &)*arg3);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_ShapeAnalysis_Edge_IsSeam (ShapeAnalysis_Edge *larg1, TopoDS_Edge *larg2, TopoDS_Face *larg3) {
  bool lresult = (bool)0 ;
  ShapeAnalysis_Edge *arg1 = (ShapeAnalysis_Edge *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Face *arg3 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Standard_Boolean)((ShapeAnalysis_Edge const *)arg1)->IsSeam((TopoDS_Edge const &)*arg2,(TopoDS_Face const &)*arg3);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_ShapeAnalysis_Edge (ShapeAnalysis_Edge *larg1) {
  ShapeAnalysis_Edge *arg1 = (ShapeAnalysis_Edge *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ShapeAnalysis_Surface *_wrap_new_ShapeAnalysis_Surface (Handle_Geom_Surface *larg1) {
  ShapeAnalysis_Surface * lresult = (ShapeAnalysis_Surface *)0 ;
  Handle_Geom_Surface *arg1 = 0 ;
  ShapeAnalysis_Surface *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ShapeAnalysis_Surface *)new ShapeAnalysis_Surface((Handle_Geom_Surface const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ShapeAnalysis_Surface *)0;
  }
}


EXPORT bool _wrap_ShapeAnalysis_Surface_hasSingularities (ShapeAnalysis_Surface *larg1, Standard_Real larg2) {
  bool lresult = (bool)0 ;
  ShapeAnalysis_Surface *arg1 = (ShapeAnalysis_Surface *) 0 ;
  Standard_Real arg2 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Boolean)(arg1)->HasSingularities(arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT Standard_Integer _wrap_ShapeAnalysis_Surface_getNbSingularities (ShapeAnalysis_Surface *larg1, Standard_Real larg2) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  ShapeAnalysis_Surface *arg1 = (ShapeAnalysis_Surface *) 0 ;
  Standard_Real arg2 ;
  Standard_Integer result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Integer)(arg1)->NbSingularities(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT bool _wrap_ShapeAnalysis_Surface_isDegenerated (ShapeAnalysis_Surface *larg1, gp_Pnt *larg2, Standard_Real larg3) {
  bool lresult = (bool)0 ;
  ShapeAnalysis_Surface *arg1 = (ShapeAnalysis_Surface *) 0 ;
  gp_Pnt *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Standard_Boolean)(arg1)->IsDegenerated((gp_Pnt const &)*arg2,arg3);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_ShapeAnalysis_Surface (ShapeAnalysis_Surface *larg1) {
  ShapeAnalysis_Surface *arg1 = (ShapeAnalysis_Surface *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <APIHeaderSection_MakeHeader.hxx>
#include <StepData_StepModel.hxx>

EXPORT APIHeaderSection_MakeHeader *_wrap_new_APIHeaderSection_MakeHeader (Handle_StepData_StepModel *larg1) {
  APIHeaderSection_MakeHeader * lresult = (APIHeaderSection_MakeHeader *)0 ;
  Handle_StepData_StepModel *arg1 = 0 ;
  APIHeaderSection_MakeHeader *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (APIHeaderSection_MakeHeader *)new APIHeaderSection_MakeHeader((Handle_StepData_StepModel const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (APIHeaderSection_MakeHeader *)0;
  }
}


EXPORT void _wrap_APIHeaderSection_MakeHeader_setName (APIHeaderSection_MakeHeader *larg1, Handle_TCollection_HAsciiString *larg2) {
  APIHeaderSection_MakeHeader *arg1 = (APIHeaderSection_MakeHeader *) 0 ;
  Handle_TCollection_HAsciiString *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->SetName((Handle_TCollection_HAsciiString const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_APIHeaderSection_MakeHeader_setAuthorValue (APIHeaderSection_MakeHeader *larg1, Standard_Integer larg2, Handle_TCollection_HAsciiString *larg3) {
  APIHeaderSection_MakeHeader *arg1 = (APIHeaderSection_MakeHeader *) 0 ;
  Standard_Integer arg2 ;
  Handle_TCollection_HAsciiString *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->SetAuthorValue(arg2,(Handle_TCollection_HAsciiString const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_APIHeaderSection_MakeHeader_setOrganizationValue (APIHeaderSection_MakeHeader *larg1, Standard_Integer larg2, Handle_TCollection_HAsciiString *larg3) {
  APIHeaderSection_MakeHeader *arg1 = (APIHeaderSection_MakeHeader *) 0 ;
  Standard_Integer arg2 ;
  Handle_TCollection_HAsciiString *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->SetOrganizationValue(arg2,(Handle_TCollection_HAsciiString const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_APIHeaderSection_MakeHeader_setOriginatingSystem (APIHeaderSection_MakeHeader *larg1, Handle_TCollection_HAsciiString *larg2) {
  APIHeaderSection_MakeHeader *arg1 = (APIHeaderSection_MakeHeader *) 0 ;
  Handle_TCollection_HAsciiString *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->SetOriginatingSystem((Handle_TCollection_HAsciiString const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_APIHeaderSection_MakeHeader_setDescriptionValue (APIHeaderSection_MakeHeader *larg1, Standard_Integer larg2, Handle_TCollection_HAsciiString *larg3) {
  APIHeaderSection_MakeHeader *arg1 = (APIHeaderSection_MakeHeader *) 0 ;
  Standard_Integer arg2 ;
  Handle_TCollection_HAsciiString *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->SetDescriptionValue(arg2,(Handle_TCollection_HAsciiString const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_APIHeaderSection_MakeHeader (APIHeaderSection_MakeHeader *larg1) {
  APIHeaderSection_MakeHeader *arg1 = (APIHeaderSection_MakeHeader *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


 #include <ShapeUpgrade_RemoveInternalWires.hxx> 
 #include <ShapeUpgrade_Tool.hxx> 
 #include <ShapeUpgrade_ShapeDivideArea.hxx> 
EXPORT void _wrap_delete_ShapeUpgrade_Tool (ShapeUpgrade_Tool *larg1) {
  ShapeUpgrade_Tool *arg1 = (ShapeUpgrade_Tool *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ShapeUpgrade_RemoveInternalWires *_wrap_new_ShapeUpgrade_RemoveInternalWires (TopoDS_Shape *larg1) {
  ShapeUpgrade_RemoveInternalWires * lresult = (ShapeUpgrade_RemoveInternalWires *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  ShapeUpgrade_RemoveInternalWires *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ShapeUpgrade_RemoveInternalWires *)new ShapeUpgrade_RemoveInternalWires((TopoDS_Shape const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ShapeUpgrade_RemoveInternalWires *)0;
  }
}


EXPORT bool _wrap_ShapeUpgrade_RemoveInternalWires_perform (ShapeUpgrade_RemoveInternalWires *larg1) {
  bool lresult = (bool)0 ;
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)(arg1)->Perform();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT TopoDS_Shape *_wrap_ShapeUpgrade_RemoveInternalWires_getResult (ShapeUpgrade_RemoveInternalWires *larg1) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  TopoDS_Shape result;
  
  arg1 = larg1;
  try {
    result = ((ShapeUpgrade_RemoveInternalWires const *)arg1)->GetResult();
    lresult = new TopoDS_Shape(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


SWIGINTERN void ShapeUpgrade_RemoveInternalWires_setMinArea(ShapeUpgrade_RemoveInternalWires *self,double d){
		self->MinArea()=d;
	}
EXPORT void _wrap_ShapeUpgrade_RemoveInternalWires_setMinArea (ShapeUpgrade_RemoveInternalWires *larg1, double larg2) {
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  double arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ShapeUpgrade_RemoveInternalWires_setMinArea(arg1,arg2);
    
  } catch (...) {
    
  }
}


SWIGINTERN double ShapeUpgrade_RemoveInternalWires_getMinArea(ShapeUpgrade_RemoveInternalWires *self){
		return self->MinArea();
	}
EXPORT double _wrap_ShapeUpgrade_RemoveInternalWires_getMinArea (ShapeUpgrade_RemoveInternalWires *larg1) {
  double lresult = (double)0 ;
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  double result;
  
  arg1 = larg1;
  try {
    result = (double)ShapeUpgrade_RemoveInternalWires_getMinArea(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (double)0;
  }
}


SWIGINTERN void ShapeUpgrade_RemoveInternalWires_setRemoveFaceMode(ShapeUpgrade_RemoveInternalWires *self,Standard_Boolean b){
		self->RemoveFaceMode()=b;
	}
EXPORT void _wrap_ShapeUpgrade_RemoveInternalWires_setRemoveFaceMode (ShapeUpgrade_RemoveInternalWires *larg1, bool larg2) {
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  Standard_Boolean arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    ShapeUpgrade_RemoveInternalWires_setRemoveFaceMode(arg1,arg2);
    
  } catch (...) {
    
  }
}


SWIGINTERN Standard_Boolean ShapeUpgrade_RemoveInternalWires_getRemoveFaceMode(ShapeUpgrade_RemoveInternalWires *self){
		return self->RemoveFaceMode();
	}
EXPORT bool _wrap_ShapeUpgrade_RemoveInternalWires_getRemoveFaceMode (ShapeUpgrade_RemoveInternalWires *larg1) {
  bool lresult = (bool)0 ;
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)ShapeUpgrade_RemoveInternalWires_getRemoveFaceMode(arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_ShapeUpgrade_RemoveInternalWires (ShapeUpgrade_RemoveInternalWires *larg1) {
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT TopoDS_Shape *_wrap_ShapeUpgrade_ShapeDivide_getResult (ShapeUpgrade_ShapeDivide *larg1) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  ShapeUpgrade_ShapeDivide *arg1 = (ShapeUpgrade_ShapeDivide *) 0 ;
  TopoDS_Shape result;
  
  arg1 = larg1;
  try {
    result = ((ShapeUpgrade_ShapeDivide const *)arg1)->Result();
    lresult = new TopoDS_Shape(result);
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT bool _wrap_ShapeUpgrade_ShapeDivide_perform__SWIG_0 (ShapeUpgrade_ShapeDivide *larg1, bool larg2) {
  bool lresult = (bool)0 ;
  ShapeUpgrade_ShapeDivide *arg1 = (ShapeUpgrade_ShapeDivide *) 0 ;
  Standard_Boolean arg2 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (Standard_Boolean)(arg1)->Perform(arg2);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_ShapeUpgrade_ShapeDivide_perform__SWIG_1 (ShapeUpgrade_ShapeDivide *larg1) {
  bool lresult = (bool)0 ;
  ShapeUpgrade_ShapeDivide *arg1 = (ShapeUpgrade_ShapeDivide *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)(arg1)->Perform();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_ShapeUpgrade_ShapeDivide (ShapeUpgrade_ShapeDivide *larg1) {
  ShapeUpgrade_ShapeDivide *arg1 = (ShapeUpgrade_ShapeDivide *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ShapeUpgrade_ShapeDivideArea *_wrap_new_ShapeUpgrade_ShapeDivideArea (TopoDS_Shape *larg1) {
  ShapeUpgrade_ShapeDivideArea * lresult = (ShapeUpgrade_ShapeDivideArea *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  ShapeUpgrade_ShapeDivideArea *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ShapeUpgrade_ShapeDivideArea *)new ShapeUpgrade_ShapeDivideArea((TopoDS_Shape const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ShapeUpgrade_ShapeDivideArea *)0;
  }
}


SWIGINTERN void ShapeUpgrade_ShapeDivideArea_setMaxArea(ShapeUpgrade_ShapeDivideArea *self,double d){
		self->MaxArea()=d;
	}
EXPORT void _wrap_ShapeUpgrade_ShapeDivideArea_setMaxArea (ShapeUpgrade_ShapeDivideArea *larg1, double larg2) {
  ShapeUpgrade_ShapeDivideArea *arg1 = (ShapeUpgrade_ShapeDivideArea *) 0 ;
  double arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ShapeUpgrade_ShapeDivideArea_setMaxArea(arg1,arg2);
    
  } catch (...) {
    
  }
}


SWIGINTERN double ShapeUpgrade_ShapeDivideArea_getMaxArea(ShapeUpgrade_ShapeDivideArea *self){
		return self->MaxArea();
	}
EXPORT double _wrap_ShapeUpgrade_ShapeDivideArea_getMaxArea (ShapeUpgrade_ShapeDivideArea *larg1) {
  double lresult = (double)0 ;
  ShapeUpgrade_ShapeDivideArea *arg1 = (ShapeUpgrade_ShapeDivideArea *) 0 ;
  double result;
  
  arg1 = larg1;
  try {
    result = (double)ShapeUpgrade_ShapeDivideArea_getMaxArea(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (double)0;
  }
}


EXPORT void _wrap_delete_ShapeUpgrade_ShapeDivideArea (ShapeUpgrade_ShapeDivideArea *larg1) {
  ShapeUpgrade_ShapeDivideArea *arg1 = (ShapeUpgrade_ShapeDivideArea *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include <GeomAPI_PointsToBSpline.hxx>
#include <GeomAPI_Interpolate.hxx>
EXPORT GeomAPI_PointsToBSpline *_wrap_new_GeomAPI_PointsToBSpline__SWIG_0 () {
  GeomAPI_PointsToBSpline * lresult = (GeomAPI_PointsToBSpline *)0 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  try {
    result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline();
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_PointsToBSpline *)0;
  }
}


EXPORT GeomAPI_PointsToBSpline *_wrap_new_GeomAPI_PointsToBSpline__SWIG_1 (TColgp_Array1OfPnt *larg1, Standard_Integer larg2, Standard_Integer larg3, GeomAbs_Shape larg4, Standard_Real larg5) {
  GeomAPI_PointsToBSpline * lresult = (GeomAPI_PointsToBSpline *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  GeomAbs_Shape arg4 ;
  Standard_Real arg5 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_PointsToBSpline *)0;
  }
}


EXPORT GeomAPI_PointsToBSpline *_wrap_new_GeomAPI_PointsToBSpline__SWIG_2 (TColgp_Array1OfPnt *larg1, Standard_Integer larg2, Standard_Integer larg3, GeomAbs_Shape larg4) {
  GeomAPI_PointsToBSpline * lresult = (GeomAPI_PointsToBSpline *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  GeomAbs_Shape arg4 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_PointsToBSpline *)0;
  }
}


EXPORT GeomAPI_PointsToBSpline *_wrap_new_GeomAPI_PointsToBSpline__SWIG_3 (TColgp_Array1OfPnt *larg1, Standard_Integer larg2, Standard_Integer larg3) {
  GeomAPI_PointsToBSpline * lresult = (GeomAPI_PointsToBSpline *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_PointsToBSpline *)0;
  }
}


EXPORT GeomAPI_PointsToBSpline *_wrap_new_GeomAPI_PointsToBSpline__SWIG_4 (TColgp_Array1OfPnt *larg1, Standard_Integer larg2) {
  GeomAPI_PointsToBSpline * lresult = (GeomAPI_PointsToBSpline *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  Standard_Integer arg2 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_PointsToBSpline *)0;
  }
}


EXPORT GeomAPI_PointsToBSpline *_wrap_new_GeomAPI_PointsToBSpline__SWIG_5 (TColgp_Array1OfPnt *larg1) {
  GeomAPI_PointsToBSpline * lresult = (GeomAPI_PointsToBSpline *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_PointsToBSpline *)0;
  }
}


EXPORT GeomAPI_PointsToBSpline *_wrap_new_GeomAPI_PointsToBSpline__SWIG_6 (TColgp_Array1OfPnt *larg1, TColStd_Array1OfReal *larg2, Standard_Integer larg3, Standard_Integer larg4, GeomAbs_Shape larg5, Standard_Real larg6) {
  GeomAPI_PointsToBSpline * lresult = (GeomAPI_PointsToBSpline *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  Standard_Integer arg3 ;
  Standard_Integer arg4 ;
  GeomAbs_Shape arg5 ;
  Standard_Real arg6 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_PointsToBSpline *)0;
  }
}


EXPORT GeomAPI_PointsToBSpline *_wrap_new_GeomAPI_PointsToBSpline__SWIG_7 (TColgp_Array1OfPnt *larg1, TColStd_Array1OfReal *larg2, Standard_Integer larg3, Standard_Integer larg4, GeomAbs_Shape larg5) {
  GeomAPI_PointsToBSpline * lresult = (GeomAPI_PointsToBSpline *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  Standard_Integer arg3 ;
  Standard_Integer arg4 ;
  GeomAbs_Shape arg5 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_PointsToBSpline *)0;
  }
}


EXPORT GeomAPI_PointsToBSpline *_wrap_new_GeomAPI_PointsToBSpline__SWIG_8 (TColgp_Array1OfPnt *larg1, TColStd_Array1OfReal *larg2, Standard_Integer larg3, Standard_Integer larg4) {
  GeomAPI_PointsToBSpline * lresult = (GeomAPI_PointsToBSpline *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  Standard_Integer arg3 ;
  Standard_Integer arg4 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_PointsToBSpline *)0;
  }
}


EXPORT GeomAPI_PointsToBSpline *_wrap_new_GeomAPI_PointsToBSpline__SWIG_9 (TColgp_Array1OfPnt *larg1, TColStd_Array1OfReal *larg2, Standard_Integer larg3) {
  GeomAPI_PointsToBSpline * lresult = (GeomAPI_PointsToBSpline *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  Standard_Integer arg3 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_PointsToBSpline *)0;
  }
}


EXPORT GeomAPI_PointsToBSpline *_wrap_new_GeomAPI_PointsToBSpline__SWIG_10 (TColgp_Array1OfPnt *larg1, TColStd_Array1OfReal *larg2) {
  GeomAPI_PointsToBSpline * lresult = (GeomAPI_PointsToBSpline *)0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_PointsToBSpline *)0;
  }
}


EXPORT Handle_Geom_BSplineCurve *_wrap_GeomAPI_PointsToBSpline_Curve (GeomAPI_PointsToBSpline *larg1) {
  Handle_Geom_BSplineCurve * lresult = (Handle_Geom_BSplineCurve *)0 ;
  GeomAPI_PointsToBSpline *arg1 = (GeomAPI_PointsToBSpline *) 0 ;
  Handle_Geom_BSplineCurve *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Handle_Geom_BSplineCurve *) &((GeomAPI_PointsToBSpline const *)arg1)->Curve();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BSplineCurve *)0;
  }
}


EXPORT void _wrap_delete_GeomAPI_PointsToBSpline (GeomAPI_PointsToBSpline *larg1) {
  GeomAPI_PointsToBSpline *arg1 = (GeomAPI_PointsToBSpline *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT GeomAPI_Interpolate *_wrap_new_GeomAPI_Interpolate (Handle_TColgp_HArray1OfPnt *larg1, bool larg2, Standard_Real larg3) {
  GeomAPI_Interpolate * lresult = (GeomAPI_Interpolate *)0 ;
  Handle_TColgp_HArray1OfPnt *arg1 = 0 ;
  Standard_Boolean arg2 ;
  Standard_Real arg3 ;
  GeomAPI_Interpolate *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  try {
    result = (GeomAPI_Interpolate *)new GeomAPI_Interpolate((Handle_TColgp_HArray1OfPnt const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_Interpolate *)0;
  }
}


EXPORT void _wrap_GeomAPI_Interpolate_Load__SWIG_0 (GeomAPI_Interpolate *larg1, TColgp_Array1OfVec *larg2, Handle_TColStd_HArray1OfBoolean *larg3, bool larg4) {
  GeomAPI_Interpolate *arg1 = (GeomAPI_Interpolate *) 0 ;
  TColgp_Array1OfVec *arg2 = 0 ;
  Handle_TColStd_HArray1OfBoolean *arg3 = 0 ;
  Standard_Boolean arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    (arg1)->Load((TColgp_Array1OfVec const &)*arg2,(Handle_TColStd_HArray1OfBoolean const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_GeomAPI_Interpolate_Load__SWIG_1 (GeomAPI_Interpolate *larg1, TColgp_Array1OfVec *larg2, Handle_TColStd_HArray1OfBoolean *larg3) {
  GeomAPI_Interpolate *arg1 = (GeomAPI_Interpolate *) 0 ;
  TColgp_Array1OfVec *arg2 = 0 ;
  Handle_TColStd_HArray1OfBoolean *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->Load((TColgp_Array1OfVec const &)*arg2,(Handle_TColStd_HArray1OfBoolean const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_GeomAPI_Interpolate_Perform (GeomAPI_Interpolate *larg1) {
  GeomAPI_Interpolate *arg1 = (GeomAPI_Interpolate *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Perform();
    
  } catch (...) {
    
  }
}


EXPORT Handle_Geom_BSplineCurve *_wrap_GeomAPI_Interpolate_Curve (GeomAPI_Interpolate *larg1) {
  Handle_Geom_BSplineCurve * lresult = (Handle_Geom_BSplineCurve *)0 ;
  GeomAPI_Interpolate *arg1 = (GeomAPI_Interpolate *) 0 ;
  Handle_Geom_BSplineCurve *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Handle_Geom_BSplineCurve *) &((GeomAPI_Interpolate const *)arg1)->Curve();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_BSplineCurve *)0;
  }
}


EXPORT void _wrap_delete_GeomAPI_Interpolate (GeomAPI_Interpolate *larg1) {
  GeomAPI_Interpolate *arg1 = (GeomAPI_Interpolate *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include <GC_MakeArcOfCircle.hxx>
EXPORT GC_MakeArcOfCircle *_wrap_new_GC_MakeArcOfCircle__SWIG_0 (gp_Pnt *larg1, gp_Pnt *larg2, gp_Pnt *larg3) {
  GC_MakeArcOfCircle * lresult = (GC_MakeArcOfCircle *)0 ;
  gp_Pnt *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Pnt *arg3 = 0 ;
  GC_MakeArcOfCircle *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (GC_MakeArcOfCircle *)new GC_MakeArcOfCircle((gp_Pnt const &)*arg1,(gp_Pnt const &)*arg2,(gp_Pnt const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GC_MakeArcOfCircle *)0;
  }
}


EXPORT GC_MakeArcOfCircle *_wrap_new_GC_MakeArcOfCircle__SWIG_1 (gp_Circ *larg1, gp_Pnt *larg2, gp_Pnt *larg3, bool larg4) {
  GC_MakeArcOfCircle * lresult = (GC_MakeArcOfCircle *)0 ;
  gp_Circ *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Pnt *arg3 = 0 ;
  Standard_Boolean arg4 ;
  GC_MakeArcOfCircle *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (GC_MakeArcOfCircle *)new GC_MakeArcOfCircle((gp_Circ const &)*arg1,(gp_Pnt const &)*arg2,(gp_Pnt const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GC_MakeArcOfCircle *)0;
  }
}


EXPORT Handle_Geom_TrimmedCurve *_wrap_GC_MakeArcOfCircle_Value (GC_MakeArcOfCircle *larg1) {
  Handle_Geom_TrimmedCurve * lresult = (Handle_Geom_TrimmedCurve *)0 ;
  GC_MakeArcOfCircle *arg1 = (GC_MakeArcOfCircle *) 0 ;
  Handle_Geom_TrimmedCurve *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Handle_Geom_TrimmedCurve *) &((GC_MakeArcOfCircle const *)arg1)->Value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Handle_Geom_TrimmedCurve *)0;
  }
}


EXPORT void _wrap_delete_GC_MakeArcOfCircle (GC_MakeArcOfCircle *larg1) {
  GC_MakeArcOfCircle *arg1 = (GC_MakeArcOfCircle *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include <TopExp.hxx>
  
EXPORT TopLoc_Location *_wrap_new_TopLoc_Location__SWIG_0 () {
  TopLoc_Location * lresult = (TopLoc_Location *)0 ;
  TopLoc_Location *result = 0 ;
  
  try {
    result = (TopLoc_Location *)new TopLoc_Location();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopLoc_Location *)0;
  }
}


EXPORT TopLoc_Location *_wrap_new_TopLoc_Location__SWIG_1 (gp_Trsf *larg1) {
  TopLoc_Location * lresult = (TopLoc_Location *)0 ;
  gp_Trsf *arg1 = 0 ;
  TopLoc_Location *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopLoc_Location *)new TopLoc_Location((gp_Trsf const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopLoc_Location *)0;
  }
}


EXPORT bool _wrap_TopLoc_Location_isIdentity (TopLoc_Location *larg1) {
  bool lresult = (bool)0 ;
  TopLoc_Location *arg1 = (TopLoc_Location *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)(arg1)->IsIdentity();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT gp_Trsf *_wrap_TopLoc_Location_transformation (TopLoc_Location *larg1) {
  gp_Trsf * lresult = (gp_Trsf *)0 ;
  TopLoc_Location *arg1 = (TopLoc_Location *) 0 ;
  gp_Trsf *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (gp_Trsf *) &(arg1)->Transformation();
    lresult = result;
    return lresult;
  } catch (...) {
    return (gp_Trsf *)0;
  }
}


EXPORT void _wrap_delete_TopLoc_Location (TopLoc_Location *larg1) {
  TopLoc_Location *arg1 = (TopLoc_Location *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopExp_vertices__SWIG_0 (TopoDS_Edge *larg1, TopoDS_Vertex *larg2, TopoDS_Vertex *larg3, bool larg4) {
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  Standard_Boolean arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    TopExp::Vertices((TopoDS_Edge const &)*arg1,*arg2,*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopExp_vertices__SWIG_1 (TopoDS_Edge *larg1, TopoDS_Vertex *larg2, TopoDS_Vertex *larg3) {
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    TopExp::Vertices((TopoDS_Edge const &)*arg1,*arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_TopExp_commonVertex (TopoDS_Edge *larg1, TopoDS_Edge *larg2, TopoDS_Vertex *larg3) {
  bool lresult = (bool)0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Standard_Boolean)TopExp::CommonVertex((TopoDS_Edge const &)*arg1,(TopoDS_Edge const &)*arg2,*arg3);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_TopExp (TopExp *larg1) {
  TopExp *arg1 = (TopExp *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include "TopExp_Explorer.hxx"
EXPORT TopExp_Explorer *_wrap_new_TopExp_Explorer__SWIG_0 () {
  TopExp_Explorer * lresult = (TopExp_Explorer *)0 ;
  TopExp_Explorer *result = 0 ;
  
  try {
    result = (TopExp_Explorer *)new TopExp_Explorer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopExp_Explorer *)0;
  }
}


EXPORT TopExp_Explorer *_wrap_new_TopExp_Explorer__SWIG_1 (TopoDS_Shape *larg1, TopAbs_ShapeEnum larg2, TopAbs_ShapeEnum larg3) {
  TopExp_Explorer * lresult = (TopExp_Explorer *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopAbs_ShapeEnum arg2 ;
  TopAbs_ShapeEnum arg3 ;
  TopExp_Explorer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (TopExp_Explorer *)new TopExp_Explorer((TopoDS_Shape const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopExp_Explorer *)0;
  }
}


EXPORT TopExp_Explorer *_wrap_new_TopExp_Explorer__SWIG_2 (TopoDS_Shape *larg1, TopAbs_ShapeEnum larg2) {
  TopExp_Explorer * lresult = (TopExp_Explorer *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopAbs_ShapeEnum arg2 ;
  TopExp_Explorer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (TopExp_Explorer *)new TopExp_Explorer((TopoDS_Shape const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopExp_Explorer *)0;
  }
}


EXPORT void _wrap_TopExp_Explorer_init__SWIG_0 (TopExp_Explorer *larg1, TopoDS_Shape *larg2, TopAbs_ShapeEnum larg3, TopAbs_ShapeEnum larg4) {
  TopExp_Explorer *arg1 = (TopExp_Explorer *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopAbs_ShapeEnum arg3 ;
  TopAbs_ShapeEnum arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->Init((TopoDS_Shape const &)*arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TopExp_Explorer_init__SWIG_1 (TopExp_Explorer *larg1, TopoDS_Shape *larg2, TopAbs_ShapeEnum larg3) {
  TopExp_Explorer *arg1 = (TopExp_Explorer *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopAbs_ShapeEnum arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->Init((TopoDS_Shape const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_TopExp_Explorer_more (TopExp_Explorer *larg1) {
  bool lresult = (bool)0 ;
  TopExp_Explorer *arg1 = (TopExp_Explorer *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((TopExp_Explorer const *)arg1)->More();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_TopExp_Explorer_next (TopExp_Explorer *larg1) {
  TopExp_Explorer *arg1 = (TopExp_Explorer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Next();
    
  } catch (...) {
    
  }
}


EXPORT TopoDS_Shape *_wrap_TopExp_Explorer_current (TopExp_Explorer *larg1) {
  TopoDS_Shape * lresult = (TopoDS_Shape *)0 ;
  TopExp_Explorer *arg1 = (TopExp_Explorer *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopoDS_Shape *) &(arg1)->Current();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Shape *)0;
  }
}


EXPORT void _wrap_delete_TopExp_Explorer (TopExp_Explorer *larg1) {
  TopExp_Explorer *arg1 = (TopExp_Explorer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include "Bnd_Box.hxx"
EXPORT Bnd_Box *_wrap_new_Bnd_Box () {
  Bnd_Box * lresult = (Bnd_Box *)0 ;
  Bnd_Box *result = 0 ;
  
  try {
    result = (Bnd_Box *)new Bnd_Box();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Bnd_Box *)0;
  }
}


EXPORT bool _wrap_Bnd_Box_isVoid (Bnd_Box *larg1) {
  bool lresult = (bool)0 ;
  Bnd_Box *arg1 = (Bnd_Box *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((Bnd_Box const *)arg1)->IsVoid();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


SWIGINTERN void Bnd_Box_get(Bnd_Box *self,double box[6]){
		if(!self->IsVoid())
			self->Get(box[0], box[1], box[2], box[3], box[4], box[5]);
	}
EXPORT void _wrap_Bnd_Box_get (Bnd_Box *larg1, double *larg2) {
  Bnd_Box *arg1 = (Bnd_Box *) 0 ;
  double *arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Bnd_Box_get(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Bnd_Box (Bnd_Box *larg1) {
  Bnd_Box *arg1 = (Bnd_Box *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include "BRepBndLib.hxx"
EXPORT void _wrap_BRepBndLib_add (TopoDS_Shape *larg1, Bnd_Box *larg2) {
  TopoDS_Shape *arg1 = 0 ;
  Bnd_Box *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    BRepBndLib::Add((TopoDS_Shape const &)*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_BRepBndLib (BRepBndLib *larg1) {
  BRepBndLib *arg1 = (BRepBndLib *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include "Adaptor2d_Curve2d.hxx"
EXPORT gp_Pnt2d *_wrap_Adaptor2d_Curve2d_value (Adaptor2d_Curve2d *larg1, Standard_Real larg2) {
  gp_Pnt2d * lresult = (gp_Pnt2d *)0 ;
  Adaptor2d_Curve2d *arg1 = (Adaptor2d_Curve2d *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((Adaptor2d_Curve2d const *)arg1)->Value(arg2);
    lresult = new gp_Pnt2d(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt2d *)0;
  }
}


EXPORT void _wrap_delete_Adaptor2d_Curve2d (Adaptor2d_Curve2d *larg1) {
  Adaptor2d_Curve2d *arg1 = (Adaptor2d_Curve2d *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include "Geom2dAdaptor_Curve.hxx"
EXPORT Geom2dAdaptor_Curve *_wrap_new_Geom2dAdaptor_Curve__SWIG_0 () {
  Geom2dAdaptor_Curve * lresult = (Geom2dAdaptor_Curve *)0 ;
  Geom2dAdaptor_Curve *result = 0 ;
  
  try {
    result = (Geom2dAdaptor_Curve *)new Geom2dAdaptor_Curve();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Geom2dAdaptor_Curve *)0;
  }
}


EXPORT Geom2dAdaptor_Curve *_wrap_new_Geom2dAdaptor_Curve__SWIG_1 (Handle_Geom2d_Curve *larg1) {
  Geom2dAdaptor_Curve * lresult = (Geom2dAdaptor_Curve *)0 ;
  Handle_Geom2d_Curve *arg1 = 0 ;
  Geom2dAdaptor_Curve *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Geom2dAdaptor_Curve *)new Geom2dAdaptor_Curve((Handle_Geom2d_Curve const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Geom2dAdaptor_Curve *)0;
  }
}


EXPORT Geom2dAdaptor_Curve *_wrap_new_Geom2dAdaptor_Curve__SWIG_2 (Handle_Geom2d_Curve *larg1, Standard_Real larg2, Standard_Real larg3) {
  Geom2dAdaptor_Curve * lresult = (Geom2dAdaptor_Curve *)0 ;
  Handle_Geom2d_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Geom2dAdaptor_Curve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Geom2dAdaptor_Curve *)new Geom2dAdaptor_Curve((Handle_Geom2d_Curve const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Geom2dAdaptor_Curve *)0;
  }
}


EXPORT void _wrap_Geom2dAdaptor_Curve_load__SWIG_0 (Geom2dAdaptor_Curve *larg1, Handle_Geom2d_Curve *larg2) {
  Geom2dAdaptor_Curve *arg1 = (Geom2dAdaptor_Curve *) 0 ;
  Handle_Geom2d_Curve *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Load((Handle_Geom2d_Curve const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Geom2dAdaptor_Curve_load__SWIG_1 (Geom2dAdaptor_Curve *larg1, Handle_Geom2d_Curve *larg2, Standard_Real larg3, Standard_Real larg4) {
  Geom2dAdaptor_Curve *arg1 = (Geom2dAdaptor_Curve *) 0 ;
  Handle_Geom2d_Curve *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->Load((Handle_Geom2d_Curve const &)*arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Geom2dAdaptor_Curve (Geom2dAdaptor_Curve *larg1) {
  Geom2dAdaptor_Curve *arg1 = (Geom2dAdaptor_Curve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include "Adaptor3d_Curve.hxx"
EXPORT gp_Pnt const *_wrap_Adaptor3d_Curve_value (Adaptor3d_Curve *larg1, Standard_Real larg2) {
  gp_Pnt const * lresult = (gp_Pnt const *)0 ;
  Adaptor3d_Curve *arg1 = (Adaptor3d_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((Adaptor3d_Curve const *)arg1)->Value(arg2);
    lresult = new gp_Pnt const(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt const *)0;
  }
}


SWIGINTERN void Adaptor3d_Curve_arrayValues(Adaptor3d_Curve *self,int size,double u[]){
		for (int i = 0; i < size; i++)
		{
			gp_Pnt gp=self->Value(u[3*i]);
			u[3*i]   = gp.X();
			u[3*i+1] = gp.Y();
			u[3*i+2] = gp.Z();
		}	
	}
EXPORT void _wrap_Adaptor3d_Curve_arrayValues (Adaptor3d_Curve *larg1, int larg2, double *larg3) {
  Adaptor3d_Curve *arg1 = (Adaptor3d_Curve *) 0 ;
  int arg2 ;
  double *arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    Adaptor3d_Curve_arrayValues(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Adaptor3d_Curve (Adaptor3d_Curve *larg1) {
  Adaptor3d_Curve *arg1 = (Adaptor3d_Curve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include "GeomAdaptor_Curve.hxx"
EXPORT GeomAdaptor_Curve *_wrap_new_GeomAdaptor_Curve__SWIG_0 () {
  GeomAdaptor_Curve * lresult = (GeomAdaptor_Curve *)0 ;
  GeomAdaptor_Curve *result = 0 ;
  
  try {
    result = (GeomAdaptor_Curve *)new GeomAdaptor_Curve();
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAdaptor_Curve *)0;
  }
}


EXPORT GeomAdaptor_Curve *_wrap_new_GeomAdaptor_Curve__SWIG_1 (Handle_Geom_Curve *larg1) {
  GeomAdaptor_Curve * lresult = (GeomAdaptor_Curve *)0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  GeomAdaptor_Curve *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (GeomAdaptor_Curve *)new GeomAdaptor_Curve((Handle_Geom_Curve const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAdaptor_Curve *)0;
  }
}


EXPORT GeomAdaptor_Curve *_wrap_new_GeomAdaptor_Curve__SWIG_2 (Handle_Geom_Curve *larg1, Standard_Real larg2, Standard_Real larg3) {
  GeomAdaptor_Curve * lresult = (GeomAdaptor_Curve *)0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  GeomAdaptor_Curve *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (GeomAdaptor_Curve *)new GeomAdaptor_Curve((Handle_Geom_Curve const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAdaptor_Curve *)0;
  }
}


EXPORT void _wrap_GeomAdaptor_Curve_load__SWIG_0 (GeomAdaptor_Curve *larg1, Handle_Geom_Curve *larg2) {
  GeomAdaptor_Curve *arg1 = (GeomAdaptor_Curve *) 0 ;
  Handle_Geom_Curve *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->Load((Handle_Geom_Curve const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_GeomAdaptor_Curve_load__SWIG_1 (GeomAdaptor_Curve *larg1, Handle_Geom_Curve *larg2, Standard_Real larg3, Standard_Real larg4) {
  GeomAdaptor_Curve *arg1 = (GeomAdaptor_Curve *) 0 ;
  Handle_Geom_Curve *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->Load((Handle_Geom_Curve const &)*arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_GeomAdaptor_Curve (GeomAdaptor_Curve *larg1) {
  GeomAdaptor_Curve *arg1 = (GeomAdaptor_Curve *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include "GProp_GProps.hxx"
EXPORT GProp_GProps *_wrap_new_GProp_GProps () {
  GProp_GProps * lresult = (GProp_GProps *)0 ;
  GProp_GProps *result = 0 ;
  
  try {
    result = (GProp_GProps *)new GProp_GProps();
    lresult = result;
    return lresult;
  } catch (...) {
    return (GProp_GProps *)0;
  }
}


EXPORT Standard_Real _wrap_GProp_GProps_mass (GProp_GProps *larg1) {
  Standard_Real lresult = (Standard_Real)0 ;
  GProp_GProps *arg1 = (GProp_GProps *) 0 ;
  Standard_Real result;
  
  arg1 = larg1;
  try {
    result = (Standard_Real)((GProp_GProps const *)arg1)->Mass();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_GProp_GProps (GProp_GProps *larg1) {
  GProp_GProps *arg1 = (GProp_GProps *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include "BRepGProp.hxx"
EXPORT void _wrap_BRepGProp_linearProperties (TopoDS_Shape *larg1, GProp_GProps *larg2) {
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    BRepGProp::LinearProperties((TopoDS_Shape const &)*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepGProp_volumeProperties__SWIG_0 (TopoDS_Shape *larg1, GProp_GProps *larg2, bool larg3) {
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    BRepGProp::VolumeProperties((TopoDS_Shape const &)*arg1,*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BRepGProp_volumeProperties__SWIG_1 (TopoDS_Shape *larg1, GProp_GProps *larg2) {
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    BRepGProp::VolumeProperties((TopoDS_Shape const &)*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT Standard_Real _wrap_BRepGProp_volumeProperties__SWIG_2 (TopoDS_Shape *larg1, GProp_GProps *larg2, Standard_Real larg3, bool larg4) {
  Standard_Real lresult = (Standard_Real)0 ;
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (Standard_Real)BRepGProp::VolumeProperties((TopoDS_Shape const &)*arg1,*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT Standard_Real _wrap_BRepGProp_volumeProperties__SWIG_3 (TopoDS_Shape *larg1, GProp_GProps *larg2, Standard_Real larg3) {
  Standard_Real lresult = (Standard_Real)0 ;
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Standard_Real)BRepGProp::VolumeProperties((TopoDS_Shape const &)*arg1,*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_BRepGProp_surfaceProperties__SWIG_0 (TopoDS_Shape *larg1, GProp_GProps *larg2) {
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    BRepGProp::SurfaceProperties((TopoDS_Shape const &)*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT Standard_Real _wrap_BRepGProp_surfaceProperties__SWIG_1 (TopoDS_Shape *larg1, GProp_GProps *larg2, Standard_Real larg3) {
  Standard_Real lresult = (Standard_Real)0 ;
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Standard_Real)BRepGProp::SurfaceProperties((TopoDS_Shape const &)*arg1,*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_BRepGProp (BRepGProp *larg1) {
  BRepGProp *arg1 = (BRepGProp *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include <ShapeAnalysis_FreeBounds.hxx>
EXPORT ShapeAnalysis_FreeBounds *_wrap_new_ShapeAnalysis_FreeBounds__SWIG_0 (TopoDS_Shape *larg1, bool larg2, bool larg3) {
  ShapeAnalysis_FreeBounds * lresult = (ShapeAnalysis_FreeBounds *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 ;
  Standard_Boolean arg3 ;
  ShapeAnalysis_FreeBounds *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    result = (ShapeAnalysis_FreeBounds *)new ShapeAnalysis_FreeBounds((TopoDS_Shape const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ShapeAnalysis_FreeBounds *)0;
  }
}


EXPORT ShapeAnalysis_FreeBounds *_wrap_new_ShapeAnalysis_FreeBounds__SWIG_1 (TopoDS_Shape *larg1, bool larg2) {
  ShapeAnalysis_FreeBounds * lresult = (ShapeAnalysis_FreeBounds *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 ;
  ShapeAnalysis_FreeBounds *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (ShapeAnalysis_FreeBounds *)new ShapeAnalysis_FreeBounds((TopoDS_Shape const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ShapeAnalysis_FreeBounds *)0;
  }
}


EXPORT ShapeAnalysis_FreeBounds *_wrap_new_ShapeAnalysis_FreeBounds__SWIG_2 (TopoDS_Shape *larg1) {
  ShapeAnalysis_FreeBounds * lresult = (ShapeAnalysis_FreeBounds *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  ShapeAnalysis_FreeBounds *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ShapeAnalysis_FreeBounds *)new ShapeAnalysis_FreeBounds((TopoDS_Shape const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ShapeAnalysis_FreeBounds *)0;
  }
}


EXPORT TopoDS_Compound *_wrap_ShapeAnalysis_FreeBounds_getClosedWires (ShapeAnalysis_FreeBounds *larg1) {
  TopoDS_Compound * lresult = (TopoDS_Compound *)0 ;
  ShapeAnalysis_FreeBounds *arg1 = (ShapeAnalysis_FreeBounds *) 0 ;
  TopoDS_Compound *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopoDS_Compound *) &((ShapeAnalysis_FreeBounds const *)arg1)->GetClosedWires();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Compound *)0;
  }
}


EXPORT TopoDS_Compound *_wrap_ShapeAnalysis_FreeBounds_getOpenWires (ShapeAnalysis_FreeBounds *larg1) {
  TopoDS_Compound * lresult = (TopoDS_Compound *)0 ;
  ShapeAnalysis_FreeBounds *arg1 = (ShapeAnalysis_FreeBounds *) 0 ;
  TopoDS_Compound *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (TopoDS_Compound *) &((ShapeAnalysis_FreeBounds const *)arg1)->GetOpenWires();
    lresult = result;
    return lresult;
  } catch (...) {
    return (TopoDS_Compound *)0;
  }
}


EXPORT void _wrap_delete_ShapeAnalysis_FreeBounds (ShapeAnalysis_FreeBounds *larg1) {
  ShapeAnalysis_FreeBounds *arg1 = (ShapeAnalysis_FreeBounds *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include <GCPnts_UniformDeflection.hxx>
EXPORT GCPnts_UniformDeflection *_wrap_new_GCPnts_UniformDeflection () {
  GCPnts_UniformDeflection * lresult = (GCPnts_UniformDeflection *)0 ;
  GCPnts_UniformDeflection *result = 0 ;
  
  try {
    result = (GCPnts_UniformDeflection *)new GCPnts_UniformDeflection();
    lresult = result;
    return lresult;
  } catch (...) {
    return (GCPnts_UniformDeflection *)0;
  }
}


EXPORT void _wrap_GCPnts_UniformDeflection_initialize__SWIG_0 (GCPnts_UniformDeflection *larg1, Adaptor3d_Curve *larg2, Standard_Real larg3, Standard_Real larg4, Standard_Real larg5, bool larg6) {
  GCPnts_UniformDeflection *arg1 = (GCPnts_UniformDeflection *) 0 ;
  Adaptor3d_Curve *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  Standard_Boolean arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    (arg1)->Initialize(*arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_GCPnts_UniformDeflection_initialize__SWIG_1 (GCPnts_UniformDeflection *larg1, Adaptor3d_Curve *larg2, Standard_Real larg3, Standard_Real larg4, Standard_Real larg5) {
  GCPnts_UniformDeflection *arg1 = (GCPnts_UniformDeflection *) 0 ;
  Adaptor3d_Curve *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->Initialize(*arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT Standard_Integer _wrap_GCPnts_UniformDeflection_nbPoints (GCPnts_UniformDeflection *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  GCPnts_UniformDeflection *arg1 = (GCPnts_UniformDeflection *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)((GCPnts_UniformDeflection const *)arg1)->NbPoints();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT Standard_Real _wrap_GCPnts_UniformDeflection_parameter (GCPnts_UniformDeflection *larg1, Standard_Integer larg2) {
  Standard_Real lresult = (Standard_Real)0 ;
  GCPnts_UniformDeflection *arg1 = (GCPnts_UniformDeflection *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Standard_Real)((GCPnts_UniformDeflection const *)arg1)->Parameter(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Real)0;
  }
}


EXPORT void _wrap_delete_GCPnts_UniformDeflection (GCPnts_UniformDeflection *larg1) {
  GCPnts_UniformDeflection *arg1 = (GCPnts_UniformDeflection *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include <BRepMesh_DiscretRoot.hxx>
EXPORT void _wrap_BRepMesh_DiscretRoot_perform (BRepMesh_DiscretRoot *larg1) {
  BRepMesh_DiscretRoot *arg1 = (BRepMesh_DiscretRoot *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Perform();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_BRepMesh_DiscretRoot (BRepMesh_DiscretRoot *larg1) {
  BRepMesh_DiscretRoot *arg1 = (BRepMesh_DiscretRoot *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include <BRepMesh_IncrementalMesh.hxx>
EXPORT BRepMesh_IncrementalMesh *_wrap_new_BRepMesh_IncrementalMesh__SWIG_0 () {
  BRepMesh_IncrementalMesh * lresult = (BRepMesh_IncrementalMesh *)0 ;
  BRepMesh_IncrementalMesh *result = 0 ;
  
  try {
    result = (BRepMesh_IncrementalMesh *)new BRepMesh_IncrementalMesh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepMesh_IncrementalMesh *)0;
  }
}


EXPORT BRepMesh_IncrementalMesh *_wrap_new_BRepMesh_IncrementalMesh__SWIG_1 (TopoDS_Shape *larg1, Standard_Real larg2, bool larg3, Standard_Real larg4) {
  BRepMesh_IncrementalMesh * lresult = (BRepMesh_IncrementalMesh *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  Standard_Real arg4 ;
  BRepMesh_IncrementalMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = (BRepMesh_IncrementalMesh *)new BRepMesh_IncrementalMesh((TopoDS_Shape const &)*arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepMesh_IncrementalMesh *)0;
  }
}


EXPORT BRepMesh_IncrementalMesh *_wrap_new_BRepMesh_IncrementalMesh__SWIG_2 (TopoDS_Shape *larg1, Standard_Real larg2, bool larg3) {
  BRepMesh_IncrementalMesh * lresult = (BRepMesh_IncrementalMesh *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  BRepMesh_IncrementalMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (BRepMesh_IncrementalMesh *)new BRepMesh_IncrementalMesh((TopoDS_Shape const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepMesh_IncrementalMesh *)0;
  }
}


EXPORT BRepMesh_IncrementalMesh *_wrap_new_BRepMesh_IncrementalMesh__SWIG_3 (TopoDS_Shape *larg1, Standard_Real larg2) {
  BRepMesh_IncrementalMesh * lresult = (BRepMesh_IncrementalMesh *)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Real arg2 ;
  BRepMesh_IncrementalMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (BRepMesh_IncrementalMesh *)new BRepMesh_IncrementalMesh((TopoDS_Shape const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (BRepMesh_IncrementalMesh *)0;
  }
}


EXPORT void _wrap_BRepMesh_IncrementalMesh_perform (BRepMesh_IncrementalMesh *larg1) {
  BRepMesh_IncrementalMesh *arg1 = (BRepMesh_IncrementalMesh *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->Perform();
    
  } catch (...) {
    
  }
}


EXPORT bool _wrap_BRepMesh_IncrementalMesh_isModified (BRepMesh_IncrementalMesh *larg1) {
  bool lresult = (bool)0 ;
  BRepMesh_IncrementalMesh *arg1 = (BRepMesh_IncrementalMesh *) 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)((BRepMesh_IncrementalMesh const *)arg1)->IsModified();
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_BRepMesh_IncrementalMesh (BRepMesh_IncrementalMesh *larg1) {
  BRepMesh_IncrementalMesh *arg1 = (BRepMesh_IncrementalMesh *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include <GeomAPI_ProjectPointOnSurf.hxx>
EXPORT GeomAPI_ProjectPointOnSurf *_wrap_new_GeomAPI_ProjectPointOnSurf (gp_Pnt *larg1, Handle_Geom_Surface *larg2) {
  GeomAPI_ProjectPointOnSurf * lresult = (GeomAPI_ProjectPointOnSurf *)0 ;
  gp_Pnt *arg1 = 0 ;
  Handle_Geom_Surface *arg2 = 0 ;
  GeomAPI_ProjectPointOnSurf *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (GeomAPI_ProjectPointOnSurf *)new GeomAPI_ProjectPointOnSurf((gp_Pnt const &)*arg1,(Handle_Geom_Surface const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (GeomAPI_ProjectPointOnSurf *)0;
  }
}


EXPORT void _wrap_GeomAPI_ProjectPointOnSurf_init (GeomAPI_ProjectPointOnSurf *larg1, gp_Pnt *larg2, Handle_Geom_Surface *larg3) {
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  gp_Pnt *arg2 = 0 ;
  Handle_Geom_Surface *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->Init((gp_Pnt const &)*arg2,(Handle_Geom_Surface const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT Standard_Integer _wrap_GeomAPI_ProjectPointOnSurf_nbPoints (GeomAPI_ProjectPointOnSurf *larg1) {
  Standard_Integer lresult = (Standard_Integer)0 ;
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  Standard_Integer result;
  
  arg1 = larg1;
  try {
    result = (Standard_Integer)((GeomAPI_ProjectPointOnSurf const *)arg1)->NbPoints();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Standard_Integer)0;
  }
}


EXPORT Quantity_Length _wrap_GeomAPI_ProjectPointOnSurf_lowerDistance (GeomAPI_ProjectPointOnSurf *larg1) {
  Quantity_Length lresult = (Quantity_Length)0 ;
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  Quantity_Length result;
  
  arg1 = larg1;
  try {
    result = (Quantity_Length)((GeomAPI_ProjectPointOnSurf const *)arg1)->LowerDistance();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Quantity_Length)0;
  }
}


EXPORT gp_Pnt const *_wrap_GeomAPI_ProjectPointOnSurf_point (GeomAPI_ProjectPointOnSurf *larg1, Standard_Integer larg2) {
  gp_Pnt const * lresult = (gp_Pnt const *)0 ;
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((GeomAPI_ProjectPointOnSurf const *)arg1)->Point(arg2);
    lresult = new gp_Pnt const(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt const *)0;
  }
}


EXPORT void _wrap_GeomAPI_ProjectPointOnSurf_lowerDistanceParameters (GeomAPI_ProjectPointOnSurf *larg1, Quantity_Parameter *larg2, Quantity_Parameter *larg3) {
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  Quantity_Parameter *arg2 = 0 ;
  Quantity_Parameter *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((GeomAPI_ProjectPointOnSurf const *)arg1)->LowerDistanceParameters(*arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_GeomAPI_ProjectPointOnSurf_parameters (GeomAPI_ProjectPointOnSurf *larg1, Standard_Integer larg2, Quantity_Parameter *larg3, Quantity_Parameter *larg4) {
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  Standard_Integer arg2 ;
  Quantity_Parameter *arg3 = 0 ;
  Quantity_Parameter *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ((GeomAPI_ProjectPointOnSurf const *)arg1)->Parameters(arg2,*arg3,*arg4);
    
  } catch (...) {
    
  }
}


EXPORT gp_Pnt *_wrap_GeomAPI_ProjectPointOnSurf_nearestPoint (GeomAPI_ProjectPointOnSurf *larg1) {
  gp_Pnt * lresult = (gp_Pnt *)0 ;
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  gp_Pnt result;
  
  arg1 = larg1;
  try {
    result = ((GeomAPI_ProjectPointOnSurf const *)arg1)->NearestPoint();
    lresult = new gp_Pnt(result);
    return lresult;
  } catch (...) {
    return (gp_Pnt *)0;
  }
}


EXPORT void _wrap_delete_GeomAPI_ProjectPointOnSurf (GeomAPI_ProjectPointOnSurf *larg1) {
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


#include <BRepAlgo.hxx>
EXPORT bool _wrap_BRepAlgo_isValid (TopoDS_Shape *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)BRepAlgo::IsValid((TopoDS_Shape const &)*arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT bool _wrap_BRepAlgo_isTopologicallyValid (TopoDS_Shape *larg1) {
  bool lresult = (bool)0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean result;
  
  arg1 = larg1;
  try {
    result = (Standard_Boolean)BRepAlgo::IsTopologicallyValid((TopoDS_Shape const &)*arg1);
    lresult = (bool)result;
    return lresult;
  } catch (...) {
    return (bool)0;
  }
}


EXPORT void _wrap_delete_BRepAlgo (BRepAlgo *larg1) {
  BRepAlgo *arg1 = (BRepAlgo *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


