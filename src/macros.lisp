(in-package :oc)

(defmacro with-topods-shape (&body ff-call)
  `(let* ((ff-shape ,@ff-call)
	  (shape-class
	   (if (null-pointer-p ff-shape)
	       nil
	       (case (_wrap_TopoDS_Shape_ShapeType ff-shape)
		 (:TopAbs_COMPOUND (load-time-value (find-class 'topods-compound)))
		 (:TopAbs_COMPSOLID (load-time-value (find-class 'topods-compsolid)))
		 (:TopAbs_SOLID (load-time-value (find-class 'topods-solid)))
		 (:TopAbs_SHELL (load-time-value (find-class 'topods-shell)))
		 (:TopAbs_FACE (load-time-value (find-class 'topods-face)))
		 (:TopAbs_WIRE (load-time-value (find-class 'topods-wire)))
		 (:TopAbs_EDGE (load-time-value (find-class 'topods-edge)))
		 (:TopAbs_VERTEX (load-time-value (find-class 'topods-vertex)))
		 (:TopAbs_SHAPE (load-time-value (find-class 'topods-shape))))))
	  (shape (when shape-class (allocate-instance shape-class))))
     (when shape-class (setf (ff-pointer shape) ff-shape))
     shape))

(defmacro with-geom2d-curve (&body ff-call)
  `(let* ((ff-curve ,@ff-call)
	  (curve-class (case (_wrap_Geom2d_Curve_GeometryType ff-curve)
			 (300 (load-time-value (find-class 'geom2d-line)))
			 (301 (load-time-value (find-class 'geom2d-circle)))
			 (302 (load-time-value (find-class 'geom2d-ellipse)))
			 (303 (load-time-value (find-class 'geom2d-hyperbola)))
			 (304 (load-time-value (find-class 'geom2d-parabola)))
			 (305 (load-time-value (find-class 'geom2d-offset-curve)))
			 (306 (load-time-value (find-class 'geom2d-bezier-curve)))
			 (307 (load-time-value (find-class 'geom2d-bspline-curve)))
			 (308 (load-time-value (find-class 'geom2d-trimmed-curve)))
			 (309 (load-time-value (find-class 'bisector-bisecana)))
			 (310 (load-time-value (find-class 'bisector-biseccc)))
			 (311 (load-time-value (find-class 'bisector-bisecpc)))))
	  (curve (when curve-class (allocate-instance curve-class))))
     (setf (ff-pointer curve) ff-curve)
     (oc:finalize curve)
     curve))

(defmacro with-geom-surface (&body ff-call)
  `(let* ((ff-surface ,@ff-call)
	  (surface-class (case (_wrap_Geom_Surface_GeometryType ff-surface)
			   (200 (load-time-value (find-class 'geom-bezier-surface)))
			   (201 (load-time-value (find-class 'geom-bspline-surface)))
			   (202 (load-time-value (find-class 'geom-rectangular-trimmed-surface)))
			   (203 (load-time-value (find-class 'geom-spherical-surface)))
			   (204 (load-time-value (find-class 'geom-toroidal-surface)))
			   (205 (load-time-value (find-class 'geom-offset-surface)))
			   (206 (load-time-value (find-class 'geom-surface-of-revolution)))
			   (207 (load-time-value (find-class 'geom-conical-surface)))
			   (208 (load-time-value (find-class 'geom-cylindrical-surface)))
			   (209 (load-time-value (find-class 'geom-surface-of-linear-extrusion)))
			   (210 (load-time-value (find-class 'geom-plane)))))
	  (surface (when surface-class (allocate-instance surface-class))))
     (setf (ff-pointer surface) ff-surface)
     (oc:finalize surface)
     surface))

(defmacro with-geom2d-vector (&body ff-call)
  (let ((pointer-sym (gensym "POINTER-")))
    `(let* ((,pointer-sym ,@ff-call)
	    (instance (ecase (_wrap_Geom2d_Vector_GeometryType ,pointer-sym)
			(312 (allocate-instance (load-time-value (find-class 'geom2d-vector-with-magnitude))))
			(313 (allocate-instance (load-time-value (find-class 'geom2d-direction)))))))
       (setf (ff-pointer instance) ,pointer-sym)
       (oc:finalize instance)
       instance)))
