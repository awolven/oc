(in-package :gp)

(defun lin2d (&rest args &key (A (ax2d)) (P (pnt2d)) (V (dir2d)) B C)
  (let* ((pointer (foreign-alloc '(:struct gp-lin2d)))
	 (struct (make-lin2d :ptr pointer)))
    (cond ((or (null args) (and A (null P) (null V) (null B) (null C)))
	   (setf (gp-lin2d-pos-loc-coord-x pointer) (gp-ax2d-loc-coord-x (ptr A))
		 (gp-lin2d-pos-loc-coord-y pointer) (gp-ax2d-loc-coord-y (ptr A))
		 (gp-lin2d-pos-vdir-coord-x pointer) (gp-ax2d-vdir-coord-x (ptr A))
		 (gp-lin2d-pos-vdir-coord-y pointer) (gp-ax2d-vdir-coord-y (ptr A))))
	  ((and (null A) (null B) (null C) P V)
	   (setf (gp-lin2d-pos-loc-coord-x pointer) (gp-xy-x (ptr P))
		 (gp-lin2d-pos-loc-coord-y pointer) (gp-xy-y (ptr P))
		 (gp-lin2d-pos-vdir-coord-x pointer) (gp-xy-x (ptr V))
		 (gp-lin2d-pos-vdir-coord-y pointer) (gp-xy-y (ptr V))))
	  ((and A B C (null P) (null V))
	   (setq A (coerce A 'double-float)
		 B (coerce B 'double-float)
		 C (coerce C 'double-float))
	   (let ((norm2 (+ (* A A) (* B B))))
	     (when (<= norm2 +resolution+)
	       (error "coefficients too small"))
	     (setf (gp-lin2d-pos-loc-coord-x pointer) (- (/ (* A C) norm2))
		   (gp-lin2d-pos-loc-coord-y pointer) (- (/ (* B C) norm2))
		   (gp-lin2d-pos-vdir-coord-x pointer) (- B)
		   (gp-lin2d-pos-vdir-coord-y pointer) A)))
	  (t (error "Invalid arguments to constructor: ~S" args)))
    (finalize struct (lambda () (print 'freeing-lin2d) (foreign-free pointer)) :dont-save t)
    struct))
