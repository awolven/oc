(in-package :gp)

(defun circ (&key A2 R)
  (let* ((pointer (foreign-alloc '(:struct gp-circ)))
	 (struct (make-circ :ptr pointer)))
    (setf (gp-circ-pos-axis-loc-coord-x pointer) (gp-ax2-axis-loc-coord-x (ptr A2))
	  (gp-circ-pos-axis-loc-coord-y pointer) (gp-ax2-axis-loc-coord-y (ptr A2))
	  (gp-circ-pos-axis-loc-coord-z pointer) (gp-ax2-axis-loc-coord-z (ptr A2))
	  (gp-circ-pos-axis-vdir-coord-x pointer) (gp-ax2-axis-vdir-coord-x (ptr A2))
	  (gp-circ-pos-axis-vdir-coord-y pointer) (gp-ax2-axis-vdir-coord-y (ptr A2))
	  (gp-circ-pos-axis-vdir-coord-z pointer) (gp-ax2-axis-vdir-coord-z (ptr A2))
	  (gp-circ-pos-vydir-coord-x pointer) (gp-ax2-vydir-coord-x (ptr A2))
	  (gp-circ-pos-vydir-coord-y pointer) (gp-ax2-vydir-coord-y (ptr A2))
	  (gp-circ-pos-vydir-coord-z pointer) (gp-ax2-vydir-coord-z (ptr A2))
	  (gp-circ-pos-vxdir-coord-x pointer) (gp-ax2-vxdir-coord-x (ptr A2))
	  (gp-circ-pos-vxdir-coord-y pointer) (gp-ax2-vxdir-coord-y (ptr A2))
	  (gp-circ-pos-vxdir-coord-z pointer) (gp-ax2-vxdir-coord-z (ptr A2))
	  (gp-circ-radius pointer) (coerce R 'double-float))
    (finalize struct (lambda () (foreign-free pointer)) :dont-save t)
    struct))

(defmethod print-object ((object circ) stream)
  (let ((A2 (make-ax2 :ptr (foreign-slot-pointer (ptr object) '(:struct gp-circ) 'pos)
		      :own object)))
    (format stream "(~S :A2 ~A :R ~A)" (type-of object) A2 (gp-circ-radius (ptr object)))))
